<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791730599> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/duplicate> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://schema.org/creator> <https://api.github.com/users/hoijui> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://schema.org/description> "Looking at these examples:\r\nhttps://docs.rs/sophia_api/0.6.2/sophia_api/graph/trait.Graph.html#examples\r\n\r\nI ask myself.. how to actual do something there?\r\nThough I am a seasoned C/C++/Java/... dev, I am new to rust. I got some stuff running that I wrote myself, but trying to use this library knocked me out. everything I try in this for loop, fails. I do not think it is meaningful to ask for specific things, as I would just run into the next one directly. It would be nice to have an example that actually does something with the data, like store into a vec or map.\r\nEven better, a full tutorial!\r\n\r\n.. or at least pointers to code - anywhere - that uses the library." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://schema.org/endDate> "2021-03-06T07:00:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://schema.org/identifier> "100"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://schema.org/name> "Real Examples" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://schema.org/startDate> "2021-03-05T19:47:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/100"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/100> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797277754> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797322024> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://schema.org/creator> <https://api.github.com/users/niko2342> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://schema.org/description> "Hi,\r\n\r\nI've observed some strange behaviour executing generated tests created by the `namespace!` macro. I have the following code to create a skos namespace:\r\n\r\n```rust\r\n#[macro_use]\r\nextern crate sophia_api;\r\n\r\npub mod skos {\r\n    namespace!(\r\n        \"http://www.w3.org/2004/02/skos/core#\",\r\n        Concept,\r\n        prefLabel,\r\n        altLabel,\r\n        hiddenLabel\r\n    );\r\n}\r\n```\r\nThe code works fine in production, but the tests are failing completely randomly:\r\n\r\n```bash\r\ncargo test\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.01s\r\n     Running target/debug/deps/skos_test-55fef88c12ab2b53\r\n\r\nrunning 5 tests\r\ntest skos::test_valid_iri::Concept ... ok\r\ntest skos::test_valid_iri::hiddenLabel ... ok\r\ntest skos::test_valid_iri::prefLabel ... ok\r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', library/test/src/lib.rs:356:75\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nthread 'skos::test_valid_iri::altLabel' panicked at 'called `Result::unwrap()` on an `Err` value: \"SendError(..)\"', library/test/src/lib.rs:592:30\r\nerror: test failed, to rerun pass '--lib'\r\n```\r\n\r\nSame code, no changes:\r\n\r\n```bash\r\ncargo test\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.01s\r\n     Running target/debug/deps/skos_test-55fef88c12ab2b53\r\n\r\nrunning 5 tests\r\ntest skos::test_valid_iri::altLabel ... ok\r\ntest skos::test_valid_iri::prefLabel ... ok\r\ntest skos::test_valid_iri::Concept ... ok\r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', library/test/src/lib.rs:356:75\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nerror: test failed, to rerun pass '--lib'\r\n```\r\n\r\nThe namespace! macro was imported via `sophia_api`.\r\n\r\nAny ideas why the tests are failing?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://schema.org/endDate> "2021-03-12T06:51:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://schema.org/identifier> "103"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://schema.org/name> "Generated tests of namespace! macro" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://schema.org/startDate> "2021-03-11T20:46:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/103"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/103> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://schema.org/description> "Hi!\r\n\r\nWhile running tests using the `rdf-tests` I stumbled upon this issue, where valid percent-encoded IRI would be considered invalid: for instance, parsing [`rdf-charmod-uris/test002.nt`](https://www.w3.org/2013/RDFXMLTests/rdf-charmod-uris/test002.nt) will fail because `http://example.org/#Andr%C3%A9` is considered invalid.\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://schema.org/endDate> "2019-05-27T09:04:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://schema.org/identifier> "10"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://schema.org/name> "Percent-escaped IRI are considered invalid" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://schema.org/startDate> "2019-05-24T21:39:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/10"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/10> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/bug> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://schema.org/description> "At commit  b113fc4, one of the tests (see below) is passing most of the times, but failing every now and then. It seems to be always the same test, and always at the same point.\r\n\r\nSince it is non-deterministic, it is likely due to an unsafe block code. I'm also considering a wrong ref-counting in `TermIndexMapU`. The fact that it happens in the `default_graph` test, and not in any other test involving `TermIndexMapU`, might indicate that it has to do with the special treatment GraphId::Default has in `TermIndexMapU`.\r\n\r\nTest id: `graph::adapter::test::dataset::default_graph::test_retain`\r\nStack trace:\r\n```\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39\r\n   1: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:71\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n             at src/libstd/panicking.rs:197\r\n   3: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:208\r\n   4: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:474\r\n   5: std::panicking::continue_panic_fmt\r\n             at src/libstd/panicking.rs:381\r\n   6: rust_begin_unwind\r\n             at src/libstd/panicking.rs:308\r\n   7: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:85\r\n   8: core::panicking::panic\r\n             at src/libcore/panicking.rs:49\r\n   9: core::option::Option<T>::unwrap\r\n             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c/src/libcore/macros.rs:12\r\n  10: <sophia::graph::inmem::_term_index_map_u::TermIndexMapU<T,F> as sophia::term::index_map::TermIndexMap>::dec_ref\r\n             at sophia/src/graph/inmem/_term_index_map_u.rs:144\r\n  11: <sophia::dataset::inmem::_hash_dataset::HashDataset<I> as sophia::dataset::indexed::IndexedDataset>::remove_indexed\r\n             at sophia/src/dataset/inmem/_hash_dataset.rs:158\r\n  12: <sophia::dataset::inmem::_hash_dataset::HashDataset<I> as sophia::dataset::_traits::MutableDataset>::remove\r\n             at sophia/src/dataset/indexed.rs:102\r\n  13: <sophia::dataset::adapter::DatasetGraph<D,E,sophia::term::graph_id::GraphId<F>> as sophia::graph::_traits::MutableGraph>::remove\r\n             at sophia/src/dataset/adapter.rs:151\r\n  14: <sophia::graph::_sinks::Remover<G> as sophia::triple::stream::TripleSink>::feed\r\n             at sophia/src/graph/_sinks.rs:60\r\n  15: sophia::triple::stream::TripleSource::in_sink\r\n             at sophia/src/triple/stream.rs:55\r\n  16: sophia::graph::_traits::MutableGraph::remove_all\r\n             at sophia/src/graph/_traits.rs:450\r\n  17: sophia::graph::_traits::MutableGraph::retain\r\n             at sophia/src/graph/_traits.rs:524\r\n  18: sophia::graph::adapter::test::dataset::default_graph::test_retain\r\n             at sophia/src/graph/test.rs:261\r\n  19: sophia::graph::adapter::test::dataset::default_graph::test_retain::{{closure}}\r\n             at sophia/src/graph/test.rs:256\r\n  20: core::ops::function::FnOnce::call_once\r\n             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c/src/libcore/ops/function.rs:231\r\n  21: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c/src/liballoc/boxed.rs:704\r\n  22: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:85\r\n  23: test::run_test::run_test_inner::{{closure}}\r\n             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c/src/libstd/panicking.rs:272\r\n             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c/src/libstd/panic.rs:394\r\n             at src/libtest/lib.rs:1468\r\n```" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://schema.org/endDate> "2019-07-20T17:38:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://schema.org/identifier> "11"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://schema.org/name> "Non-deterministic test failure" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://schema.org/startDate> "2019-07-18T21:06:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/11"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/11> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518845945> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://schema.org/description> "...and the XML parser uses it, which prevents us from upgrading the dependency to `url` beyond 1.7.2. @althanos, could you please have look at it and see if we can get rid of this? Thanks in advance..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://schema.org/endDate> "2019-08-07T06:18:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://schema.org/identifier> "12"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://schema.org/name> "`percent_encoding` becomes private in `url`>=2.0.0" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://schema.org/startDate> "2019-08-06T18:04:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/12"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/12> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518952283> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/519071259> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://schema.org/description> "This PR fixes #12 by adding `percent-encoding` as a direct dependency, and updates the `url` crate to version `2.1.0`. I also added a field to `Cargo.toml` so that the documentation is built with all features enabled on `docs.rs`, so that the XML parser doc is built as well.\r\n\r\nBy the way, @phillord and I would be glad to have the XML parser released in a new version (`0.3.0` I suppose) whenever you can push that." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://schema.org/endDate> "2019-08-07T06:18:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://schema.org/identifier> "13"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://schema.org/name> "Fix XML parser and bump URL dependency " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://schema.org/startDate> "2019-08-06T21:30:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/13"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/13> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561107031> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561173102> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691118234> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691131628> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791886335> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791904196> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791915963> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791950397> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://schema.org/creator> <https://api.github.com/users/JordanShurmer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://schema.org/description> "This create looks really promising for my Linked Data project. However, I'm really unsure about how to get started using it.\r\n\r\nIt would be really useful to have some examples of doing the most common things in the rust docs. For example: How to create a graph, add some triples, and write it as turtle to a file; How to read a turtle file in, parse it as a graph, then modify it's contents.\r\n\r\nI'd be happy to contribute the documentation, if I can get some pointers on how to do it :)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://schema.org/identifier> "14"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://schema.org/name> "Provide some \"Getting Started\" documentation" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://schema.org/startDate> "2019-12-02T14:47:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/14"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/14> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561095007> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561105438> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561109156> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://schema.org/description> "Added a 'Getting Started' example to the crate's docs as requested by #14." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://schema.org/endDate> "2019-12-03T10:33:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://schema.org/identifier> "15"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://schema.org/name> "Add a getting started example" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://schema.org/startDate> "2019-12-02T21:26:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/15"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/15> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561213470> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349856> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561350098> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216106> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670971828> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670972435> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680838385> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/enhancement> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://schema.org/creator> <https://api.github.com/users/JordanShurmer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://schema.org/description> "This is a feature request.  I'll gladly contribute the work when I get the time, but I figured I should go ahead and open the issue in case others want to contribute it. Or maybe there are existing solutions.\r\n\r\n## Background\r\n\r\nThis crate seems to be the most mature and most recently maintained RDF related crates. So, I'm hoping to use this in an LDP server I'm creating. However, [JSON-LD](https://www.w3.org/TR/json-ld/) is a required format in LDP servers. \r\n\r\n## The Request\r\n\r\n* Add JSON-LD as a supported format for parsing and serializing graphs" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://schema.org/identifier> "16"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://schema.org/name> "Add JSON-LD Support" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://schema.org/startDate> "2019-12-03T13:48:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/16"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/16> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561215927> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349385> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572799900> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573589690> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573599990> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574181064> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574213496> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574358853> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574535663> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574756259> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://schema.org/creator> <https://api.github.com/users/JordanShurmer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://schema.org/description> "This is a feature request. I'll gladly contribute the work when I get the time, but I figured I should go ahead and open the issue in case others want to contribute it. Or maybe there are existing solutions.\r\n\r\n## Background\r\nThis crate seems to be the most mature and most recently maintained RDF related crates. So, I'm hoping to use this in an LDP server I'm creating. However, [turtle] is a required format in LDP servers.\r\n\r\n##  The Request\r\n- Add [turtle] as a supported format for parsing and serializing graphs\r\n\r\n[turtle]: https://www.w3.org/TR/turtle/" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://schema.org/identifier> "17"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://schema.org/name> "Add Turtle Support" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://schema.org/startDate> "2019-12-03T14:21:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/17> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563916022> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932743> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://schema.org/description> "`sophia` is the most mature and active developed crate for RDF and linked data at the moment.\r\nHowever, there is still a long way to go.\r\nSaddly, it seems you don't have much time to work on it.\r\n\r\nI realy want this crate to succeed and would like to contribute to it.\r\nBut I don't want to mess up your plans.\r\nTherefore, I suggest that you add add some 'help wanted' or 'todo' issues or maybe some milestones to define the long-term goals (like adding SPARQL support?).\r\nThis will make it easier for me and others to contribute to this crate." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://schema.org/endDate> "2019-12-10T08:56:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://schema.org/identifier> "18"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://schema.org/name> "Add 'help wanted' issues" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://schema.org/startDate> "2019-12-10T08:00:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/18"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/18> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563963795> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563968613> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563972666> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563977806> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599254389> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599397796> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600023497> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602095344> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602250770> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602251830> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675604292> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675624146> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675923924> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675993118> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678332754> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623998> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/help%20wanted> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://schema.org/description> "- [ ] add a (set of) type(s) for representing a [SPARQL abstract query](https://www.w3.org/TR/sparql11-query/#sparqlDefinition) \r\n- [ ] add a parser for building a SPARQL abstract query (see above) from a string in the SPARQL syntax\r\n- [ ] incrementally implement the SPARQL algebra (this item should probably be split into sub-items)\r\n\r\nNB: since sophia uses a *generalized* RDF model (including variables), a [Graph](https://docs.rs/sophia/0.3.0/sophia/graph/trait.Graph.html) can also be used as a [basic graph pattern](https://www.w3.org/TR/sparql11-query/#BasicGraphPatterns). The [query](https://github.com/pchampin/sophia_rs/blob/master/sophia/src/query.rs) module contains a preliminary implementation of this idea." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://schema.org/identifier> "19"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://schema.org/name> "Add SPARQL support" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://schema.org/startDate> "2019-12-10T08:23:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/19> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932468> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591011874> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619214118> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/bug> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://schema.org/description> "Problem\r\n----\r\n\r\nCurrently, when inserting bnode identifies in a graph, the bnode identifier is kept as is.\r\n\r\nFor example, loading this file into a graph:\r\n```\r\n_:b1 <tag:p> \"foo\".\r\n```\r\nthen, loading this file into the same graph:\r\n```\r\n_:b1 <tag:q> \"bar\".\r\n```\r\nwill result in the following graph (in Turtle):\r\n```\r\n  [] <tag:p> \"foo\"; <tag:q> \"bar\".\r\n```\r\nwhile it should be\r\n```\r\n  [] <tag:p> \"foo\".\r\n  [] <tag:q> \"bar\".\r\n```\r\n*i.e.* two different subjects, because the bnode identifiers in the two different files have two different scopes.\r\n\r\nNB: it is important for the developer to be able to handle bnodes consistently, so at the lowest level (e.g. `Graph::insert`), the API should consider bnode identifiers as stable. But on the other hand, the default behaviour when loading a file should be the correct one.\r\n\r\nProposed solution\r\n----\r\n\r\nThe methods `TripleSource.in_graph` and `QuadSource.in_dataset` are the preferred way of loading a stream of triples/quads (such as the one coming from a parser) into a graph/dataset. \r\n\r\nThe proposed solution is to change the semantics of these methods, and make them rename the bnodes they receive to avoid name-clashes with existing bnodes in the graph/dataset. Whether this should be done by generating UUIDs or inspecting the target graph/dataset for existing name, I'm not sure yet...\r\n\r\nNew methods `in_graph_raw` and `in_dataset_raw` (better name?) should probably be added, which would have the current semantics of `in_graph` and `in_dataset`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://schema.org/endDate> "2020-04-24T20:01:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://schema.org/identifier> "1"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://schema.org/name> "BNode scope when loading triples/quads into graph/dataset" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://schema.org/startDate> "2019-03-20T13:05:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/1"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/1> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/20> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/20> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/help%20wanted> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/20> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/20> <http://schema.org/description> "A [serializer](https://docs.rs/sophia/0.3.0/sophia/serializer/index.html) implementation for the [HDT](format) would be nice." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/20> <http://schema.org/identifier> "20"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/20> <http://schema.org/name> "Add HDT serializer" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/20> <http://schema.org/startDate> "2019-12-10T08:25:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/20> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/20"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/20> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/21> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/21> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/help%20wanted> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/21> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/21> <http://schema.org/description> "An implementation of [`graph::Graph`](https://docs.rs/sophia/0.3.0/sophia/graph/trait.Graph.html) using an [HDT](http://www.rdfhdt.org/) file as its underlying data would be nice.\r\n\r\nNote that this would be a read-only graph, as HDT does not support updates." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/21> <http://schema.org/identifier> "21"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/21> <http://schema.org/name> "Add HDT backend" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/21> <http://schema.org/startDate> "2019-12-10T08:28:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/21> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/21"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/21> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563971430> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563981310> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565072755> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216671> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/help%20wanted> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://schema.org/description> "In addition to the [`dataset::inmem`](https://docs.rs/sophia/0.3.0/sophia/dataset/inmem/index.html) module, it would be nice to have a disk-based persistent implementation of [`dataset::MutableDataset`](https://docs.rs/sophia/0.3.0/sophia/dataset/trait.MutableDataset.html)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://schema.org/identifier> "22"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://schema.org/name> "Add persistent implementation of `dataset::MutableDataset`" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://schema.org/startDate> "2019-12-10T08:33:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/22"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/22> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563985808> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563986392> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563998845> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564022470> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564713416> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565088750> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565092486> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://schema.org/description> "The design of Sophia emphasizes genericity. The goal was, from the start, to allow multiple implementations of the provided traits to coexist, not even necessarily inside the `sophia` crate itself.\r\n\r\nThe goal of this issue is to foster discussion on what is required to achieve this. Are there any design choices in Sophia's traits or underlying types which you find too opinionated or constraining? Are they too complex to be widely adopted?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://schema.org/identifier> "23"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://schema.org/name> "Help make sophia a common RDF API for Rust" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://schema.org/startDate> "2019-12-10T10:48:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/23"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/23> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567153382> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567434129> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567438066> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567478698> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567491658> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567638239> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568001921> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568254441> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568472512> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://schema.org/description> "They are causing much complexity, especially the [requirement for using higher-ranked type bound](https://docs.rs/sophia/0.3.0/sophia/graph/trait.Graph.html#how-to-use-graph-in-a-trait-bound) in some situations.\r\n\r\nIt might be better to give up some genericity in order to make the API easier to use." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://schema.org/endDate> "2019-12-30T09:45:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://schema.org/identifier> "24"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://schema.org/name> "Get rid of the lifetime parameters on Triple, Graph and Dataset" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://schema.org/startDate> "2019-12-10T11:51:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/24> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565080428> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572645491> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572647537> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572787809> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572937354> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573014369> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573585453> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573600323> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://schema.org/description> "This issue contributes to #23 \r\n\r\nFor me the parser API of `sophia` is a bit confusing with its macros and `Config`.\r\n\r\nI suggest the introduction of a `Parser`-trait:\r\n```Rust\r\npub trait Parser {\r\n    fn parse_str<'src>(&'src mut self, input: &'src str) -> \r\n        Result<Box<dyn Iterator<Item=Result<[Term<Cow<'src, str>>; 3]>> + 'src>>;\r\n    fn parse_read<'src, R: 'src + Read>(&'src mut self, input: &mut R) -> \r\n        Result<Box<dyn Iterator<Item=Result<[Term<Cow<'src, str>>; 3]>> + 'src>>;\r\n}\r\n``` \r\n_For `Quad`s a similar trait respectively_\r\n\r\n* Allows `Parser`s to store state so they can lazily parse.\r\n* General enough for all serialization formats in question.\r\n* Easy for beginners to understand.\r\n* Result implements `TripleSource`\r\n\r\nAn implementation for the N-Triples parser, e.g.:\r\n```Rust\r\nmod nt {\r\n  #derive[default]\r\n  struct Parser {\r\n    strict: bool;\r\n  }\r\n\r\n  impl Parser {\r\n    fn new_strict() -> Self { Self { strict: true, } }\r\n  }\r\n \r\n  impl Parser for Parser {\r\n    ...\r\n  }\r\n}\r\n```" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://schema.org/endDate> "2020-01-13T09:59:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://schema.org/identifier> "25"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://schema.org/name> "Provide a simpler parser API" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://schema.org/startDate> "2019-12-10T14:41:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/25"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/25> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/26> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/26> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/26> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/26> <http://schema.org/description> "At the very least\r\n\r\n* [x] `sophia_api` containing the basic types and generic traits\r\n* [x] `sophia` depending on the former, and containing everything else\r\n* [x] change the licence of `sophia_api` to a more permissive one (Apache or BSD?)\r\n* [ ] Later, I might split the remaining `sophia` crate into more fine-grained crates...\r\n\r\nNB: this issue was created following the discussion at https://github.com/pchampin/sophia_rs/issues/23#issuecomment-565088750" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/26> <http://schema.org/identifier> "26"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/26> <http://schema.org/name> "Make (at least) 2 separate crates" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/26> <http://schema.org/startDate> "2019-12-12T17:01:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/26> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/26"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/26> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820582> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849254> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://schema.org/description> "This PR changes the error-handling of sophia and some semantics of `XSource` and `XSink` traits.\r\nI know, I shouldn't do two different things in one PR but I couldn't resist ... \r\n\r\n# Change in error-handling\r\n\r\nThis PR canges the error-handling in `sophia` from `error-chain` and `coercible-errors` to `thiserror` and `anyhow`.\r\n\r\n## Specific errors\r\n\r\nAs mentioned in #8 is the `error-chain`-crate somewhat outdated. I choose the relatively new `thiserror` as it is very simple and easy to use. \r\nIn addition the big `sophia::error::Error` is split into module-errors as suggested by [`snafu`](https://docs.rs/snafu/0.6.0/snafu/guide/philosophy/index.html#many-error-types). This will make it easier to split up `sophia` (#26) and reduces dependencies between the modules. Furthermore, it is someaht more aligned with the philosophie of \"each implementation can provide its own error\".\r\n\r\n## Coliding error-types\r\n\r\nThis was handled by `coercible-errors` before and is changed to `anyhow`. It provides [`anyhow::Error`](https://docs.rs/anyhow/1.0.25/anyhow/struct.Error.html) which is \"a better `Box<dyn Error>`\". It can be created from anytype that implements `std::error::Error`, therefore, is suitable when different error-types colide.\r\n\r\nAs stated in `anyhow`'s [docs](https://docs.rs/anyhow/1.0.25/anyhow/index.html#details) can `anyhow::Error` be downcasted to a concrete error-type, so users can still match against concrete types, e.g. done in the parser test.\r\n\r\nI don't want to offend `coercible-errors`. I just think the handling of many different errors will become more and more complicated as the `sophia`-ecosystem grows as implementers probably provide their own error-types. The complexity has been presented at `graph::Graph::retain()` which had a bizzar and complicated trait bound and now just returns `anyhow::Error`.\r\n\r\nThe merge-everything `anyhow::Error` is only used when two or more errors are used within one function. Everything else returns a specific error-type. This highlights better where the user has to be aware of error-mixing.\r\n\r\n# Semantics of `Iterator`s\r\n\r\n_When \"Triples\" are mentioned in the following section they can always be substituted with \"Quads\"_\r\n\r\nThe semantics of `TripleSource` and `TripleSink` always felt a bit cumbersome to me. As a result, I changed the semantics of them a bit.\r\n\r\n## Consume sources\r\n\r\nOften `Iterator`s where past in by `&mut` but `Iterator`s are designed to be consumed by iteration, therefore, it is more idomatic to move them into a function. Accordingly, I added `TripleSink::feed_all()` method that takes a `TripleSource`.\r\n\r\nThe semantic of a `TripleSink` is also not totaly clear to me. On the one hand there is the 'serializer'-sink that consumes and finishes just like `TripleSource`'s API suggests. On the other hand there are 'graph'-sinks that consume triples as-well but finishing them seems a bit unnatural. As a consequence, I removed the `Graph::inserter` and `Graph::remover` methods which are equally substituted by `Graph::insert_all` and `Graph::remove_all`.\r\n\r\n## Create from TripleSource\r\n\r\nThe builder-pattern for graphs seemed a bit unidomatic for me. Consequently, I removed `in_sink` and `in_graph` methods and created the new `CollectToGraph`-trait which extends the standard `Iterator`. I think this is more accesible for Rust programmers as its more close to the standard API (cf. getting started example in `lib.rs`). I tried to implement something like `impl FromIterator for Result<Graph>` so user could just call `collect()?` on a `TripleSource` but this is vorbidden by Rust's orphan rule...\r\n\r\n# Conclusion\r\n\r\nI'm totally aware that these are huge changes and that you might think that some of them are to much. Most of the changes I did are for sake of better ergonomics and a more idomatic Rust. I am open to disucussion and l will gladly change the PR if required.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://schema.org/endDate> "2019-12-15T15:41:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://schema.org/identifier> "27"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://schema.org/name> "changed in error handling and iterator semantics" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://schema.org/startDate> "2019-12-13T13:59:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/27"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/27> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948270> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948527> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565951586> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://schema.org/description> "This issue was raised in the discussion about #8 . The argument was that\r\n* `coercible-error` is unidiomatic, and\r\n* it advocates a unique error type, which is not approrpiate with the plan to split Sophia into semi-independant crates (#26).\r\n\r\nI'll copy the relevant parts of the discussion below, for the sake of clarity." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://schema.org/endDate> "2019-12-20T18:13:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://schema.org/identifier> "28"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://schema.org/name> "Move from `coercible-error` to a dedicated `StreamError`" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://schema.org/startDate> "2019-12-16T07:59:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/28"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/28> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566467745> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566476762> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567812551> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567816184> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567844840> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://schema.org/description> "This PR replaces the `coercible-errors`-crate by `StreamError`, defined like following:\r\n```Rust\r\n#[derive(Debug)]\r\npub enum StreamError<SourceErr, SinkErr>\r\nwhere\r\n    SourceErr: 'static + Error,\r\n    SinkErr: 'static + Error,\r\n{\r\n    Source(SourceErr),\r\n    Sink(SinkErr),\r\n}\r\n```\r\nIt allows function to return two different types of error, usually either an error from the `Source` providing new data or from the `Sink` that consumes it.\r\n\r\n### to do\r\n\r\nAs showed are the trait bounds for `SourceErr` and `SinkErr` only `'static + Error`. This should be expanded by `+ Send + Sync` in the future, in order to be able to implement concurrent graphs. The bound extension is delayed until `sophia::error::Error` is completly removed.\r\n\r\n_This PR is the result of #8 and was implemented according to #28_" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://schema.org/endDate> "2019-12-20T18:13:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://schema.org/identifier> "29"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://schema.org/name> "Replace coercible errors" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://schema.org/startDate> "2019-12-16T14:48:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/29"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/29> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474923037> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://schema.org/creator> <https://api.github.com/users/MarcAntoine-Arnaud> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://schema.org/description> "" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://schema.org/endDate> "2019-03-20T16:39:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://schema.org/identifier> "2"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://schema.org/name> "remove main.rs and Cargo.lock as sophia is a library" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://schema.org/startDate> "2019-03-20T13:21:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/2"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/2> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572144196> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572462054> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572469432> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572505132> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://schema.org/description> "This PR starts the process of gradually removing `error-chain` from `sophia` as suggested in #8.\r\n\r\nIt starts by moving errors related to the creation of terms to an own `sophia::term::TermError`.\r\n\r\nTemporary, a `impl From<TermError> for Error` was done in order to not have to refactor `ParserError` as well.\r\n\r\n---\r\n\r\nBTW @pchampin great work removing the lifetimes 👍 " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://schema.org/endDate> "2020-01-09T10:47:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://schema.org/identifier> "30"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://schema.org/name> "Introduce TermError" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://schema.org/startDate> "2020-01-08T14:46:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/30"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/30> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572639722> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572640721> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572644696> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572659325> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://schema.org/description> "Continuation of #8 .\r\n\r\nRemoves unnecessary error variants from `sophia::error::Error` and adds a new error for the `Graph` to `Dataset` wrapper.\r\n\r\n### Future work\r\n\r\nAt investigating `GraphAsDataset<G, H>` I recognized that the second parameter `H` is used nowhere actually. I could remove this within this PR if you like or did I missed something?\r\n\r\n@pchampin It seems to me that the mods parser and serializer are currently adapted to the `rio` crates. Is this work finished and I can continue refactoring the error handling or should I wait?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://schema.org/endDate> "2020-01-09T17:08:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://schema.org/identifier> "31"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://schema.org/name> "Refactor error handling in mods graph and dataset" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://schema.org/startDate> "2020-01-09T15:30:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/31"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/31> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/576148916> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577152280> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://schema.org/description> "Continue the work for #8 .\r\n\r\nRefactors the error-handling in `parser::xml`.\r\n\r\n- Everything related to `error-chain` is removed\r\n- A new `thiserror`-based error type is introduced\r\n- `WithLocation` is supported\r\n- The big `xml.rs` is split into smaller modules\r\n\r\n_Note:_ The version of `quick_xml` was updated. In the newer version they removed the dependency on `failure` and implemented `std::error::Error` for their error type." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://schema.org/endDate> "2020-01-22T12:11:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://schema.org/identifier> "32"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://schema.org/name> "Refactor RDF/XML parser error" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://schema.org/startDate> "2020-01-13T15:52:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/32"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/32> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574861363> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574863300> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574867291> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/575152963> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://schema.org/creator> <https://api.github.com/users/dwhitney> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://schema.org/description> "Hi, I'd love to use the `sophia::ns::namespace!` macro for my own projects, but I had to make a couple of changes to the code to make it work. I suspect making the fields on `IriData` public is not something you desire, but perhaps we can have a discussion about how to make this work? (btw, I am a neophyte Rust programmer)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://schema.org/endDate> "2020-01-15T21:36:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://schema.org/identifier> "33"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://schema.org/name> "making the namespace! macro public" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://schema.org/startDate> "2020-01-15T19:13:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/33"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/33> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581925988> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582350594> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103777> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590724976> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590786474> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://schema.org/description> "For now `sophia` only provides serializers for `N-Triples` and `N-Quads`. In order to support further serializers, we must develop an API for them, i.e. traits and some utilities. This contributes to #23.\r\n\r\n_When ever triples and graphs are mentioned those can be replaced by quad and dataset respectively. If not mentioned otherwise._\r\n\r\n## Steps towards an improved serializer API\r\n\r\n- [X] Make the internals of `Term::Literal` an own type like `IriData` or `BNodeId`. This way it is easier to implement specific serializations for literals.\r\n- [x] Remove the `n3()`-method from `Term`. It can be replaced by introducing a trait, e.g.:\r\n\r\n  ```rust\r\n  trait NtSerializableTerm {\r\n      fn nt(&self) -> String;\r\n  }\r\n\r\n  impl NtSerializableTerm for Term {\r\n      fn nt(&self) -> String {\r\n          crate::serializer::nt::stringify_term(self)\r\n      }\r\n  }\r\n  ```\r\n\r\n  Or at least rename the method properly.\r\n- [x] Provide a trait `Serializer` or several specific one, e.g. `TripleSerializer` and `GraphSerializer`. The first for streams the second for more sophisticated actions (see #17). Some symmetry to the `Parser` trait would be nice.\r\n- [x] Introduce the changes to the NT-serializer.\r\n\r\nAll points are open to discussion." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://schema.org/endDate> "2020-03-19T14:38:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://schema.org/identifier> "34"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://schema.org/name> "Make sophia ready to support external serializers" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://schema.org/startDate> "2020-01-16T10:55:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/34"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/34> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577324486> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577587495> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577721198> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578024518> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://schema.org/description> "This PR contributes to #34 .\r\n\r\nWith this PR the contents of `Term::Literal` are extracted into a new type `LiteralData`. This should allow third-party authors to easier add specific behavior for RDF-literals, e.g. serialization.\r\n\r\nFurthermore, the calls to `n3()` has been reduced in the modified code (see #34).\r\n\r\nIn addition, the function `Term::new_literal()` is added. A shortcut for creating simple literals, i.e. literals with datatype `xsd:string`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://schema.org/endDate> "2020-01-24T07:38:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://schema.org/identifier> "35"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://schema.org/name> "Literal as type" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://schema.org/startDate> "2020-01-22T13:17:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/35"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/35> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/36> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/36> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/36> <http://schema.org/description> "Finally, the last remains of `error-chain` are removed from `sophia`.\r\n\r\nThe last uses of `sophia::error::Error` where in `sophia::serializer`. There it only coverd `io::Error`s, so this was set as the new error type.\r\n\r\nThere shouldn't be any conflicts with #35." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/36> <http://schema.org/endDate> "2020-01-22T17:55:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/36> <http://schema.org/identifier> "36"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/36> <http://schema.org/name> "Remove error chain" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/36> <http://schema.org/startDate> "2020-01-22T13:57:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/36> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/36"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/36> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577698216> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578423778> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578430436> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578502421> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578624653> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578636269> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/579715374> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580125497> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580190535> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103823> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://schema.org/description> "with TripleSerializer and QuadSerializer traits,\r\nand TripleStringifier and QuadStringifier specializations.\r\nThis is meant to replace the \"duck-typing\" style Config objects.\r\n\r\nIn the process, removed some duplicate code btw nt and nq serializers." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://schema.org/endDate> "2020-02-23T19:00:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://schema.org/identifier> "37"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://schema.org/name> "New serializer API" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://schema.org/startDate> "2020-01-23T13:40:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/37> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580271552> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580854285> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581039551> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581994599> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582278349> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582343969> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582392178> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582521856> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585050945> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585143427> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590413013> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://schema.org/description> "In #37 @MattesWhite points out that sinks are not very idiomatic.\r\n\r\nI introduced them to be able to consume sources, and I introduced sources because iterators had limitation (see the [`stream` module documentation](https://github.com/pchampin/sophia_rs/blob/master/sophia/src/triple/stream.rs)).\r\n\r\nBut we could reuse the notion of streaming mode, introduced in the Graph and Dataset traits, to make sources consumable in a more idiomatic way, e.g. with a `for_each_triple` method (resp. `for_each_quad`)...\r\n\r\nLet's investigate that...\r\n\r\n```" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://schema.org/endDate> "2020-02-24T16:19:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://schema.org/identifier> "38"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://schema.org/name> "Do we still need `TripleSink` and `QuadSink`?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://schema.org/startDate> "2020-01-30T10:35:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/38> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/586209846> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://schema.org/description> "When the `namespace!` macro is used like this (2018 edition):\r\n\r\n```rust\r\nuse sophia::namespace;\r\n\r\nnamespace!(...);\r\n```\r\n\r\ninstead of using\r\n\r\n```rust\r\n#[use_macro]\r\nextern crate sophia;\r\n\r\nnamespace!(...);\r\n```\r\n\r\nThe macro throws an error because the `ns_term!` is not exported.\r\n\r\nThis PR fixes this issue by adding the absolute path to macro-calls inside the macros." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://schema.org/endDate> "2020-02-14T10:54:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://schema.org/identifier> "39"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://schema.org/name> "Correct paths in namespace macro" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://schema.org/startDate> "2020-02-14T09:57:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/39"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/39> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474871772> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474874075> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474879415> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474942369> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://schema.org/creator> <https://api.github.com/users/MarcAntoine-Arnaud> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://schema.org/description> "```rust \r\nfailures:\r\n\r\n---- parser::nt::test::w3c_test_suite stdout ----\r\nthread 'parser::nt::test::w3c_test_suite' panicked at 'rdf-tests/ntriples not found, can not check W3C test-suite', sophia/src/parser/nt.rs:597:17\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\n\r\n---- parser::nt::test::w3c_test_suite_generalized stdout ----\r\nthread 'parser::nt::test::w3c_test_suite_generalized' panicked at 'rdf-tests/ntriples not found, can not check W3C test-suite', sophia/src/parser/nt.rs:632:17\r\n```\r\n\r\nWho to get w3c_test_suite ?\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://schema.org/endDate> "2019-03-20T14:59:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://schema.org/identifier> "3"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://schema.org/name> "W3C tests don't pass" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://schema.org/startDate> "2019-03-20T13:25:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/3"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/3> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/40> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/40> <http://schema.org/creator> <https://api.github.com/users/tbourg> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/40> <http://schema.org/description> "# The reasoner needs the `owl:` namespace.\r\nand change of  `rdf:Bad` into `rdf:Bag`\r\n---------------------------------------------------\r\nfile changed: \r\n- `ns.rs`\r\n-----------------------------------------------------\r\nT.Bourg - Intern of P.-A. Champin" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/40> <http://schema.org/endDate> "2020-02-24T12:49:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/40> <http://schema.org/identifier> "40"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/40> <http://schema.org/name> "New namespace" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/40> <http://schema.org/startDate> "2020-02-21T10:52:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/40> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/40"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/40> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590414481> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://schema.org/creator> <https://api.github.com/users/tbourg> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://schema.org/description> "# New `owl:` namespace\r\n-------------------------------------\r\nThe rasoner needs the `owl:` namespace" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://schema.org/endDate> "2020-02-25T10:07:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://schema.org/identifier> "41"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://schema.org/name> "New namespace \"owl:\"" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://schema.org/startDate> "2020-02-24T12:58:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/41"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/41> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/42> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/42> <http://schema.org/creator> <https://api.github.com/users/tbourg> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/42> <http://schema.org/description> "`rdf:Bag` instead of `rdf:Bad`" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/42> <http://schema.org/endDate> "2020-02-24T16:20:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/42> <http://schema.org/identifier> "42"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/42> <http://schema.org/name> "Typo in rdf ns" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/42> <http://schema.org/startDate> "2020-02-24T13:02:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/42> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590811346> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591281468> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://schema.org/description> "Response to #34 commit  9a97dae .\r\n\r\n- Remove `&mut` from source  in serialize 'statement' methods.\r\n  Unnesessary as sources are completely consumed (see doc: 'Serialize __all__ triples/quads').\r\n- Remove `NxStringifier` type alias.\r\n   Seems redundant to call `NtStringifier::new_stringifier()` when\r\n   `NtSerializer::new_stringifier()` does the same.\r\n- Rename `NtSerializer` to `NqSerializer` in nq.rs." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://schema.org/endDate> "2020-02-26T07:33:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://schema.org/identifier> "43"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://schema.org/name> "Minor changes to serializers" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://schema.org/startDate> "2020-02-25T07:16:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/43"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/43> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590798950> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598038987> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673633609> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/good%20first%20issue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/help%20wanted> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://schema.org/description> "`#![deny(missing_docs)]` is a macro that can be placed in any module. Using it results in compiler errors if a public element is not documented (`///`).\r\n\r\nWhile this might lead to a number of 'obvious' documentations it is still a good measure to ensure a thorough documentation of the whole crate. In addition, it forces the developer to think about the users point of few on an element.\r\n\r\nSolving this issue consists in adding `#![deny(missing_docs)]` incrementally to each and every module, until all are documented. Then, we can keep only one directive at the top-level (`lib.rs`)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://schema.org/identifier> "44"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://schema.org/name> "Ensure doc coverage using #![deny(missing_docs)]" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://schema.org/startDate> "2020-02-25T07:24:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/44"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/44> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590871214> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593444113> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593445129> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593829247> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593995872> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://schema.org/description> "Beyond the parsed triples/quads, parsers may collect additional useful information, for example prefix declarations or base IRI. What would be the best API to get this information?\r\n\r\nMy initial idea was to add methods to the triple/quad source returned by the `parse` methods, to access this information. For example:\r\n```rust\r\n    let parsed_triples = sophia::parser::turtle::parse_bufread(ttl_file)?;\r\n    my_graph.insert_all(&mut parsed_triples);\r\n    let prefix_map = triples.get_prefix_map();\r\n```\r\nThe drawback of this approach is that it forces us to keep the triple source, even when it is exhausted. Method such as `Graph::insert_all` can not consume it, they have to borrow it mutably (which is rather counter intuitive).\r\n\r\nAnother approach would be to use a kind of callback:\r\n```rust\r\n    let parsed_triples = sophia::parser::turtle::parse_bufread(ttl_file)?;\r\n    let mut prefix_map = HashMap::new();\r\n    parsed_triples.on_prefix(|prefix, iri| prefix_map.insert(prefix, iri));\r\n    my_graph.insert_all(parsed_triples);\r\n```\r\nThis approach might be slightly harder to implement, but offers more flexibility. And it makes it possible to consume sources while still getting the additional information.\r\n\r\n@Tpt @MattesWhite  any thought?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://schema.org/identifier> "45"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://schema.org/name> "How to get more information from parsers?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://schema.org/startDate> "2020-02-25T10:58:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/45"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/45> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/46> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/46> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/46> <http://schema.org/description> "Reduced version of #43 \r\n\r\n- Remove `NxStringifier` type alias.\r\n   Seems redundant to call `NtStringifier::new_stringifier()` when\r\n   `NtSerializer::new_stringifier()` does the same.\r\n- Rename `NtSerializer` to `NqSerializer` in nq.rs.\r\n- Add documentation to `new_stringifier*()` methods." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/46> <http://schema.org/endDate> "2020-02-26T08:31:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/46> <http://schema.org/identifier> "46"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/46> <http://schema.org/name> "Minor changes to serializers II" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/46> <http://schema.org/startDate> "2020-02-26T07:32:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/46> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/46"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/46> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591367914> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591614288> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://schema.org/description> "Contribution according to the discussions in #34 and #35.\r\n\r\nAs a first step this moves variables out of `Term` and into an own type `Variable`.\r\n\r\nFollowing features are implemented:\r\n\r\n- (unsafe) constructor\r\n- copy with factory\r\n- write to fmt/io\r\n- convert between `Term` and `Variable` back and forth\r\n- Integration of `Variable` in the methods of `Term`\r\n- own public submodule `sophia::term::variable`\r\n\r\n---\r\n\r\nStep by step each kind of RDF term will get its own public submodule. I started with variables due to their small codebase. \r\nI think it is better to continue this process in small PRs rather then working weeks on an own branch and resolving ocuring conflicts in the end." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://schema.org/endDate> "2020-02-26T20:03:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://schema.org/identifier> "47"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://schema.org/name> "[merged] Variable as own type" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://schema.org/startDate> "2020-02-26T09:42:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/47"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/47> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/48> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/48> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/48> <http://schema.org/description> "Continuation of turning kinds of term into own, public types (see #34 )\r\n\r\n- turned mod `_bnode_id` into pub mod `blank_node`\r\n- Refactored `BNodeId` to new-type struct `BlankNode`\r\n- Aligned `BlankNode` interface with newly created `Variable`\r\n- `BlankNode::new()` and `Term::new_bnode()` now fail correctly if not N3 _[1]_\r\n  - Adapted tests accordingly\r\n- Integrated `BlankNode` into `Term`\r\n- Minor corrections in mod `variable`\r\n\r\n_[1]_ This is a significant change but this is more aligned to the way variables are handled.\r\n\r\n---\r\n\r\nI think the next parts IRI and literal will take longer as they are way more complex as variables and blank nodes (in terms of implementation). Probably, I will create a WIP-PR so you can watch the progress and we can discuss certain changes." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/48> <http://schema.org/endDate> "2020-02-27T13:09:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/48> <http://schema.org/identifier> "48"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/48> <http://schema.org/name> "Make BlankNode a public, own type" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/48> <http://schema.org/startDate> "2020-02-27T08:30:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/48> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/48"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/48> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593436346> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593446228> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593897758> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595080435> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595082211> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595126001> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595647207> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595701358> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595743441> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595751202> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596221570> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596543949> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596673820> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590313> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://schema.org/description> "This PR refactors `IriData` into the first-class kind of RDF term `Iri`.\r\n\r\nAs this affects many areas of `sophia` this PR is marked as work-in-progress and is not ready to be merged, yet.\r\n\r\nThe changes will not only include 1-to-1 translations of existing code but also re-organization of modules, adding and removing of features and alignment with the previous work of refactoring blank nodes (#48) and variables (#47). As I'm not the owner of this crate and due to the reach of this PR, I highly appreciate reviews and discussions.\r\n\r\n**ToDo list**\r\n\r\nThis list is of course open to discussion. I'll try to work through the list from top to bottom.\r\n\r\n- [x] refactor `_iri_data` into a public module, including renaming `IriData` to `Iri`.\r\n- [x] Integrate the `join` mechanism more deeply into `Iri`, as far as possible.\r\n  - [x] write an adapter for iterators, e.g. `graph.triples().resolve_with(&term)...`.\r\n- [x] Integrate new `Iri` into `Term`, including convenient functions.\r\n- [x] ~Replace usage of `Term` where actually only an `Iri` is valid.~ Was not necessary.\r\n- [x] ~Replace `Option<&Term>` with~ Seems not to give any advantages.\r\n  ```rust\r\n  enum GraphId<'a, TD> {\r\n      Named(&'a Iri<TD>),\r\n      Default,\r\n  }\r\n  ```" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://schema.org/endDate> "2020-03-13T08:02:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://schema.org/identifier> "49"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://schema.org/name> "IRI as own public type" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://schema.org/startDate> "2020-03-01T16:14:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/49> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475504079> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475515007> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://schema.org/creator> <https://api.github.com/users/MarcAntoine-Arnaud> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://schema.org/description> "Badges has to be updated with your repository (maybe a good time to start a community ...)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://schema.org/endDate> "2019-03-22T07:04:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://schema.org/identifier> "4"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://schema.org/name> "Add travis" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://schema.org/startDate> "2019-03-21T10:37:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/4"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/4> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610779419> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610806512> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://schema.org/description> "Currently, there are two ways to resolve (possibly relative) terms agains a base IRI:\r\n* `base.join` for one-shot operations,\r\n* `base.batch_join` for multiple operations.\r\n\r\nThe rationale for this design is that joining requires the structure of the base IRI to be parsed, and we do not store that structure in IRI Terms (to save space -- not all IRIs in a graph are expected to be used as base IRIs). `batch_join` allows to perform the parsing only once, and resolve multiple terms in a row.\r\n\r\nA possibly better design would be to have a dedicated type, storing the parsed structure of an IRI, and providing methods to resove terms (and why not, whold triples, quads, or even graphs and datasets?). `Term::batch_join` would then be replaced by a `Term::to_base` method, returning such an object. This would allow for this kind of pattern:\r\n```\r\nlet base = some_iri_term.to_base();\r\nlet abs_triples = some_triple_source.map_triples(|t| base.join_triple(&t));\r\n```\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://schema.org/endDate> "2020-04-08T07:47:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://schema.org/identifier> "50"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://schema.org/name> "Change `Term::batch_join` into something more usable" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://schema.org/startDate> "2020-03-02T14:34:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/50"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/50> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596220705> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596240528> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/enhancement> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/good%20first%20issue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/help%20wanted> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://schema.org/description> "I need to match a number of triples against patterns. But the semantics of RDF make this painful as triples are not naturally ordered. It would make life easier if I could sort the triples first so that they would come out in a predictable order.\r\n\r\nThis is easiest enough to achieve with `IriData` by simply calling `to_string` and comparing these, but there is no real reason to make that `String` when we could compare the underlying data.\r\n\r\nThe same would apply for `Literal` and `Variable` also." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://schema.org/identifier> "51"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://schema.org/name> "Have IriData implement PartialOrd" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://schema.org/startDate> "2020-03-04T15:48:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/51"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/51> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/52> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/52> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590851> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/52> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/52> <http://schema.org/description> "This PR originates from the discussion in #49 starting with [this comment](https://github.com/pchampin/sophia_rs/pull/49#issuecomment-595701358).\r\n\r\n# Summary\r\n\r\n- It would be beneficial to have convenience adapters for general tasks on `*Sources`, e.g.:\r\n  - rename bnodes into fresh ones\r\n  - replace bnodes with variables / variables with bnodes\r\n  - change absolute IRIs to relative ones (given a base IRI) (opposite of resolve)\r\n  - replace variables by their bound values (given a mapping)\r\n  - resolve IRIs given a base IRI\r\n- The current crate structure required to duplicate much of the code for adapters (and `streaming_mode`).\r\n\r\n# Problems\r\n\r\n1. **Implementing traits with associated traits does not consider trait bounds.** Meaning is there is an adapter `Normalizer<S>` one can only implement either `Iterator<Item = Triple> for Normalizer<S: TripleSource>` or `Iterator<Item = Quad> for Normalizer<S: QuadSource>`. Both together would result in `conflicting implementation`.\r\n1. **Splitted implementations violate privacy bounds.** Declaring a `struct` in `crate::triple::stream` and implementing `QuadSource` in `crate::quad::stream` requires the fields to be `pub(crate)` at least.\r\n\r\n# Solutions\r\n\r\n**For 1.:** Maybe some overall abstraction for statements?\r\n\r\n**For 2.:** Merge the `stream` submodules into a top-level module `stream` equal to `triple` and `quad`.\r\n\r\n\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/52> <http://schema.org/identifier> "52"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/52> <http://schema.org/name> "Adapters for Triple- and QuadSource" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/52> <http://schema.org/startDate> "2020-03-09T14:22:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/52> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/52"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/52> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600563139> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601188663> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601190395> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://schema.org/description> "Final contribution to making kinds of RDF terms own types.\r\n\r\nPrevious PRs: #49 , #48 , #47 \r\n\r\nCloses: #34\r\n\r\nInput from: #35 and previous PRs\r\n\r\n---\r\n\r\nThis PR refactors `sophia::term::Term`'s `Literal` variant into an own, public type and aligns its interface to the APIs of the previous PRs for other kinds of terms.\r\n\r\nDue to its scale and decisions to discuss this is marked work-in-progress.\r\n\r\n**ToDo:**\r\n\r\n- [x] Create type `Literal`.\r\n- [x] Refactor `_literal_kind.rs` into `literal.rs`.\r\n- [x] Integrate `Literal` into `Term`.\r\n- [x] Refactor conversion primitive types <-> literal.\r\n- [ ] Final alignment of `Variable`, `BlankNode`, `Iri` and `Literal` to provide a uniform API for terms.\r\n  - [x] Remove `unsafe` from all `*_unchecked()` methods and introduce `debug_assert!()`.\r\n  - [x] Similar implementations of `From`, `TryFrom`, `PartialEq` and other convenience traits.\r\n  - [ ] ...\r\n\r\nAs always, the todo-list is my personal roadmap and is open to discussion.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://schema.org/endDate> "2020-03-19T14:38:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://schema.org/identifier> "53"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://schema.org/name> "Introduce Literal as an own type" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://schema.org/startDate> "2020-03-17T07:18:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/53"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/53> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/54> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/54> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/54> <http://schema.org/description> "Contributes to #44." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/54> <http://schema.org/endDate> "2020-03-23T17:33:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/54> <http://schema.org/identifier> "54"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/54> <http://schema.org/name> "Fully document the term crate" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/54> <http://schema.org/startDate> "2020-03-20T08:49:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/54> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/54"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/54> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/603690027> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610267939> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610778959> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610799521> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/613296590> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614126235> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614453763> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614496052> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614541777> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614673773> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614683534> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615079919> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633215000> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633467170> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633614282> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659876543> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://schema.org/description> "Proposed first in #35 I suggest to introduce a trait `Term`.\r\n\r\n## Objective\r\n\r\n`sophia`'s aim is to become a central API for RDF in Rust (#23). As such it would be nice if third party terms could smoothly interoperate with `sophia`'s ecosystem, e.g. `rio`'s terms could be stored in `sophia`'s `HashGraph`, N3 terms from `metis` could use the `Serializer` interface or another crate could provide compatible, ASCII-based terms that are based on `&[u8]` (maybe even going towards `no_std`-RDF :blush:).\r\n\r\n## Required changes\r\n\r\nWith the latest effort to turn each kind of term (IRI, literal, blank node and variable) into an own type with an aligned API the step to create a trait is no longer that much work. A problem could be that this could turn advanced traits, such as `Graph`, in a mess of trait bounds. I'd like to commit a PoC-PR to see how it goes.\r\n\r\n## Suggestion\r\n\r\nHere a suggestion how a trait may look like:\r\n\r\n```rust\r\ntrait Term: Clone + Hash + Debug + Display \r\n    + PartialEq + PartialEq<Iri> + PartialEq<Literal> + PartialEq<BlankNode> + Eq\r\nwhere\r\n    Iri: TryFrom<Self>,\r\n    Literal: TryFrom<Self>,\r\n    BlankNode: TryFrom<Self>,\r\n{\r\n    type TermData: TermData;\r\n\r\n    fn value(&self) -> String;\r\n}\r\n```\r\n\r\nThe focus should be to keep the `Term` trait as small as possible while other behaviour is kept separate in other traits, e.g. `Resolve`.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://schema.org/endDate> "2020-07-17T05:59:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://schema.org/identifier> "55"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://schema.org/name> "Make 'Term' a trait" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://schema.org/startDate> "2020-03-24T07:35:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/55> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604456753> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604491371> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604581594> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604587671> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://schema.org/description> "As 'sophia_term' is not yet published, the dependency in `sophia/Cargo.toml` throughs an error if a crate depends on `sophia`'s git. Fixed by adding a relative path.\r\n\r\nIn addition, set version of 'sophia_term' to 0.1.0 as it is a new crate." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://schema.org/endDate> "2020-03-26T17:53:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://schema.org/identifier> "56"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://schema.org/name> "Fix 'sophia_term' dependency" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://schema.org/startDate> "2020-03-26T12:49:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/56"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/56> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606139516> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://schema.org/creator> <https://api.github.com/users/BruJu> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://schema.org/description> "Currently we can not use the test macro for sophia graphs in other crates that implements this trait.\r\n\r\nThis first PR purpose is to remove the reciter dependency in tests.\r\n\r\n- If the reciter dependency is kept, users have to include resiter in the Cargo.toml file which is not user friendly.\r\n- Tests now panics when a result is an error instead of discarding the error because an error means the whole dataset was not properly retrieved (the test fails earlier)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://schema.org/endDate> "2020-03-30T17:36:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://schema.org/identifier> "57"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://schema.org/name> "Remove resiter dependency in the tests of dataset / graphs" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://schema.org/startDate> "2020-03-30T08:02:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/57"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/57> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/58> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/58> <http://schema.org/creator> <https://api.github.com/users/BruJu> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/58> <http://schema.org/description> "The motivation of this commit is to let other implementors of sophia graph or sophia dataset use the already written tests.\r\n\r\nThis PR includes the commit of the  #57 " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/58> <http://schema.org/endDate> "2020-03-30T08:15:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/58> <http://schema.org/identifier> "58"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/58> <http://schema.org/name> "Export graph and dataset implementation when export_test feature is on" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/58> <http://schema.org/startDate> "2020-03-30T08:03:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/58> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/58"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/58> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/59> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/59> <http://schema.org/creator> <https://api.github.com/users/BruJu> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/59> <http://schema.org/description> "This PR enables to export the graph and dataset tests of Sophia.\r\n\r\nThis feature is accessible with the `export_test` feature to reduce the size of the dependency graph" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/59> <http://schema.org/endDate> "2020-03-30T17:36:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/59> <http://schema.org/identifier> "59"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/59> <http://schema.org/name> "[merged] Export graph tests" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/59> <http://schema.org/startDate> "2020-03-30T08:20:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/59> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/59"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/59> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484037114> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484595292> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/485911221> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486116119> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486146530> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486170073> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/491556470> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://schema.org/description> "Hi,\r\nI'm using this crate a lot for an IoT application and realy like it. However, I run into problems when iterating a Graph.\r\n\r\nThe core idea I want to accomplish is to build structs from the contents of a Graph. Therefore I defined following trait:\r\n````rust\r\npub trait FromGraph<'a, T, G>: Sized\r\nwhere\r\n    T: Borrow<str>,\r\n    G: Graph<'a>,\r\n    MyError: From<<G as Graph<'a>>::Error>,\r\n{\r\n    fn from_graph(s: &'a Term<T>, graph: &'a G) -> MyResult<Self>;\r\n}\r\n````\r\nThis works fine until I want to parse nested Structs, e.g. I have the following graph:\r\n````\r\n@prefix rdf: <http://www.w3.org/...#> .\r\n@base <http://example.org/> .\r\n\r\nEntityA a A ;\r\n  rdf:value 42 .\r\nEntityB a B ;\r\n  hasA EntityA ;\r\n  rdf:value 24 .\r\n````\r\nTo use those in my code I've written the following in-Rust-representation:\r\n````rust\r\nlazy_static! {\r\n    static ref HAS_A: Term<&'static str> = unsafe{ Term::new_iri_unchecked(\"http://example.org/hasA\", Some(true)) };\r\n}\r\n\r\n#[derive(Debug, Clone, Copy)]\r\nstruct A {\r\n    value: i32,\r\n}\r\n\r\nimpl<'a, T, G> FromGraph<'a, T, G> for A\r\nwhere\r\n    T: Borrow<str>,\r\n    G: Graph<'a>,\r\n    MyError: From<<G as Graph<'a>>::Error>,\r\n{\r\n    fn from_graph(s: &'a Term<T>, graph: &'a G) -> MyResult<Self> {\r\n        let t_value = graph.iter_for_sp(s, &rdf::value).last().ok_or(MyError)??;\r\n        let t_value = t_value.o();\r\n        let value = t_value.value().parse::<i32>()?;\r\n        Ok(A { value })\r\n    }\r\n}\r\n\r\n#[derive(Debug, Clone, Copy)]\r\nstruct B {\r\n    a: A,\r\n    value: i32,\r\n}\r\n\r\nimpl<'a, T, G> FromGraph<'a, T, G> for B\r\nwhere\r\n    T: Borrow<str>,\r\n    G: Graph<'a>,\r\n    MyError: From<<G as Graph<'a>>::Error>,\r\n{\r\n    fn from_graph(s: &'a Term<T>, graph: &'a G) -> MyResult<Self> {\r\n        let t_a = graph.iter_for_sp(s, &HAS_A).last().ok_or(MyError)??;\r\n        let t_a = t_a.o(); // here is where the error occures\r\n        let a = A::from_graph(t_a, graph)?;\r\n\r\n        let t_value = graph.iter_for_sp(s, &rdf::value).last().ok_or(MyError)??;\r\n        let t_value = t_value.o();\r\n        let value = t_value.value().parse::<i32>()?;\r\n        Ok(B { a, value })\r\n    }\r\n}\r\n````\r\nThe error I get is `t_a does not live long enough`\r\n````\r\n   |\r\n64 | impl<'a, T, G> FromGraph<'a, T, G> for B\r\n   |      -- lifetime `'a` defined here\r\n...\r\n72 |         let t_a = t_a.o(); // here is where the error occures\r\n   |                   ^^^----\r\n   |                   |\r\n   |                   borrowed value does not live long enough\r\n   |                   argument requires that `t_a` is borrowed for `'a`\r\n...\r\n79 |     }\r\n   |     - `t_a` dropped here while still borrowed\r\n````\r\nDo you have any idea how I could get this working? Maybe an API change could solve this?\r\n\r\nIn the end I want to accomplish something serde-flavored like:\r\n````rust\r\n#[derive(FromGraph)]\r\nstruct A {\r\n  #[predicate(rdf:value)]\r\n  value: i32,\r\n}\r\n\r\n#[derive(FromGraph)]\r\nstruct B {\r\n  #[predicate(HAS_A)]\r\n  a: A,\r\n  #[predicate(rdf:value)]\r\n  value: i32,\r\n}\r\n````" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://schema.org/endDate> "2019-04-24T10:40:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://schema.org/identifier> "5"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://schema.org/name> "How to use the Graph.iter_* interface?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://schema.org/startDate> "2019-04-16T08:37:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/5"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/5> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605917669> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605962707> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606020612> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606455420> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/609587820> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611482928> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611494160> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611580942> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://schema.org/description> "In some situations intermediate `String`s are allocated and then transformed into `TermData`, e.g. normalization and resolving of IRIs.\r\n\r\n# Issue\r\n\r\nI'm currently working on `metis` for an example for #55. I'd like to use `CowTerm` for my parser. This means that if an absolute IRI is parsed I have `Cow::Borrowed` and I would like it to remain `Cow::Borrowed` after resolving against the base IRI. On the other hand when a relative IRI is parsed the `Cow::Borrowed` should be turned into `Cow::Owned` after resolution. This means that I have to know if a `&str` comes from the original to track lifetimes or if I get a newly allocated `String`.\r\n\r\n# Discussion of Solutions\r\n\r\n1. Change signature of `Resolve<Iri>` (and of normalization) to:\r\n    ```rust\r\n    impl<'a, 'td, TD, TD2> Resolve<Iri<TD>, Iri<TD2>> for IriParsed<'a>\r\n    where\r\n        TD: 'td + TermData,\r\n        TD2: TermData + From<&'td str> + From<String>,\r\n    { ... }\r\n    ```\r\n    This, however, prevents passing in a `TermFactory`. So maybe it would be nice to have another `Resolve`.\r\n1. Add `resolve_with()`:\r\n    ```rust\r\n    trait ResolveWith<S, STD, T = S, TTD = STD> {\r\n        fn resolve_with<'td, B, O>(&self, other: &'td S, borrowed: B, owned: O) -> T \r\n        where\r\n            STD: 'td + TermData,\r\n            B: FnMut(&'td str) -> TTD,\r\n            O: FnMut(String) -> TTD;\r\n    ```\r\n    This adds complexity and is maybe to much for the single use case of `Cow` as this is not that important for other `TermData`. Besides a default implementation:\r\n    ```rust\r\n    /// pseudo Rust\r\n    impl<'td, S, STD, T, TTD> Resolve<S, T> for ResolveWith<S, STD, T, TTD>\r\n    where\r\n        STD: 'td,\r\n        TTD: From<&'td str> + From<String>,\r\n    {\r\n        fn resolve(&self, other: &S) -> T {\r\n            self.resolve_with(other, Into::into, Into::into)\r\n        }\r\n    }\r\n    ```\r\n    Should be possible.\r\n\r\nWhat do you think? Is this case important enough to add such complexity?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://schema.org/endDate> "2020-04-23T09:53:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://schema.org/identifier> "60"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://schema.org/name> "Handling intermediate Strings" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://schema.org/startDate> "2020-03-30T08:33:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/60"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/60> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605948540> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606445928> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606607168> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/607863675> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://schema.org/description> "Allows better control over ownership and transformation of 'TermData'.\r\n\r\nThe idea originated from this recent topic at URLO: https://users.rust-lang.org/t/is-it-possible-to-impl-from-wrapper-t-for-wrapper-u/40029/3\r\n\r\nWith `map()` is is possible to directly map owned `TermData`. At the moment transformation is usually done through reference via `Self<T>: From<&Self<U>>`. This rather implicit conversion can now be replaced by more explicit `self.as_ref().map(...)`. Furthermore, this can become handy for handling intermediate `String`s (#60). Another example is `term.as_ref_str()` instead of `RefTerm::from(&term)`.\r\n\r\n---\r\n\r\n**WIP**\r\n\r\nAt the moment this PR is more a PoC and methods are only implemented for `Iri`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://schema.org/endDate> "2020-04-02T15:07:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://schema.org/identifier> "61"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://schema.org/name> "[merged] Introduce `map()` and helpers to `Term` and similars" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://schema.org/startDate> "2020-03-30T08:56:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/61"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/61> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610228266> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610250578> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610269117> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610384544> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://schema.org/description> "`Namespace` had only one functionality and was practically another `Iri`-type.\r\n\r\nThis PR removes the `Namespace` and adds `Iri::with_suffix()` which has the same semantics. \r\n\r\nThe reason for this change is because conversion between `Namespace` and `Iri` was complicated and not necessary. In addition, improvements to `Iri` would have been required to be implemented for `Namespace` as well which no one has done. However, as `Namespace` only had a single function it was easier to move this function to `Iri`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://schema.org/endDate> "2020-04-07T13:24:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://schema.org/identifier> "62"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://schema.org/name> "Remove 'Namespace'" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://schema.org/startDate> "2020-04-06T14:35:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/62"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/62> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/63> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/63> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/63> <http://schema.org/description> "Result of the discussion in #62 \r\n\r\n- Add 'get_iri()'\r\n- Conversion between 'Iri' and 'Namespace'\r\n- Impl Resolve<Namespace>" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/63> <http://schema.org/endDate> "2020-04-07T14:09:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/63> <http://schema.org/identifier> "63"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/63> <http://schema.org/name> "Improve Namespace's API" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/63> <http://schema.org/startDate> "2020-04-07T13:03:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/63> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/63"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/63> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/685106560> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/enhancement> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://schema.org/description> "Following the discussion in #55, I realize that some people might be interested in reusing the implementation of `graph::inmem` or `dataset::inmem`, even for types that go \r\n*beyond* the RDF model (even the generalized on that Sophia supports). For example:\r\n\r\n* [Notation 3](https://www.w3.org/community/n3-dev/) (which @MattesWhite is working on)\r\n* [RDF-*](http://olafhartig.de/files/Hartig_AMW2017_RDFStar.pdf)\r\n* Other flavors of [property graphs](https://en.wikipedia.org/wiki/Graph_database#Labeled-property_graph)\r\n\r\nActually, these implementations are rather agnostic to the kind of *terms* they handle, as internally they are just represented by integer indexes. Possibly, this could be factored out in a separate crate (`sophia_igraph`?). And of course, if (some of) the terms they contain can be seen as RDF terms, they could in turn implement the `Graph`/`Dataset` traits...\r\n\r\n@BruJu what do you think?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://schema.org/identifier> "64"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://schema.org/name> "Make in-memory indexed graphs more generic" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://schema.org/startDate> "2020-04-08T07:44:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/64"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/64> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611988817> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/612011568> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://schema.org/description> "This commit remove somewhat redundant implementations;\r\nthe rationale is that what they did (resolving TD1 to TD2 directly)\r\ncan usually be achieved by resolving to MownStr, then map'ing to TD2.\r\nThis will usually be just as efficient (possibly more),\r\nbecause types that can recycle the memory allocated by MownStr will\r\nusually do so (e.g. Box or String).\r\n\r\n@MattesWhite what do you think about that. You designed and implemented the `Resolve` trait,\r\nso I would like your opinion on this before merging it." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://schema.org/endDate> "2020-04-15T16:59:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://schema.org/identifier> "65"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://schema.org/name> "simplify the Resolve trait implementation" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://schema.org/startDate> "2020-04-10T07:35:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/65"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/65> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614157903> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://schema.org/description> "The current implementation of `impl Resolve<Literal> for IriParsed` is not optimal as it allocates intermediate string(s).\r\n\r\nThis implementation uses the standard `Resolve<Iri>` for the literal's datatype and wraps the text as `MownStr::Ref`. The key for this implementation is to move it into the `literal` module where we can access the private fields of `Literal`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://schema.org/endDate> "2020-04-15T16:57:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://schema.org/identifier> "66"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://schema.org/name> "Optimize 'Resolve<Literal>'" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://schema.org/startDate> "2020-04-10T19:15:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/66"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/66> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615086574> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615121921> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://schema.org/description> "# Topic\r\n\r\nThis issue's purpose is to discuss if it is beneficial to keep the current implementation of IRI. This discussion arose from #55.\r\n\r\n## Explanation\r\n\r\n`sophia`'s implementation of IRIs contains two elements namespace `ns` and an optional `suffix`. This means that an IRI is either represented as a whole in the namespace field or as namespace and suffix like a CURIE. This is different to other RDF libraries like [`rio`](https://docs.rs/rio_api/0.4.2/rio_api/iri/struct.Iri.html) where IRIs are always represented by a single string. The question is:\r\n\r\n**_Is it beneficial to keep the current implementation of IRIs with separated namespace and suffix?_**\r\n\r\n## Discussion\r\n\r\n### Pro - less memory consumption in `Graph`s\r\n\r\nThe current implementation is beneficial when storing terms in, for example, a `Graph` with reference(-counted) `TermData` where _namespaces_ must only kept once in memory while the whole string solution would require to copy namepaces over and over again. This reduces the overall memory consumption of `sophia`.\r\n\r\n### Pro - cheap `Namespace::get()`\r\n\r\nWith the current implementation it is easy and cheap to create a `Namespace` and `get()` suffixed IRIs from it.\r\n\r\n### Con - consume more stack-memory\r\n\r\nOn the other hand keeping space for an optional `suffix` means that `sophia`'s IRIs take more stack-memory (nearly twice as much) as when the IRI would be represented in a single place. This makes it costly to create short lived references to terms like `RefTerm`.\r\n\r\n### Con - prefixes are part of syntax\r\n\r\nThe usage of prefixes/CURIEs while used in nearly all RDF serialization is part of this formats and not of actual RDF itself.\r\n\r\n### Con - resolving kills suffixes\r\n\r\nWhen a relative IRI is resolved it's suffix gets lost in the process anyway.\r\n\r\n## Contribution\r\n\r\nI invite you to join the discussion. Best tag your answers with either `### Pro - ...`, `### Con - ...` or `### Conclusion - ...` and answer to particular points with `### Regarding - Pro/Con - ...`, so it's easier to keep track of pros, cons and opinions." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://schema.org/identifier> "67"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://schema.org/name> "[Discussion] Keep IRI as ns+suffix?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://schema.org/startDate> "2020-04-16T12:04:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/67"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/67> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614679485> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619217756> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://schema.org/description> "During #55 the question arose how should read-only `Term` references be handled.\r\n\r\n_Note:_ This only affects situation where a `Term` is passed in to check and compare the contents of it. Not when the `Term` (reference) is passed in to be copy/clone in some way.\r\n\r\nCurrently, there are two approaches in `sophia`:\r\n\r\n1. Take a reference to a monomorphized `Term`, e.g. `Graph::triples_with_spo<'s, T, U, V>(&'s self,    s: &'s Term<T>, p: &'s Term<U>, o: &'s Term<V>) -> GTripleSource<'s, Self>`.\r\n  This version allows to directly pass references without the need to create an intermediate representation. However, this can increase compile times and code size significantly.\r\n1. Take a `RefTerm`.\r\n  This prevents monomorphization. However, it requires to build an intermediate, 76 Byte big `RefTerm`.\r\n\r\nAn alternative approach would be having a `TermTrait`, so we could pass `&dyn TermTrait` in such situations. This would prevent monomorphization and does not require an intermediate `RefTerm`. However, a definition of such a trait is still to be figured out." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://schema.org/endDate> "2020-04-27T06:32:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://schema.org/identifier> "68"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://schema.org/name> "How to handle read-only Terms" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://schema.org/startDate> "2020-04-16T12:19:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/68"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/68> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615084599> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615091073> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627427390> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://schema.org/description> "@MattesWhite We can use this PR to discuss about specific implementation details." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://schema.org/endDate> "2020-05-12T15:45:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://schema.org/identifier> "69"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://schema.org/name> "[WIP] Experimenting with a Term trait (as suggested in #55)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://schema.org/startDate> "2020-04-17T07:02:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/69"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/69> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/6> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/6> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/6> <http://schema.org/description> "In #5 @MattesWhite suggested to introduce the super-trait TermData for convienence:\r\n```rust\r\n/// Supertrait for all properties data of a `Term<T>` must provide.\r\npub trait TermData: AsRef<str> + Clone + Eq + Hash {}\r\nimpl<T> TermData for T where T: AsRef<str> + Clone + Eq + Hash {}\r\n```\r\nThat would indeed simplify a lot of code." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/6> <http://schema.org/endDate> "2019-04-26T12:05:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/6> <http://schema.org/identifier> "6"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/6> <http://schema.org/name> "Introduce trait `TermData`" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/6> <http://schema.org/startDate> "2019-04-19T07:51:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/6> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/6"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/6> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618930144> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618931156> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627775408> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://schema.org/description> "This PR implements my proposal from [my comment](https://github.com/pchampin/sophia_rs/pull/69#commitcomment-38553899) in #69.\r\n\r\nThis version adds no further types expect for the traits. The traits are implemented for the respective, existing types and an example function is given with `Graph::poc_triples_with_spo()`.\r\n\r\n---\r\n\r\nThe contents are a _Proof of Concept_ and neither completely thought through nor completely implemented. Rather it is a base for further discussion in #69." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://schema.org/endDate> "2020-05-13T06:29:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://schema.org/identifier> "70"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://schema.org/name> "[PoC] My term trait " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://schema.org/startDate> "2020-04-21T12:36:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/70"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/70> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/617808563> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://schema.org/description> "In fact, this PR changes nothing for users but removes some boilerplate code. Therefore, it is okay to close this PR. It is rather a minor recommendation for the future.\r\n\r\nThe change uses the trick from [`rustdoc`'s documentation](https://doc.rust-lang.org/rustdoc/documentation-tests.html#using--in-doc-tests): As of Rust 1.34 we can omit the `fn main() -> Result<...>` when an `Ok::<...>(())` is returned.\r\n\r\n_Note:_ `Box<dyn std::error::Error>` is already semantically equal to `CatchAll`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://schema.org/endDate> "2020-04-22T14:22:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://schema.org/identifier> "71"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://schema.org/name> "Change getting started example" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://schema.org/startDate> "2020-04-22T13:50:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/71"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/71> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/620017119> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646460549> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://schema.org/description> "`sophia` provides traits for parsers and graphs. Accordingly, it should be possible to write a function that automatically runs the [RDF test suite](https://github.com/w3c/rdf-tests/) for the given format.\r\n\r\nFollowing steps are required to do so:\r\n\r\n- [x] implement a function to check if two graphs are isomorphic.\r\n   - I think we can borrow the algorithm from [`rio`](https://github.com/Tpt/rio/blob/master/testsuite/src/isomorphism.rs) @Tpt ?\r\n- [ ] write a framework that executes the different test cases.\r\n- [ ] execute tests based on a `manifest`\r\n- [ ] collect test results in a graph.\r\n- [ ] write a function to start evaluation, e.g.\r\n    ```rust\r\n    fn evaluate_parser<P: Parser>(parser_factory: Fn() -> P, directory: Path) -> HashGraph\r\n    ```\r\n    - Of course their should also be a `evaluate_quad_parser()` function.\r\n\r\nExcept for the isomorphism everything can be feature flagged as it's normally not used.\r\n\r\nHaving the test suite available would make it easy for implementors to check their crates. In addition, we could analyse crates that have a `sophia`-wrapper and/or implement `sophia::parser::TripleParser`/`QuadParser`, e.g. `rio`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://schema.org/identifier> "72"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://schema.org/name> "Provide a generic implementation of the RDF test suite " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://schema.org/startDate> "2020-04-27T13:45:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/72"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/72> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/621818120> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/625689725> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/626508407> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627193653> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627203404> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627441455> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627776002> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://schema.org/description> "This PR adds a function to check whether two `Graph`s are isomorphic equivalent regarding blank nodes.\r\n\r\nSupports: #72 \r\n\r\nThis more or less resembles the algorithm used in `oxigraph` by @Tpt. However, I had to adapt it to `sophia`'s API.\r\n\r\n## The algorithm\r\n\r\nTo check if two RDF graphs are equal their triples must be compared. However, blank nodes are local to the scope of their graphs. Accordingly, the labels of blank nodes does not matter when we compare two graphs only that they refer to the same thing.\r\n\r\nThe idea behind the implementation is that for each BN a distinct hash is calculated. if we do this for each BN in the two graphs a mapping from BNs of the first graph to the BNs of the second graph can be derived. If the mapping is applied to the BNs of the first graph the result should be absolute equal to the second graph.\r\n\r\nTo calculate the distinct hashes for a BN we calculate the hash of the hashes of each triple that contains the BN at any position. To eliminate the dependency from BN labels, BNs are excluded from the hashing.\r\n\r\nShould the hashes of BNs collide within a graph the hashes for those BNs are improved. This is done by hashing adjacent triples in the graph, i.e. we traverse further from subjects and objects and include the traversed triples in the hash. Iteratively the hashes are improved until no collisions are left. (In my implementation the traversal is actually limited to 8 steps). \r\n\r\n## ToDo\r\n\r\n- [x] Add more (complex) tests to verify the implementation.\r\n- [x] Implementation for datasets\r\n\r\n## Future work\r\n\r\nThe code should become easier when we introduce a term-trait.\r\n\r\n---\r\n\r\n@pchampin sadly I had to add some utility function are those okay?\r\n\r\n@Tpt could you verify that my version of the algorithm is correct?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://schema.org/endDate> "2020-05-13T06:30:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://schema.org/identifier> "73"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://schema.org/name> "[merged] Check Isomorphism" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://schema.org/startDate> "2020-04-29T13:05:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/73"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/73> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/enhancement> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://example.com/ns#label> <https://api.github.com/repos/pchampin/sophia_rs/labels/help%20wanted> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://schema.org/description> "Currently, validating a split IRI (i.e. represented as a pair namespace + suffix) allocates a new string, concatenates both parts, and validates it agains a regexp.\r\n\r\nIt should be possible to validate this pair without the extra allocation, and this might be faster (although this would need to be measured)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://schema.org/identifier> "74"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://schema.org/name> "Validating split IRI without allocating a new String" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://schema.org/startDate> "2020-05-04T16:39:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/74"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/74> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645822826> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659257773> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://schema.org/description> "This PR introduces the type `RawValue` as discussed in #55." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://schema.org/endDate> "2020-07-16T08:46:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://schema.org/identifier> "75"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://schema.org/name> "[merged] RawValue as an own type" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://schema.org/startDate> "2020-06-05T09:07:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/75"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/75> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/640869307> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008064> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776125154> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://schema.org/description> "I am having a problem with parsing of collections.\r\n\r\nConsider the following RDF:\r\n\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\r\n            xmlns:ex=\"http://example.org/stuff/1.0/\">\r\n\r\n  <rdf:Description rdf:about=\"http://example.org/basket\">\r\n    <ex:hasFruit rdf:parseType=\"Collection\">\r\n      <rdf:Description rdf:about=\"http://example.org/banana\"/>\r\n      <rdf:Description rdf:about=\"http://example.org/apple\"/>\r\n      <rdf:Description rdf:about=\"http://example.org/pear\"/>\r\n      <!--rdf:Description rdf:about=\"http://example.org/conference_pear\">\r\n      </rdf:Description-->\r\n    </ex:hasFruit>\r\n  </rdf:Description>\r\n</rdf:RDF>\r\n```\r\n\r\n\r\nWhen I parse this using horned-triples (my own code):\r\n\r\nhttps://github.com/phillord/horned-owl/blob/master/src/bin/horned-triples.rs\r\n\r\nI get:\r\n\r\n```\r\nhttp://example.org/basket\r\n\thttp://example.org/stuff/1.0/hasFruit\r\n\tn0\r\nn0\r\n\thttp://www.w3.org/1999/02/22-rdf-syntax-ns#first\r\n\thttp://example.org/banana\r\nn0\r\n\thttp://www.w3.org/1999/02/22-rdf-syntax-ns#rest\r\n\tn1\r\nn1\r\n\thttp://www.w3.org/1999/02/22-rdf-syntax-ns#first\r\n\thttp://example.org/apple\r\nn1\r\n\thttp://www.w3.org/1999/02/22-rdf-syntax-ns#rest\r\n\tn2\r\nn2\r\n\thttp://www.w3.org/1999/02/22-rdf-syntax-ns#first\r\n\thttp://example.org/pear\r\nn2\r\n\thttp://www.w3.org/1999/02/22-rdf-syntax-ns#rest\r\n\thttp://www.w3.org/1999/02/22-rdf-syntax-ns#nil\r\n```\r\n\r\nwhich seems correct. But remove the commented XML which should add\r\nanother fruit and I get:\r\n\r\n```\r\nhttp://example.org/basket\r\n\thttp://example.org/stuff/1.0/hasFruit\r\n\thttp://example.org/conference_pear\r\n```\r\n\r\nAlas my basket is empty! I was expecting it to be one longer.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://schema.org/identifier> "76"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://schema.org/name> "Collection parsing fails with XML" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://schema.org/startDate> "2020-06-08T20:11:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/76"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/76> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642527572> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642542068> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642873104> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642889943> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643337801> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643602674> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643662005> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644078747> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644410574> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645839416> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646323082> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659545332> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008203> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776124828> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://schema.org/description> "I have been trying out the XML parser on a large file. Even after an elongated period, it fails to parse, where the turtle parser succeeds.\r\n\r\nAs my large file I have been using the Gene Ontology available at:\r\n\r\nhttp://purl.obolibrary.org/obo/go.owl\r\n\r\n(The ttl version I have had to convert from this using the OWL API; I can put it somewhere if it is helpful).\r\n\r\nThe ttl version runs in 7 seconds, the XML version, I do not know whether it is stalling or just slow, because I have not had it complete yet.\r\n\r\n\r\n````\r\nfn main() -> Result<(),Error> {\r\n    let input = \"/home/phillord/scratch/go.ttl\";\r\n    //let input = \"/home/phillord/scratch/go.owl\";\r\n\r\n    let file = File::open(input)?;\r\n    let bufreader = BufReader::new(file);\r\n    let triple_source = sophia::parser::turtle::parse_bufread(bufreader);\r\n    //let triple_source = sophia::parser::xml::parse_bufread(bufreader);\r\n    println!(\"collecting\");\r\n    let start = Instant::now();\r\n    let graph: LightGraph = triple_source.collect_triples().unwrap();\r\n    println!(\"{}: {:?}\", graph.len(), start.elapsed());\r\n\r\n    Ok(())\r\n}\r\n\r\n````\r\n\r\n````\r\n      Finished release [optimized] target(s) in 3.77s\r\n     Running `target/release/horned-temp`\r\ncollecting\r\n1431737: 7.743499503s\r\n````" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://schema.org/identifier> "77"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://schema.org/name> "XML Parser fails on large file" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://schema.org/startDate> "2020-06-11T09:01:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/77> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659969129> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://schema.org/description> "Today `sophia` is at an incredible state and the foundations for a powerful RDF framework for Rust are mostly done. However, while there is an increasing amount of people opening issues. The downloads of `sophia` on [crates.io](https://crates.io/crates/sophia) are still under a thousand. I assume we could improve the popularity and attract contributors to `sophia` or even getting people to add crates to the `sophia`-ecosystem if we promote `sophia` more in the Rust community.\r\n\r\nFor me a start would be:\r\n1. Announcement post for `sophia` v0.6 at URLO.\r\n1. Suggestion for [Crate of the Week](https://users.rust-lang.org/t/crate-of-the-week/2704/792).\r\n1. Post at [Call for Participation](https://users.rust-lang.org/t/twir-call-for-participation/4821/323).\r\n\r\nThe later two have a chance to be included into [This Week in Rust](https://this-week-in-rust.org/) which is at least for me the mandatory weekly update concerning Rust.\r\n\r\nIf you wish I could write the posts I don't think this could cause any harm, just wanted to ask for permission first." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://schema.org/endDate> "2020-07-20T06:34:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://schema.org/identifier> "78"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://schema.org/name> "Promote sophia in the Rust community" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://schema.org/startDate> "2020-07-17T06:13:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/78"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/78> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660823034> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660883539> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661267740> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661727505> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://schema.org/creator> <https://api.github.com/users/brycefisher> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://schema.org/description> "In the scope of the Rust ecosystem, is Sophia a good choice for serializing Hydra into JSON-LD? \r\n\r\nMy end goal is to create a wrapper around an existing Rust web framework (maybe Warp?) that makes it easy to generate Hydra JSON-LD documentation automatically from Rust source code with minimal effort. I know that there are many projects for serializing to JSON, but getting the JSON-LD semantics correct would be extremely helpful. \r\n\r\nFrom the documentation I've looked at so far, I'm not quite sure if this project is a good choice to build on top of or not. Do you recommend looking for a different crate? Are there any hydra crates I've overlooked?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://schema.org/endDate> "2020-07-20T18:46:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://schema.org/identifier> "79"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://schema.org/name> "Is my use case a good fit for sophia?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://schema.org/startDate> "2020-07-20T04:42:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/79"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/79> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/494421636> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://schema.org/description> "Hi!\r\n\r\nWhile toying with the library, I noticed that the comparison of language tags was case-sensitive. According to the [RDF Concepts and Abstract Syntax](https://www.w3.org/TR/rdf11-concepts/), language tags are defined in [BCP47](https://tools.ietf.org/html/bcp47), which states:\r\n> All comparisons MUST be performed in a case-insensitive manner.\r\n\r\nThis can be found in the W3C RDF/XML syntax examples: [`example08.rdf`](https://www.w3.org/TR/2004/REC-rdf-syntax-grammar-20040210/example08.rdf) has `en-US`  while [`example08.nt`](https://www.w3.org/TR/2004/REC-rdf-syntax-grammar-20040210/example08.nt) has `en-us` where both are supposed to be equal.\r\n\r\nThis PR fixes `PartialEq`, but also `Hash`, to make comparison and hashing of `LiteralKind` case-insensitive. (*About the `to_lowercase` call: this one allocates, while it could be possible to loop over all characters of the `tag1` and hash their lowercase variant without allocating, but since language tags are extremely small strings I am not sure this would really be an improvement over allocating and hashing the buffered bytes directly)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://schema.org/endDate> "2019-05-21T14:40:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://schema.org/identifier> "7"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://schema.org/name> "Make language tags use case-insensitive comparison and hashing" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://schema.org/startDate> "2019-05-21T00:08:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/7"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/7> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/80> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/80> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673002145> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/80> <http://schema.org/creator> <https://api.github.com/users/rybesh> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/80> <http://schema.org/description> "Does Sophia have a “road map” document covering what has been done so far and what is planned for future versions?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/80> <http://schema.org/identifier> "80"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/80> <http://schema.org/name> "Roadmap?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/80> <http://schema.org/startDate> "2020-07-25T22:44:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/80> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/80"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/80> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669752690> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669799895> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670075950> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://schema.org/creator> <https://api.github.com/users/alexkreidler> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://schema.org/description> "I'm interested in contributing to Sophia, either\r\n- Working on implementing some of the JSON-LD processing algorithms (#16)\r\n- Working on carving out the Oxigraph SPARQL parser maybe into another crate (if @Tpt is ok with that) so it is compatible with Sophia types, and trying to get basic queries working over Sophia graphs (#19)\r\n- Adding persistent backends (for me, FoundationDB is the most interesting and immediately useful) (#22)\r\n\r\nAlthough I totally understand and support the aims of copyleft licenses, I think that Sophia and the rest of the RDF ecosystem in Rust could gain much more adoption more quickly if it adopted a permissive license.\r\n\r\nSee https://github.com/pchampin/sophia_rs/issues/23#issuecomment-565092486.\r\n\r\nAlthough it's not a blocker, it would personally make me more eager to contribute if the entire project used a permissive license (e.g. Apache 2.0 like Oxigraph does)\r\n\r\nAlso as a side note, I recently did this: https://github.com/alexkreidler/rust-iri-benchmarks, which may be silly, but I thought interesting to see how many different groups in the Rust RDF ecosystem were re-implementing the same thing differently.\r\n\r\nThat's why I hope Sophia and Oxigraph can achieve the goals of #23. I think that changing the license is a first step that could really make a difference." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://schema.org/endDate> "2020-08-06T17:38:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://schema.org/identifier> "81"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://schema.org/name> "Change license?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://schema.org/startDate> "2020-08-06T04:58:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/81"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/81> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673365099> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/677698790> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://schema.org/description> "The `TermFactory`-trait is useful in many occasions where someone tries to build dynamically new terms (especially blank nodes).\r\n\r\nHowever, for now only factories for `Rc<str>` and `Arc<str>` where provided. This PR add a `SimpleFactory` when expected `TermData` can be directly converted, e.g. `String` to `Box<str>` and an implementation for closures.\r\n\r\nIn addtion, I did a small simplification of the `TermFactory` trait." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://schema.org/endDate> "2020-08-20T14:26:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://schema.org/identifier> "82"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://schema.org/name> "More factories" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://schema.org/startDate> "2020-08-08T09:06:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/82"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/82> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/671945422> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://schema.org/description> "This PR fixes a lot of dead links in the docs as well as some typos.\r\n\r\nFor detecting dead links in documentation I used [cargo-deadlinks](https://github.com/deadlinks/cargo-deadlinks)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://schema.org/endDate> "2020-08-11T13:25:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://schema.org/identifier> "83"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://schema.org/name> "Fix dead links and typos" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://schema.org/startDate> "2020-08-08T10:39:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/83"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/83> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/674504784> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/693422154> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://schema.org/description> "I added documentation to most public elements in `sophia/`, using\r\nthe method described in the issue (#44) of adding `#![deny(missing_docs)]`\r\nto `sophia/src/lib.rs`.\r\n\r\n~2 doc comments are missing:~\r\n- ~[sophia_api::make_scoped_triple_streaming_mode!(ScopedRioSourceTriple, RioSourceTriple);](https://github.com/pchampin/sophia_rs/blob/master/sophia/src/parser/rio_common.rs#L69)~\r\n- ~[sophia_api::make_scoped_quad_streaming_mode!(ScopedRioSourceQuad, RioSourceQuad);](https://github.com/pchampin/sophia_rs/blob/master/sophia/src/parser/rio_common.rs#L108)~\r\n\r\n~I don't know how to add comments to the macro-created types.~\r\n\r\nI found out that it's possible to add doc comments to macros (https://stackoverflow.com/a/33999625/4696215) and updated the relevant macros accordingly in a separate commit." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://schema.org/endDate> "2020-09-16T13:50:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://schema.org/identifier> "84"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://schema.org/name> "Improve doc coverage (#44)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://schema.org/startDate> "2020-08-13T18:14:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/84"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/84> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681929965> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://schema.org/description> "The 3 links in the doc comment of\r\n`sophia_jsonld::serializer::jsonTarget` were emitting `unresolved\r\nlink` warnings.\r\n\r\nThe broken links can be seen in: https://docs.rs/sophia_jsonld/0.6.2/sophia_jsonld/serializer/struct.JsonTarget.html\r\n\r\nThere was a typo (`JsonLdSerialiser` instead of `JsonLdSerializer`)\r\nand the links were specified with the wrong syntax:\r\n`[...](...)` instead of `[...]: ...`\r\n\r\nThis is related to #44 (broken links rather than missing docs)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://schema.org/endDate> "2020-08-27T12:54:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://schema.org/identifier> "85"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://schema.org/name> "Fix unresolved doc links in jsonld/src/serializer.rs" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://schema.org/startDate> "2020-08-16T09:59:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/85"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/85> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681949112> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://schema.org/description> "- Add `#![deny(missing_docs)]` in `jsonld/src/lib.rs`\r\n- Add `#![allow(missing_docs)]` in `jsonld/src/test_util.rs`\r\n- Add missing doc comments\r\n\r\nRelated to #44\r\n\r\nIt includes the changes in #85 (fixing unresolved links)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://schema.org/endDate> "2020-08-27T13:28:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://schema.org/identifier> "86"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://schema.org/name> "Improve doc coverage for `sophia_jsonld`" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://schema.org/startDate> "2020-08-16T10:54:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/86"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/86> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675915964> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675990339> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623139> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://schema.org/description> "I would like to use sophia for building a multilingual dictionary, for which I need `http://www.w3.org/ns/lemon/ontolex#` and some other associated modules.\r\n\r\nI'm wondering whether it would make sense to contribute these namespaces to `sophia_api::ns`, or are you satisfied with the existing ones as \"the most common namespaces\"?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://schema.org/endDate> "2020-08-22T10:20:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://schema.org/identifier> "87"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://schema.org/name> "Should more namespaces be added to sophia_api::ns?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://schema.org/startDate> "2020-08-16T16:03:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/87"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/87> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/88> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/88> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680847900> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/88> <http://schema.org/creator> <https://api.github.com/users/fimbault> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/88> <http://schema.org/description> "Hi, \r\n\r\nIt's great to get json-ld 1.1 support, at least for serialization and parsing. Even if it's early stage, it could be interesting to list it on https://json-ld.org\r\nWhat's the long term objective in terms of compliance with the rest of the spec? (flattening, compaction, framing)\r\n\r\nFabien" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/88> <http://schema.org/identifier> "88"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/88> <http://schema.org/name> "JSON-LD " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/88> <http://schema.org/startDate> "2020-08-19T08:15:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/88> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/88"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/88> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/89> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/89> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/89> <http://schema.org/description> "This PR aims to rework the elements of `sophia` related to the `TermFactory`.\r\n\r\nLike pointed out in #82 the current `TermFactory` trait does no longer fit into `sophia` with the `TTerm` trait. \r\n\r\nFollowing the previous discussion and inspired by [Code Smell: Concrete Abstraction](https://matklad.github.io/2020/08/15/concrete-abstraction.html) this PR removes the `TermFactory` trait completely. In turn, the existing implementations for `WeakHashSet` is turned into a concrete `TermCache` that fulfils the same task. Furthermore, the traits `FromData` and `IntoData` have been added for proper conversion between `TermData` types. This will hopefully lead to an easier `TermData` handling. As you can see the implementations of `FromData` and `IntoData` allow to pass in either owned or reference types when the function signature is something like:\r\n\r\n```rust\r\nfn foo(td: IntoData<Arc<str>>) {}\r\n\r\nfn main() {\r\n    // all works\r\n    foo(\"foo\");\r\n    foo(\"bar\".to_string());\r\n    let rc: Rc<str> = \"baz\".into();\r\n    foo(&rc);\r\n}\r\n```\r\n\r\nToDo:\r\n- [ ] Introduce `TermCache` to `IndexMap`\r\n  - While doing so #64 could be done.\r\n- [ ] Adapt the APIs of `Term`, `Iri` and similar to the new `FromData` and `IntoData` traits." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/89> <http://schema.org/identifier> "89"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/89> <http://schema.org/name> "[WIP] Rework `TermFactory`" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/89> <http://schema.org/startDate> "2020-08-20T14:25:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/89> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/89"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/89> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499642176> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499759249> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/500110936> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501401271> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501453212> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/511621522> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/512895260> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/516297180> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/517411101> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564099498> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565106711> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820962> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565824918> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565848667> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849174> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565934935> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565952033> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://schema.org/description> "Hi!\r\n\r\n`error-chain` [is not maintained anymore](https://github.com/rust-lang-nursery/failure/issues/181), so it would be a good idea to move to [`failure`](https://github.com/rust-lang-nursery/failure), which has all the features needed already, as well as backtrace support (i.e. the underlying `pest` error could be accessed from a `ParserError` using the `cause()` method)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://schema.org/endDate> "2020-01-22T17:55:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://schema.org/identifier> "8"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://schema.org/name> "Move from `error-chain` to `thiserror` for error management" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://schema.org/startDate> "2019-05-21T21:53:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/8> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/716491394> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://schema.org/description> "This addresses #19.\r\n\r\nThis proposal is über-minimalistic compared to what I suggested initially, but I realized that *generic* SPARQL support is a huge can of worm (see the comment at the top of the `sparql.rs` file).\r\n\r\nSo decided to go for the least common denominator. The drawback is that anyone requiring (even slightly) advanced SPARQL support will need to rely on implementation specific methods. But I still think that this minimal API has value for interoperability.\r\n\r\nAny comment welcome." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://schema.org/endDate> "2020-10-26T11:36:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://schema.org/identifier> "90"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://schema.org/name> "Generic API for SPARQL support" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://schema.org/startDate> "2020-08-25T10:01:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/90"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/90> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681998103> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682004755> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682858354> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683296247> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715880560> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715893299> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715903537> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://schema.org/description> "This is an alternative to #90, following @yever's comments.\r\n\r\nI think I prefer this one ;-)\r\n@Tpt what do you think?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://schema.org/endDate> "2020-10-26T11:36:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://schema.org/identifier> "91"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://schema.org/name> "Alternative API for SPARQL support" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://schema.org/startDate> "2020-08-27T09:24:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/91"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/91> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715311393> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715375970> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715881266> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715905337> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/717150045> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://schema.org/description> "@pchampin: To help with test coverage, I added tests to the default implementation of the trait methods in `sparql.rs`.\r\n\r\nThis pull request targets your pull request #91 as a suggested addition." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://schema.org/identifier> "92"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://schema.org/name> "Add tests to sparql.rs" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://schema.org/startDate> "2020-08-28T22:21:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/92"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/92> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683413960> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683465390> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/684441427> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://schema.org/description> "Avoids to get some textual output even if all tests pass." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://schema.org/endDate> "2020-09-01T06:28:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://schema.org/identifier> "93"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://schema.org/name> "Removes not useful print in test code" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://schema.org/startDate> "2020-08-29T14:07:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/93"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/93> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/686299858> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://schema.org/description> "This PR adds implementations to `Term` and `dyn TTerm` so that it is now possible to get values from a `HashSet<Term<TD>>` (or `HashMap`) by using `&dyn TTerm` references, e.g.:\r\n\r\n```rust\r\nfn main() -> Result<(), Box<dyn std::error::Error>> {\r\n    let t: Term<String> = Term::new_iri(\"http://example.com/test\")?;\r\n    let mut map = HashSet::new();\r\n    map.insert(t);\r\n\r\n    let iri = SimpleIri::new(\"http://example.com/\", Some(\"test\"))?;\r\n    assert!(map.get(iri.as_dyn()).is_some());\r\n    Ok(())\r\n}\r\n```\r\n\r\nThis also works on other implementation of `TTerm` as long as they implement `Borrow<dyn TTerm + 'a>`. However, the contract of `Borrow` requires that each type that implements the `Borrow` trait has an equivalent implementation of `Hash` and `Eq` to the one of `dyn TTerm`, i.e. they must use the `term_hash()` and `term_eq()` functions. So this is not desirable for all implementors of `TTerm`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://schema.org/endDate> "2020-09-03T07:34:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://schema.org/identifier> "94"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://schema.org/name> "Use '&dyn TTerm' to access entries in a 'HashSet'" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://schema.org/startDate> "2020-09-02T13:35:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/94"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/94> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691104063> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691112688> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://schema.org/creator> <https://api.github.com/users/huhn511> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://schema.org/description> "Hi folks,\r\n\r\nthis is a really nice project! \r\n\r\nI just found out, that I need to build 'sophia_iri' with Rust nightly. \r\nDo you have any plans to use Rust stable instead of nightly? \r\n\r\nBest wishes,\r\nhuhn" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://schema.org/endDate> "2020-09-11T14:38:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://schema.org/identifier> "95"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://schema.org/name> "Any plans to use core stable instead of nightly? " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://schema.org/startDate> "2020-09-11T13:33:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/95"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/95> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691702197> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708223609> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708224273> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://schema.org/creator> <https://api.github.com/users/huhn511> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://schema.org/description> "The goal of this pull request is to create documentation about the Sophia project.\r\n\r\nThe documentation should contain: \r\n\r\n- [x]  Quick Overview\r\n- [x]  Getting Started Guide\r\n\r\nFor detailed documentation, there should be added more pull requests in the future. \r\n\r\nThe docs folder is powered via [mdbook](https://github.com/rust-lang/mdBook) and will be served via Github pages and automatically build with GitHub actions.s" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://schema.org/endDate> "2020-10-14T07:43:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://schema.org/identifier> "96"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://schema.org/name> "add docs" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://schema.org/startDate> "2020-09-13T17:27:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/96"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/96> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737194473> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737486631> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/757571359> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/767390760> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/770297586> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://schema.org/creator> <https://api.github.com/users/007vasy> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://schema.org/description> "Hi!\r\n\r\nThank you for this library!\r\n\r\nI am working on a graphQL -> sparQL translator in Rust (https://github.com/007vasy/warpgrapher?organization=007vasy&organization=007vasy) and I having a hard time figuring out how to use sophia to connect to a database and execute the queries againts it. Could you give some pointers?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://schema.org/identifier> "97"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://schema.org/name> "Use sophia to connect to a SparQL db (in my case AnzoGraph)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://schema.org/startDate> "2020-11-30T23:38:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/97"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/97> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773911563> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773915287> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773925378> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773934931> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773995403> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/774894695> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775001140> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/784958642> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/786549992> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://schema.org/description> "I am trying to parse this file\r\n\r\nhttp://www.drugtargetontology.org/dto/dto_vocabulary_gpcr_protein.owl\r\n\r\nAnd getting an error!\r\n\r\n````\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: SourceError(RdfXmlError { kind: Xml(EscapeError(UnrecognizedSymbol(1..4, Ok(\"xsd\")))) })', src/io/rdf/reader.rs:323:56\r\n````\r\n\r\nThe problem appears to be the use of an xsd entity. \r\n\r\n````\r\n<rdfs:label rdf:datatype=\"&xsd;string\">HTR1A gene</rdfs:label>\r\n````\r\n\r\nThe entity appears to be defined correctly. Is this expected?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://schema.org/identifier> "98"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://schema.org/name> "RDFXML parser fails on xsd entities" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://schema.org/startDate> "2021-02-04T22:08:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/98> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775233882> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775250301> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775395978> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775481517> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775901694> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776123310> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776278587> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://schema.org/description> "\r\nAs far as I can see there isn't an XML serializer available at the moment. This would be a nice to have." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://schema.org/identifier> "99"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://schema.org/name> "XML Serialization!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://schema.org/startDate> "2021-02-08T14:21:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/99"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/99> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/495052507> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/498992236> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499195620> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499688211> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499761032> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501584925> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501793933> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://schema.org/description> "Hi!\r\n\r\nThis is a **work in progress** branch, so it's not clear to merge right now, but this is how far I am currently with an RDF/XML parser. I'm parsing correctly ~~most~~ **all** of the [RDF/XML 1.1](https://www.w3.org/TR/rdf-syntax-grammar/#parseTypeCollectionPropertyElt) examples, and I need to add the tests from `rdf-test`.\r\n\r\nI'll also feature-gate the parser behind an XML feature since it requires an additional dependency (`quick-xml`).\r\n\r\n## Missing features\r\n\r\n- [x] Proper error reporting (currently everything panics, but I'm not sure I want to work on this before #8  is resolved)\r\n- [ ] `rdf:parseType=\"Literal\"` (this is likely to need a PR in `quick-xml`)\r\n- [x] `rdf:parseType=\"Collection\"`\r\n- [x] Statements reification\r\n- [x] Validation of elements names" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://schema.org/endDate> "2019-06-13T07:36:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://schema.org/identifier> "9"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://schema.org/name> "Work-in-progress RDF/XML parser" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://schema.org/startDate> "2019-05-22T02:19:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/9"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/9> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474871772> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474871772> <http://schema.org/creator> <https://api.github.com/users/MarcAntoine-Arnaud> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474871772> <http://schema.org/description> "Thks @pchampin " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474871772> <http://schema.org/startDate> "2019-03-20T15:03:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474871772> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/3#issuecomment-474871772"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474874075> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474874075> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474874075> <http://schema.org/description> "Sorry, this was indeed lacking proper documentation.\r\n\r\nThis \"fix\" is minimalist: you have to manually follow the instructions in the README. If you have ideas to automate this process in a portable way, feel free to reopen the issue." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474874075> <http://schema.org/startDate> "2019-03-20T15:08:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474874075> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/3#issuecomment-474874075"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474879415> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474879415> <http://schema.org/creator> <https://api.github.com/users/MarcAntoine-Arnaud> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474879415> <http://schema.org/description> "Hi,\r\n\r\nIt's a first step.\r\nI wanna to purpose soon the ability to define a `build.rs` file (used by Cargo) to define some function.\r\nAnd here we can be able to download W3C files (with a local cache for offline developments).\r\n\r\nBut before doing that I wanna to improve the code quality:\r\n- add Travis CI to test on multi versions of rust\r\n- check Rust code format\r\n- check Rust code with Clippy (to prevent some bad writing)\r\n\r\nI have configured that on [yaserde](https://github.com/media-io/yaserde/blob/master/.travis.yml) and it's cool to open source contribution." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474879415> <http://schema.org/startDate> "2019-03-20T15:18:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474879415> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/3#issuecomment-474879415"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474923037> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474923037> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474923037> <http://schema.org/description> "Thanks for the PR.\r\nUnrelated, but here's a \"pro tip\": **never** use your branch `master` for a pull request, always create a dedicated branch. If I had refused the PR, your `master` and my `master` would have diverged, which would make it hard for you to pull further commits..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474923037> <http://schema.org/startDate> "2019-03-20T16:43:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474923037> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/2#issuecomment-474923037"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474942369> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474942369> <http://schema.org/creator> <https://api.github.com/users/MarcAntoine-Arnaud> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474942369> <http://schema.org/description> "I started to create a branch to test CI.\r\nIn fact I used the git submodule to retrieve rdf-tests." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474942369> <http://schema.org/startDate> "2019-03-20T17:22:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/474942369> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/3#issuecomment-474942369"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475504079> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475504079> <http://schema.org/creator> <https://api.github.com/users/MarcAntoine-Arnaud> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475504079> <http://schema.org/description> "Yes you've right, I have update the PR based on your (excellent) feedbacks :-)\r\nI hope it can be better now." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475504079> <http://schema.org/startDate> "2019-03-22T06:00:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475504079> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/4#issuecomment-475504079"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475515007> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475515007> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475515007> <http://schema.org/description> "Looks better now. That was quick :+1: Thanks" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475515007> <http://schema.org/startDate> "2019-03-22T07:03:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/475515007> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/4#issuecomment-475515007"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484037114> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484037114> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484037114> <http://schema.org/description> "After a day of examining the probelm, I conclude that the problems originates from `Triple`'s lifetime. A solution would be to separate the trait `Triple<'a>` into the term-owning `Triple<T: TermData>` and the term-borrowing `TripleRef<'a, T: TermData>`. As a result the lifetime of `Graph<'a>` could be removed, so `triples(&'a self) -> GTripleSource<'a>` could be rewritten to (pseudocode) `triples<'a>(&'a self) -> Iterator<Item = TripleRef<'a, T>>`.\r\nI'll try this solution myself and write a PR if I'm successful.\r\n\r\nBTW: I would introduce the super-trait `TermData` for convienence:\r\n````rust\r\n/// Supertrait for all properties data of a `Term<T>` must provide.\r\npub trait TermData: AsRef<str> + Clone + Eq + Hash {}\r\nimpl<T> TermData for T where T: AsRef<str> + Clone + Eq + Hash {}\r\n````" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484037114> <http://schema.org/startDate> "2019-04-17T10:59:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484037114> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/5#issuecomment-484037114"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484595292> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484595292> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484595292> <http://schema.org/description> "Thanks a lot for your interest in sophia. I'm glad to hear about someone else using it. Please be aware, though, that the API is still very unstable at the moment (but I guess you figured that, given the early stage of the project).\r\n\r\nThe lifetimes with `Term`, `Triple` and `Graph` are a mess. The ideal solution would be that graph use a Generic Associated Type instead of having the lifetime \"fixed\" in its own type parameters, but GTAs are not available in Rust yet -- although I heard that they might land during 2019...\r\n\r\nIn the meantime, I came up with this design, but it has some drawbacks, as you painfully discovered. I'm very interested in your solution. I'll have a look at it myself, but any PR would be more than welcome." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484595292> <http://schema.org/startDate> "2019-04-18T17:08:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/484595292> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/5#issuecomment-484595292"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/485911221> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/485911221> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/485911221> <http://schema.org/description> "Ok, I have a working version of your example, in the [dedicated branch](https://github.com/pchampin/sophia_rs/tree/issue5) I just pushed.\r\n\r\nThe solution relies on [Higher-Rank Trait Bounds](https://doc.rust-lang.org/nomicon/hrtb.html), which I already had to use in some parts of the crate. This is not ideal, because it is a relatively advanced and complex feature of Rust (it is only documented in the Nomicon, AFAIK), and at the time, I hoped that users of the crate would not need to be exposed to them, but your example proves me wrong on that part.\r\n\r\nSo this way of using `Graph` in trait bounds should be thoroughly documented, and possibly eased by creating trait aliases (such as the one you suggest for `TermData`). Although not ideal, it is the only way I found to provide the level of genericity that I want to achieve. Your proposal is interesting, but I don't want to force `Graph` implementations to yield `TripleRef`s, some implementations may create triples on demand and \"give them away\".\r\n\r\nAs I mentionned earlier, the ideal solution would be to have [Generic Associated Types](https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md), so the API may get simpler when (if?) they get included in Rust." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/485911221> <http://schema.org/startDate> "2019-04-23T18:01:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/485911221> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/5#issuecomment-485911221"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486116119> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486116119> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486116119> <http://schema.org/description> "Thank you for your efforts and indeed that solves my concrete problem.\r\n\r\nHowever, I still think that the trait interface of `Graph<'a>` including a lilfetime implies wrong semantics. Because the lifetime is associated with triples returned from the `Graph` not to `Term`s that are actually stored in the `Graph` itself.\r\nI finally found a solution that is, in my opinion, clearer about lifetimes. The most important changes are:\r\n```rust\r\npub trait Graph {\r\n    type TermData: TermData;\r\n    type Error: CoercibleWith<Error> + CoercibleWith<Never>;\r\n\r\n    fn triples<'a>(&'a self) -> GTripleSource<'a, Self>;\r\n    // ...\r\n}\r\n\r\npub type GResult<G, T> = std::result::Result<T, <G as Graph>::Error>;\r\npub type GTripleSource<'a, G> = Box<dyn Iterator<Item = GResult<G, RefTriple<'a, <G as Graph>::TermData>>>>;\r\npub type RefTriple<'a, T> = [&'a Term<T>; 3];\r\n```\r\nThis removes the lifetimes of Graph and Triple while the iterators hold a correct lifetime which is directly associated to the call to `triples()`. As mentioned before I'm working on refactoring the whole library but as this is a major change it takes some time.\r\nI know this approach is contrary to your approach having the `Graph` as generic as possible because the returned triples are now fixed to `RefTriple<'a, T>`. As long as there are no GATs I think this is the best solution. \r\nInvestigating the `Graph`'s implementations I only found triples of `RefTriple<'a, T>` build and returned in the triple-iterators. I think that is fine as there are only the costs for contructing the `Triple`s that way.\r\n\r\nAs I understand a destinction between a `TripleSource` of `Triple`s that own their `Term`s for consumption and a `TripleSource` of `Triple`s that only borrow their `Term`s for inspecting a `Graph`'s contents could be benefitial. For example something like:\r\n````rust\r\ntrait TripleSource {\r\n  type Triple: Triple + 'static;\r\n  type Error: ...;\r\n  type Iter: Iterator<Item = Result<Self::Triple, Self::Error>>;\r\n  // ...\r\n}\r\n\r\n// pseudo code\r\ntrait GTriples<'a, G> {\r\n  type Iter: Iterator<Item = GResult<G, RefTriple<'a, <G as Graph>::TermData>>>;\r\n\r\n  fn into_triple_source(self) -> impl TripleSource {\r\n    self.map(|[s, p, o]| { [s.clone(), p.clone(), o.clone()] })\r\n  } \r\n}\r\n````" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486116119> <http://schema.org/startDate> "2019-04-24T08:08:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486116119> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/5#issuecomment-486116119"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486146530> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486146530> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486146530> <http://schema.org/description> "Regarding graphs returning `RefTriples`: this will be a problem as soon as we add file-backed or database-backed implementations of `Graph`, where the triples will not be permanently stored in memory.\r\n\r\nThe lifetime parameter of `Graph` it is the lifetime for which the graph can be borrowed for iterating over triples -- and indirectly, it also constraints the lifetime of the terms of the graph. I agree that it is confusing, but not necessarily \"wrong\", as long as we make things really clearer. I pushed to the branche `issue5` a proposal for documenting this, as well as trait aliases to make it easier to use. In practice, the trait `OwnedGraph` would be used instead of the trait `Graph` in type bounds, and would provide roughly the same ergonomics as your proposal, without sacrificing genericity.\r\n\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486146530> <http://schema.org/startDate> "2019-04-24T09:37:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486146530> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/5#issuecomment-486146530"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486170073> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486170073> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486170073> <http://schema.org/description> "Okay, I have to admit that your API design is much better reasoned than I thought on the first look. Especially, I've completly forgotten about the non-inmem `Graph`s.\r\nI'll adopt your proposal and continue my work on the \"from-graph\" crate (name is WIP).\r\n\r\nThank you very much for your time and efforts helping me. \r\nI'm looking forward to see the future of this crate!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486170073> <http://schema.org/startDate> "2019-04-24T10:40:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/486170073> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/5#issuecomment-486170073"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/491556470> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/491556470> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/491556470> <http://schema.org/description> "For the record, I added the documentation (in commit 692c6e8) but I did *not* add trait aliases.\r\n\r\nFor `Graph::Error`, I thought that `CoercibleError<Never>+CoercibleError<Error>` is more explicit that a more compact trait alias would be.\r\n\r\nFor the Higher-Rank Trait Bound itself, I realized that it may have several variants, when the developer wants to constrain `Graph::Triple` and/or `Graph::Error`. So here again, I think that explicit is better than implicit." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/491556470> <http://schema.org/startDate> "2019-05-12T01:21:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/491556470> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/5#issuecomment-491556470"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/494421636> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/494421636> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/494421636> <http://schema.org/description> "Well spotted, thanks.\r\n\r\nThe funny thing is: I have been specifically working, in another context, on language-tagged literals and BCP47 in the last few days... but this bug in Sophia didn't even occur to me then! :-)\r\n\r\nThanks again." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/494421636> <http://schema.org/startDate> "2019-05-21T14:42:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/494421636> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/7#issuecomment-494421636"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/495052507> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/495052507> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/495052507> <http://schema.org/description> "cc @phillord if you want to see where this is going" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/495052507> <http://schema.org/startDate> "2019-05-23T03:20:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/495052507> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/9#issuecomment-495052507"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/498992236> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/498992236> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/498992236> <http://schema.org/description> "Just to make sure you are aware: rudf provides a simple RDF/XML parser: https://github.com/Tpt/rudf/blob/master/lib/src/rio/xml.rs" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/498992236> <http://schema.org/startDate> "2019-06-05T08:37:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/498992236> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/9#issuecomment-498992236"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499195620> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499195620> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499195620> <http://schema.org/description> "@Tpt Also got this now https://github.com/phillord/raptor-rs\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499195620> <http://schema.org/startDate> "2019-06-05T18:13:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499195620> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/9#issuecomment-499195620"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499642176> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499642176> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499642176> <http://schema.org/description> "Thank you for this suggestion. I need more input before I make a decision.\r\n\r\nYou argue that `error-chain` [is not maintained anymore](rust-lang-nursery/failure#181), however the conclusion of the thread you cite is [not as clear-cut](https://github.com/rust-lang-nursery/failure/issues/181#issuecomment-421734025). Furthermore, it seems that `error-chain` [is still being maintained](https://github.com/rust-lang-nursery/error-chain/commits/master) after all.\r\n\r\nThat being said, after a quick glance at `failure`, I must say it does look more elegant and lightweight than `error-chain` (I'm not a big fan of the `Error`/`ErrorKind` dichotomy... it feels like coding in Java :smiling_imp:).\r\n\r\nStill, I'm a bit uncomfortable with investing in a crate whose ambition is to deprecate a trait from the standard lib. Especially when some of the complains about the standard trait have been fixed in the meantime. In that respect, the [Evolution section in their README](https://github.com/rust-lang-nursery/failure#evolution) is not really clear, but it makes me nervous.\r\n\r\nSo, could you please elaborate more why you think `failure` is a safer bet for the future than `error-chain`?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499642176> <http://schema.org/startDate> "2019-06-06T19:51:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499642176> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-499642176"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499688211> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499688211> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499688211> <http://schema.org/description> "@Tpt : mine however supports `parseType=\"collection\"` :wink: " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499688211> <http://schema.org/startDate> "2019-06-06T22:16:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499688211> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/9#issuecomment-499688211"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499759249> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499759249> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499759249> <http://schema.org/description> "As you said, `failure` has the advantage of removing the `Error`/`ErrorKind` duplication. Furthermore, it can create a proper backtrace, without ambiguity, from any error, and not just `ChainedError` implementors: the backtrace is reached through the `cause` method, which returns the value of one of the variant's fields. It is unclear how to do that with `error-chain`, since I'm not sure you can both expose an error as an attribute *and* access it through the backtrace.\r\n\r\nThe other advantage is that the conversion traits make it easier to use `?`, whereas `error-chain` sometimes require you to wrap/convert the error yourself (see the PR for the XML parser, where implementing another error category makes it more verbose to return a top-level error from the lower-level one)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499759249> <http://schema.org/startDate> "2019-06-07T05:14:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499759249> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-499759249"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499761032> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499761032> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499761032> <http://schema.org/description> "Finally, this is feature-complete ! I still need to do a bit of refactoring, in particular to reduce code duplication and complexity, but this version behaves correctly against the RDF/XML test suite, including errors (it fails where a failure is expected). The only exception is the `parseType=\"Literal\"` feature, which is not supported by the underlying `quick-xml` library, but I opened an issue in there to request that.\r\n\r\nStreaming (i.e. iterating over the produced triples and unwraping the result) the Gene Ontology ([go.owl](http://geneontology.org/docs/download-ontology/#go_obo_and_owl)) takes about 5~10 seconds on my machine, but there is probably still some optimisations to be carried out." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499761032> <http://schema.org/startDate> "2019-06-07T05:24:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/499761032> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/9#issuecomment-499761032"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/500110936> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/500110936> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/500110936> <http://schema.org/description> "> the backtrace is reached through the cause method, which returns the value of one of the variant's fields\r\n\r\nBut the `cause` method in `failure` seems to be redundant with the new [`source`](https://doc.rust-lang.org/std/error/trait.Error.html#method.source) method in `std::error::Error`. This is the kind of divergence that I am concerned about.\r\n\r\n> the conversion traits make it easier to use `?`, whereas `error-chain` sometimes require you to wrap/convert the error yourself (see the PR for the XML parser...)\r\n\r\nIt seems that you solved this problem in your latest commit f6eb5fe4c. Or is it something else?\r\n\r\nAs you can see, I'm still reluctant to make the leap. But I'm also still open to discussion." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/500110936> <http://schema.org/startDate> "2019-06-08T09:41:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/500110936> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-500110936"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501401271> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501401271> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501401271> <http://schema.org/description> "The difference is that to do that with `error-chain`, you need to call `Error::with_chain` every time you want to chain something, and ultimately you'll write your own `impl From<InnerError> for OuterError` whereas `failure` lets you derive it with an attribute.\r\n\r\nFurthermore, as seen in my PR, there is ambiguity between *chaining* and *wrapping* the error: in `failure`, you can both wrap the error as a field of your variant (hence accessing it without downcasting) **and** have it returned by the `source` method.\r\n\r\nUltimately, both libraries are doing the same thing, but `failure` is removing a lot of boilerplate code,  as well as the `Error`/`ErrorKind` dichotomy." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501401271> <http://schema.org/startDate> "2019-06-12T18:34:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501401271> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-501401271"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501453212> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501453212> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501453212> <http://schema.org/description> "> The difference is that to do that with `error-chain`, you need to call `Error::with_chain` every time you want to chain something,\r\n\r\nactually, you would use `Result:chain_err`, which is not *that* verbose.\r\n\r\n> and ultimately you'll write your own `impl From<InnerError> for OuterError` whereas failure lets you derive it with an attribute.\r\n\r\nI'm not sure about that. Explicit is better than implicit, and chaining an error is not the same as converting it...\r\n\r\n> as seen in my PR, there is ambiguity between *chaining* and *wrapping* the error\r\n\r\nGranted. But in the case of `ParseError`, I wouldn't have wanted to fix in advance the type of error that can be its cause (because different parsers will have different underlying errors, your XML parser is a perfect example). So if I had had to define a member for the chained error, its type would have been `Box<std::error::Error>`, and it would still have required downcasting.\r\n\r\n> Ultimately, both libraries are doing the same thing\r\n\r\nYes, but `failure` is doing it its own specific way, while `error-chain` is playing ball with the standard `Error` trait...\r\n\r\nI agree that `error-chain` is generally more verbose, but it still looks like a safer choice. Sorry." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501453212> <http://schema.org/startDate> "2019-06-12T20:59:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501453212> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-501453212"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501584925> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501584925> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501584925> <http://schema.org/description> "I know that last commit cost you :wink:, much appreciated.\r\nI'll take over to please Travis, and do the merge. \r\nThanks again" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501584925> <http://schema.org/startDate> "2019-06-13T07:29:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501584925> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/9#issuecomment-501584925"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501793933> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501793933> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501793933> <http://schema.org/description> "@pchampin : my only regret is not being able to add better error reports, I should have used `xmlparser`  instead of `quick-xml` to have input spans and better error reporting, I may try to experiment to see how easy it is to replace it ! :wink: " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501793933> <http://schema.org/startDate> "2019-06-13T17:09:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/501793933> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/9#issuecomment-501793933"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/511621522> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/511621522> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/511621522> <http://schema.org/description> "I just discovered [`err-derive`](https://crates.io/crates/err-derive) that provides a derive macro equivalent to `failure`, but that implements `std::fmt::Display` and `std::error::Error`. Leaving it there just in case :wink: " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/511621522> <http://schema.org/startDate> "2019-07-16T00:50:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/511621522> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-511621522"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/512895260> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/512895260> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/512895260> <http://schema.org/description> "Now you're talking :-D\r\nIt looks very interesting indeed. Let's rename this issue and leave it open til I get some time to seriously consider the migration." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/512895260> <http://schema.org/startDate> "2019-07-18T16:42:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/512895260> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-512895260"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/516297180> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/516297180> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/516297180> <http://schema.org/description> "When talking about alternative error handling crates, I would also consider [snafu](https://crates.io/crates/snafu). It uses the `std::error::Error` trait and provides nicer derive-display syntax then `failure`, i.e. you can call methods on a variants elements. In addition, it has some kind of `failure`'s context mechanics which are very nice to use." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/516297180> <http://schema.org/startDate> "2019-07-30T07:19:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/516297180> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-516297180"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/517411101> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/517411101> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/517411101> <http://schema.org/description> "Thanks @MattesWhite, I'll also have a look." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/517411101> <http://schema.org/startDate> "2019-08-01T18:45:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/517411101> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-517411101"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518845945> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518845945> <http://schema.org/creator> <https://api.github.com/users/althonos> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518845945> <http://schema.org/description> "I don't think we need to use the exact same version as the `url` crate, so this could be resolved\r\nsimply by adding `percent-encoding` as a dependency. PR on the way." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518845945> <http://schema.org/startDate> "2019-08-06T21:12:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518845945> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/12#issuecomment-518845945"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518952283> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518952283> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518952283> <http://schema.org/description> "Thanks, that was fast!\r\nRe. the 0.3.0 release, I'm actually in the process of doing that (at long last), and this is how I came into this version problem. I saw your PR literaly seconds before typing `cargo publish` :-D" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518952283> <http://schema.org/startDate> "2019-08-07T05:58:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/518952283> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/13#issuecomment-518952283"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/519071259> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/519071259> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/519071259> <http://schema.org/description> "@pchampin Thanks for the release! Makes it much easier to use." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/519071259> <http://schema.org/startDate> "2019-08-07T12:17:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/519071259> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/13#issuecomment-519071259"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561095007> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561095007> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561095007> <http://schema.org/description> "@pchampin \r\nThe build fails because `Trait objects` with no `dyn` keyword where recently depricated and now raise warnings. Should I correct these with this PR or will this be solved soon?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561095007> <http://schema.org/startDate> "2019-12-03T10:08:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561095007> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/15#issuecomment-561095007"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561105438> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561105438> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561105438> <http://schema.org/description> "@MattesWhite thanks for this PR. I made some improvements to make it more \"idiomatic\" in 9079052. \r\nAlso, I had a very strange GIT error, which is why I didn't reuse your commit above." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561105438> <http://schema.org/startDate> "2019-12-03T10:33:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561105438> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/15#issuecomment-561105438"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561107031> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561107031> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561107031> <http://schema.org/description> "Thanks for your interest in this crate. And thanks to @MattesWhite for quickly responding with a proposal. I adapted the example and merged it.\r\n\r\nI leave this issue open, because I intend to add more examples later. But that will be after I integrate more parsers (Turtle, TriG...) from the https://github.com/Tpt/rio crate." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561107031> <http://schema.org/startDate> "2019-12-03T10:36:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561107031> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/14#issuecomment-561107031"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561109156> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561109156> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561109156> <http://schema.org/description> "@MattesWhite (sorry I didn't notice your previous message)\r\nYes, I intend to clean this soon." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561109156> <http://schema.org/startDate> "2019-12-03T10:41:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561109156> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/15#issuecomment-561109156"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561173102> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561173102> <http://schema.org/creator> <https://api.github.com/users/JordanShurmer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561173102> <http://schema.org/description> "Awesome! Thanks @MattesWhite" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561173102> <http://schema.org/startDate> "2019-12-03T13:42:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561173102> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/14#issuecomment-561173102"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561213470> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561213470> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561213470> <http://schema.org/description> "This is indeed something I'd like to add -- especially since I am involved in [JSON-LD 1.1](https://www.w3.org/TR/json-ld11/) :-)\r\n\r\nJSON-LD 1.1 is about to enter the [CR period](https://www.w3.org/2019/Process-20190301/#candidate-rec), which means that the spec is now stable, and implementations are called for.\r\n\r\nI'm aware of three projects in Rust (by decreasing order of recent activity):\r\n\r\n* https://github.com/lo48576/json-ld (looking more active)\r\n* https://github.com/kroeg/jsonld-rs\r\n* https://github.com/ct0r/jsonld.rs\r\n\r\nI'm willing to contribute to the first one, in order to help bring it to full compliance. Feel free to do so too, the more the merrier :-)\r\n\r\nOnce it is functional, I definitely plan to integrate it to sophia. Here again, any help is welcome." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561213470> <http://schema.org/startDate> "2019-12-03T15:17:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561213470> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/16#issuecomment-561213470"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561215927> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561215927> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561215927> <http://schema.org/description> "This will soon be the case; I am in the process of integrating https://github.com/Tpt/rio, which will bring capabilities for parsing (and serializing) Turtle and TriG, and make N-Triples and N-Quads parsing much faster than they are now...\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561215927> <http://schema.org/startDate> "2019-12-03T15:22:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561215927> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-561215927"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349385> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349385> <http://schema.org/creator> <https://api.github.com/users/JordanShurmer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349385> <http://schema.org/description> "Awesome. I had already opened an issue for JSON-LD through rio as well :)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349385> <http://schema.org/startDate> "2019-12-03T20:45:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349385> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-561349385"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349856> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349856> <http://schema.org/creator> <https://api.github.com/users/JordanShurmer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349856> <http://schema.org/description> "ok, awesome! glad to see things are all generally moving forward and what not. I'll start contributing as I can :)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349856> <http://schema.org/startDate> "2019-12-03T20:47:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561349856> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/16#issuecomment-561349856"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561350098> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561350098> <http://schema.org/creator> <https://api.github.com/users/JordanShurmer> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561350098> <http://schema.org/description> "I had not seen the 1.1 spec work before, so I'll be checking that out too." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561350098> <http://schema.org/startDate> "2019-12-03T20:47:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/561350098> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/16#issuecomment-561350098"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563916022> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563916022> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563916022> <http://schema.org/description> "That's a great idea... I'll do that. Thanks for your support and encouragements." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563916022> <http://schema.org/startDate> "2019-12-10T08:08:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563916022> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/18#issuecomment-563916022"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932468> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932468> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932468> <http://schema.org/description> "## Proposed solution (revamped)\r\n\r\nThinking about it a little more, I think that the right place to fix this is in [`graph::Inserter`](https://docs.rs/sophia/0.3.0/sophia/graph/struct.Inserter.html) and [`dataset::Inserter`](https://docs.rs/sophia/0.3.0/sophia/dataset/struct.Inserter.html) respectively.\r\n\r\nThere should actually be two implementations for each, `RawInserter` (current implementation) and `ScopedInserter` (which ensures that all blank nodes passed to the inserter will be created as fresh blank nodes, renaming them if needed). The methods `Graph::inserter` and `Dataset::inserter` should also be replaced accordingly by methods named `raw_inserter` and `scoped_inserter`.\r\n\r\nThe `in_graph`/`in_dataset` methods of sinks would use scoped inserters (as this is the most common use case). And I don't think (anymore) that a `*_raw` variant of these methods is required. If someone really wants to do that, they can still write:\r\n```\r\n    let inserted = my_source.in_sink(&mut my_graph.raw_inserter());\r\n```" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932468> <http://schema.org/startDate> "2019-12-10T08:55:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932468> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/1#issuecomment-563932468"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932743> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932743> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932743> <http://schema.org/description> "Here are a few :)\r\nI'll try to make a habit of this, to help the community help me :)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932743> <http://schema.org/startDate> "2019-12-10T08:56:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563932743> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/18#issuecomment-563932743"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563963795> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563963795> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563963795> <http://schema.org/description> "For [Oxigraph](https://github.com/Tpt/oxigraph) I have build a SPARQL parser and a SPARQL algebra representation.\r\n\r\nAlgebra: https://github.com/Tpt/oxigraph/blob/master/lib/src/sparql/algebra.rs\r\nParser: https://github.com/Tpt/oxigraph/blob/master/lib/src/sparql/sparql_grammar.rustpeg\r\nParser invocation: https://github.com/Tpt/oxigraph/blob/master/lib/src/sparql/parser.rs\r\n\r\nIt might be interesting to build it as a separated crate and make Sophia and Oxigraph depend on it, just like Rio.\r\n\r\nThe parser is a bit slow at the moment, I am planning to rewrite it using a more efficient parsing library, probably nom. But I plan to make a working 0.1 release of Oxigraph first." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563963795> <http://schema.org/startDate> "2019-12-10T10:14:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563963795> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-563963795"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563968613> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563968613> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563968613> <http://schema.org/description> "Thanks @Tpt for chiming in.\r\n\r\n> It might be interesting to build it as a separated crate and make Sophia and Oxigraph depend on it, just like Rio.\r\n\r\nI have considered this. But as I mentioned above, in sophia it would be more natural to reuse the `graph::Graph` to represent basic graph patterns, so this might not be the smoother way to go... I'm still open to ideas, though. The more work we can mutualize, the better." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563968613> <http://schema.org/startDate> "2019-12-10T10:26:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563968613> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-563968613"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563971430> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563971430> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563971430> <http://schema.org/description> "One way to do it could be to use [RockDB](https://rocksdb.org/). We could even try and use the same layout as used by [Oxigraph](https://github.com/Tpt/oxigraph), making it possible to share the same storage across both crates. @Tpt, what do you think? Is that layout documented somewhere?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563971430> <http://schema.org/startDate> "2019-12-10T10:33:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563971430> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/22#issuecomment-563971430"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563972666> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563972666> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563972666> <http://schema.org/description> "> The more work we can mutualize, the better.\r\n\r\nHuge +1. We could maybe have the parser in a separated crate with a fairly cheap algebra representation. Then Sophia could expose an easy to use algebra tree on top of it and Oxigraph could build from it its query plans.\r\n\r\nAn other way to go would be to have an \"rdf-api\" crate similar to what RDF/JS is doing for the RDF models and its commons extensions. And have Oxigraph and Sophia and hopefully the other RDF related libraries in Rust use it. But it might be hard to build a nice and efficient API without [GAT](https://github.com/rust-lang/rust/issues/44265)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563972666> <http://schema.org/startDate> "2019-12-10T10:36:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563972666> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-563972666"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563977806> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563977806> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563977806> <http://schema.org/description> "> An other way to go would be to have an \"rdf-api\" crate similar to what RDF/JS\r\n\r\nThis should probably be discussed in a separate thread. I created #23 for this. And yes, GAT would be a huge help in this direction." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563977806> <http://schema.org/startDate> "2019-12-10T10:50:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563977806> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-563977806"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563981310> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563981310> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563981310> <http://schema.org/description> "That would be great to make Sophia works with Oxigraph storage! The Oxigraph RockDB layout is not stable yet, I am currently tweaking it to make it a bit more compact and allow efficient range queries. I hope to have time finishing a 0.1 Oxigraph release with a stable RocksDB layout in late December or (more realistically) January.\r\n\r\nThe basic storage approach should not change: I store in RocksDB keys rotations of quads of [`EncodedTerm`](https://github.com/Tpt/oxigraph/blob/e0bbe29dc2377fc1277d4c232c9c26c90bd13551/lib/src/store/numeric_encoder.rs#L93) and a string store. RocksDB prefix searches are then used to solve triple patterns. The string store is used as an inverse hash lookup, the strings being hashed inside of `EncodedTerm`. Hashing strings is very useful for heavy SPARQL query evaluations with a lot of joins, it might not be the best approach for just storing and doing simple triple pattern evaluation.\r\n\r\nBut, I'm not sure that reimplementing Oxigraph storage in Sophia is the best way to do it. I fear than very quickly you might want also to be able to run SPARQL queries on top of it in Sophia, completely duplicating the work already done in Oxigraph. A better way to go would probably to make Oxigraph usable with Sophia." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563981310> <http://schema.org/startDate> "2019-12-10T11:00:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563981310> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/22#issuecomment-563981310"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563985808> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563985808> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563985808> <http://schema.org/description> "> Are there any design choices in Sophia's traits or underlying types which you find too opinionated or constraining?\r\n\r\nI would actually disagree with the goal of this question. I find a lot of Sophia traits not opinionated enough, having a lot of generic arguments making their use very cumbersome. Imho RDF libraries end users should not have to write any `for<'a>` or similar syntaxes like Sophia documentation suggests. Performance is good, making the library more complex to use to earn  1 extra percent is probably not worth it.\r\n\r\nI do not argue that we should end up with something like the small [model library of Oxigraph](https://github.com/Tpt/oxigraph/tree/master/lib/src/model) that is too opinionated and requires to many memory copies. An easy to use and to integrate middle ground is what we need.\r\n\r\nWe should maybe have a look at successful libraries like [http](https://crates.io/crates/http/) or [url](https://crates.io/crates/url/) that are used in a lot of very different places while keeping what I think is a fairly simple API." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563985808> <http://schema.org/startDate> "2019-12-10T11:12:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563985808> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/23#issuecomment-563985808"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563986392> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563986392> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563986392> <http://schema.org/description> "An other maybe interesting example is [cssparser](https://docs.rs/cssparser/) that is used by Servo, some SVG libraries and probably soon Gnome Shell." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563986392> <http://schema.org/startDate> "2019-12-10T11:14:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563986392> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/23#issuecomment-563986392"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563998845> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563998845> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563998845> <http://schema.org/description> "Granted, some trade-off are required between genericity and usability. I added a question in the initial description of the issue to acknowledge that.\r\n\r\nRe. [the `for <'a>` trick with the Graph trait](https://docs.rs/sophia/0.3.0/sophia/graph/trait.Graph.html#how-to-use-graph-in-a-trait-bound), it sucks, I totally agree with that. In my view, this was a temporary workaround until [generic associated types](https://github.com/rust-lang/rust/issues/44265) landed. But admittedly, this might take some time, and we might be better off without this extra layer of genericity. So... #24" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563998845> <http://schema.org/startDate> "2019-12-10T11:51:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/563998845> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/23#issuecomment-563998845"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564022470> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564022470> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564022470> <http://schema.org/description> "# Seperation of `sophia`\r\nIn order to provide a clear API, I agree with @Tpt (in [this](https://github.com/pchampin/sophia_rs/issues/19#issuecomment-563972666) comment).\r\nWe require to seperate `sophia` into sub-crates, like other Rust projects, e.g. `actix`, `tokio` or `crossbeam`.\r\nMy suggestion:\r\n* `sophia`: Re-exports the sub-crates (maybe feature-flagged)\r\n* `sophia-core`: Provides the most basic types like `Term` and base traits like `TermData` and `Triple`.\r\n  In addition, most basic traits are provided for extensions like `Graph` and `Parser`.\r\n* other crates depending on `sophia-core`\r\n  * `sophia-sparql`: Parser for SPARQL and engine that operates on `sophia-core::Graph`\r\n  * `sophia-nt`\r\n  * `sophia-xml`\r\n  * `sophia-rio`\r\n  * `sophia-hdt`\r\n  * etc..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564022470> <http://schema.org/startDate> "2019-12-10T13:02:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564022470> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/23#issuecomment-564022470"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564099498> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564099498> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564099498> <http://schema.org/description> "When talking about error-handling, what about the `coercible_error`.\r\n\r\nI can definetly see its use-case and the performance it could bring and I can understand that you want to use it as it was probably your first crate in Rust. But, it feels very unergonomic and produces a lot of noise. In addition, I think its performance boost is not as much as one might guess.\r\n\r\nA correctly designed error-enum should have not more than 24 bytes (two pointers and an extra 64 bit field on a 64-bit-machine). This shouldn't affect the overall memory requirement of an RDF-application.\r\n\r\nIn order to handle errors in an public API, it is totally okay to go with `Box<dyn Error + Send + Sync>` in my opinion. The improvements of the `std::error::Error`-trait allow downcasting it. In addition, a `Box` has only a size of 8 bytes.\r\n\r\nAn alternative would be using an own error-enum like:\r\n```Rust\r\nuse thiserror:Error as ThisError;\r\n\r\n#[derive(ThisError, Debug)]\r\nenum Error {\r\n    ... ,\r\n    #[error(External Error: {0})]\r\n    FromExtern(String),\r\n}\r\n\r\nimpl Error {\r\n    from_external<E: std::error::Error>(e: E) -> Self {\r\n        Error::FromExternal(e.to_string())\r\n    }\r\n}\r\n```\r\nThis way every implementor of a custom graph, parser, etc. could `impl From<ExternalError> for Error` easily." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564099498> <http://schema.org/startDate> "2019-12-10T15:55:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564099498> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-564099498"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564713416> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564713416> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564713416> <http://schema.org/description> "+1 for the separation of Sophia.\r\n\r\nBut, before going into that direction, we probably need to make an ecosystem choice. Do we want to have big integrated libraries like what exists in Java with Jena and RDF4J that does most of the things but are hardly interoperable between each other or do we want to have API crates providing  common interfaces and then have an ecosystem of libraries implementing them like what exists now in JavaScript with the RDF/JS community group work.\r\n\r\nI would be more inclined to prefer the second option that would then see the existence of different implementations targetting different use cases and able to work with each other. We could have an integrated toolkit (sophia), a quad store targetting performance (Oxigraph), a parser suite (Rio), a json-ld implementation... all able to be able to be used with each other.\r\n\r\nIf we go into the \"Sophia is the foundation\" direction, I am a bit concern with the choice of the CECILL-C license. The rust compiler currently statically link crates together, making the CECILL-C license viral if I understand it correctly. It might prevent reuse by for profit organizations, reducing significantly the reach of the library." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564713416> <http://schema.org/startDate> "2019-12-11T20:14:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/564713416> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/23#issuecomment-564713416"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565072755> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565072755> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565072755> <http://schema.org/description> "> A better way to go would probably to make Oxigraph usable with Sophia.\r\n\r\nYes, implementing Sophia's traits *above* Oxigraph is also a way to go, and probably the fastest one. I would be concerned, though, that converting from Oxigraph's model to Sophia's would induce some overhead, hence my initial proposal... But definitely worth a try, anyway." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565072755> <http://schema.org/startDate> "2019-12-12T16:09:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565072755> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/22#issuecomment-565072755"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565080428> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565080428> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565080428> <http://schema.org/description> "Re. traits vs. macros, big +1. Initially, I wanted to define a `Parser` trait, but was unabled to complete it and opted instead for the \"abstract interface\" + macros approach, but I am not entierly satisfied with it. So thanks for prompting me, I'll give it a try again.\r\n\r\nLeaving aside the trait vs. macro problem, what you propose above is actually very close to the current API, expect that what you call `Parser` is currently called `Config`. And this was a deliberate choice, because the actual *parser*, in my view, is only created when you call `parse_str` or `parse_read`. You mention \"storing state so they can lazily parse\" (which I think is what current implementations are doing), but such state (e.g. prefix bindings in Turtle) should not be shared across multiple calls of `parse_X`. The only thing that is really persistent here is, therefore, the parsing *configuration*, hence the current name.\r\n\r\nThat being said, I agree that this subtle semantic distinctions may bring more confusion than clarity. So we might as well bite the bullet and use the name everyone expects.\r\n\r\nTo sum it up: my plan is to replace the current `Config` \"protocol\" by a `Parser` trait, offering roughly the same interface." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565080428> <http://schema.org/startDate> "2019-12-12T16:28:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565080428> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/25#issuecomment-565080428"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565088750> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565088750> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565088750> <http://schema.org/description> "I also agree that \r\n* the `sophia` crate should be split in smaller crates (I was planning to do it eventually, anyway),\r\n* we should aim at small independent but interoperable components, rather than big monolithic systems.\r\n\r\nAgain, I think that the core of Sophia has the potential to play the role of a unified interface. Separating it *from the start* from the rest of the implementation would send a clearer message to the community, so that should probably go up my list of priorities. I'll do that before the next release." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565088750> <http://schema.org/startDate> "2019-12-12T16:48:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565088750> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/23#issuecomment-565088750"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565092486> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565092486> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565092486> <http://schema.org/description> "Regarding the licensing issue, thanks @Tpt for spotting that. What I'll probably do is change *at least* the license of `sophia-core` to a more permissive one, so that closed source implementations of the traits remain possible. For the other crates, I'll stick to CECILL-C by default, possibly opening some of them later." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565092486> <http://schema.org/startDate> "2019-12-12T16:57:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565092486> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/23#issuecomment-565092486"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565106711> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565106711> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565106711> <http://schema.org/description> "Actually, `coercible-error` was not my first crate. It was something developed for Sophia that I thought could be useful to others.\r\n\r\n> it feels very unergonomic \r\n\r\nDoes it? It pains we that you would think that, I spent quite some time to try and make it ergonomic...\r\n\r\n> and produces a lot of noise\r\n\r\nI cant deny that :-/ But most of the time, users would not be required to directly use it (the most verbose part are in trait methods with a default implementation).\r\n\r\nI agree that `Box<dyn Error + Send + Sync>` would be a good default in many places, and that the overhead would be minimal. But I find a little sad to renounce the \"Zero Cost Abstraction\" motto, when a solution can be made with (in my opinion) no too much added complexity." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565106711> <http://schema.org/startDate> "2019-12-12T17:32:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565106711> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-565106711"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820582> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820582> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820582> <http://schema.org/description> "I see now that this is to much change at once. As a result, I will close this PR.\r\n\r\nHowever, it is still a PoC for an alternative error-handling." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820582> <http://schema.org/startDate> "2019-12-15T15:41:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820582> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/27#issuecomment-565820582"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820962> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820962> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820962> <http://schema.org/description> "> Does it? It pains we that you would think that, I spent quite some time to try and make it ergonomic...\r\n\r\nSorry for that I don't wanted to be offensive. In addition, I removed my PR #27 as I have to admitt that this way was to aggresive and without a proper discussion... I deeply appologize for my inappropriate behavior." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820962> <http://schema.org/startDate> "2019-12-15T15:45:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565820962> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-565820962"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565824918> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565824918> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565824918> <http://schema.org/description> "As I still agree that my PR #27 was not good, I still use it as a proof of concept.\r\n\r\n## Cons of the current error handling\r\n\r\nThe main point I wanted to lay out was the seperation of errors. Instead of having one big `sophia::Error`, I support the idea of smaller errors. This allows for an easier integration of 'external' errors. \r\n\r\nAs laid out in #26 the plan is to build an ecosystem of crates that implement against `sophia-core`'s API. This means that there will probably be implementations we don't think of now that can and will fail in different ways. Consequently, `sophia` is required to allow and handle the integration of 'external' error-types.\r\n\r\nThe philosophy of `coercible-errors` is to force implementors to use a provided error-type (correct my if I got that wrong). The problem is that this provided error probably will not be sufficient for all use cases, as pointed out above. As a result, I think that `coercible-error` is not a suitable error-handling-strategy for the future 'center of the ecosystem' `sophia-core`.\r\n\r\n## Pros presented in #27\r\n\r\nIn difference, I showed an implementation of sophia with the rather new crates [`anyhow`](https://crates.io/crates/anyhow) and [`thiserror`](https://crates.io/crates/thiserror) ( see #27 ).\r\n\r\n`thiserror` is only used to build the module-own error-types. It was designed specific for this and is easy to use.\r\n\r\nThe `anyhow::Error` is a [\"better `Box<dyn Error + Send + Sync + `'static>`\"](https://docs.rs/anyhow/1.0.25/anyhow/struct.Error.html). It should only be used when different error-types could colide, e.g. when building a `Graph` from an `TriplesSource` which both can fail. In every other case a specific error should be returned.\r\n\r\nFurthermore, users will know which errors colide (\"I use the `TripleSource` from `NtParser` to build a `HashGraph`, accordingly the error is either `ParserError` or `HashGraphError`\"). Therefore, it should be possible for users to figure out which concrete error-types they can expect when they receive an `anyhow::Error`.\r\n\r\nAnother point is the weight of zero-cost error-handling. While it is true that `coercible-errors` allow to use zero-sized errors, the effect is mitigated due to the size of `anyhow::Error` as it is only a narrow-pointer, i.e. the size of a word.\r\n\r\n## Conclusion\r\n\r\nWhile it is true that in some cases `coercible-errors` saves memory this benfit is mitigated by the good implementation of `anyhow`. Instead, an implementation with module-own error-types and `anyhow` allows a lot more easy integration of 'external' error-types into the `sophia`-ecosystem. Besides, with the soon [stabilization of the `never`-type](https://github.com/rust-lang/rust/pull/65355) the compiler will become better at handling infallible operations by itself.\r\n\r\n---\r\n\r\nWhat is your opinion about that? I would be glad if we could continue this discussion. If we can agree on an implementation I will gladly submit a PR." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565824918> <http://schema.org/startDate> "2019-12-15T16:32:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565824918> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-565824918"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565848667> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565848667> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565848667> <http://schema.org/description> "> Sorry for that I don't wanted to be offensive.\r\n\r\nNo offense taken, don't worry :-) \r\n\r\n> [pros & cons] What is your opinion about that?\r\n\r\nNow, regarding `coercible-error`: I am convinced by the \"one error per module\" approach, especially in the future plan of splitting `sophia` into several crates. And indeed, this is incompatible with `coercible-error`'s philosopy. +1 on getting rid of it.\r\n\r\nI had a look at `thiserror` and I like it very much. +1 on using it.\r\n\r\nI have more doubts about `anyhow`, though. It is explicitly targeted at *applications*, as opposed to *libraries*, and `sophia` is the latter. I have a counter proposal below.\r\n\r\n## Alternative to `anyhow` or `Box<dyn Error>`\r\n\r\nThe only place (I think) where we would need such a \"generic\" errors it is with (triple or quad) streams. The source and the sink can each have their own error type, and so the operation should be able to return one or the other.\r\n\r\nI suggest we introduce (in the `triple::stream` module) the following type (with the appropriate `thiserror`  annotations)\r\n```rust\r\nenum StreamError<E1, E2> {\r\n  UpStream{ source: E1 },\r\n  DownStream{ source: E2 },\r\n}\r\n```\r\n\r\nSeems to me that this type has the best of both worlds from `coercible-error` and `anyhow`:\r\n\r\n* it takes 0 bytes if E1 and E2 are both impossible types,\r\n* its `source` method will always return a `dyn Error` which can be dynamically downcast,\r\n* bonus: it can also be statically downcast with a simple `match`...\r\n\r\nGranted, the return type of stream methods (such as `in_sink` and `in_graph`) will be slightly more verbose than with `anyhow`, but at least it is (I think) idiomatic and easily understandable." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565848667> <http://schema.org/startDate> "2019-12-15T21:28:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565848667> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-565848667"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849174> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849174> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849174> <http://schema.org/description> "Thought: I think the smoothest way to contribute to this issue would be to keep the global `error` module untouched, but gradually add module-specific errors in each module that need it (one PR per module or group of related modules). Then, when the global `error` module is not used anywhere, get rid of it.\r\n\r\nThe first module to patch would probably be the `triple::stream` and `quad::stream` modules, should the proposal above be agreed upon." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849174> <http://schema.org/startDate> "2019-12-15T21:34:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849174> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-565849174"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849254> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849254> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849254> <http://schema.org/description> "Hi @MattesWhite, thanks very much for the work you put in this. And thanks for pushing me forward ;-)\r\n\r\nThis was indeed too big a change. Please make smaller PRs so that we can discuss each change individually.\r\n\r\nAlso, I have a few commits stalling on my machine (my bad, I should not do that either), which will make it very hard to merge such big changes. I'll push them now. In particular, have a look at the new `triple::stream` module, which should make it clearer why I am not using iterators." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849254> <http://schema.org/startDate> "2019-12-15T21:35:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565849254> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/27#issuecomment-565849254"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565934935> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565934935> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565934935> <http://schema.org/description> "Great! The `StreamError` is a brilliant idea. I also agree with the 'one module at a time' strategy.\r\n\r\nI would only name `StreamError`'s variants a bit different.\r\n```Rust\r\nenum StreamError<SErr, TErr> {\r\n    Source { source: SErr },\r\n    Target { source: TErr },\r\n}\r\n```\r\nThis way it is more obvious if a error was raised by the `TripleSource` or the consumer of it.\r\n\r\nAnother candidate that came into my mind is the [`either`-crate](https://crates.io/crates/either). It is basically a sum type like the suggested `StreamError` but is not implemented specific as an error type. However, it provides some nice utility functions. I think it will serve as a good template when implementing `StreamError`.\r\n\r\nWhen I have some time I would write a PR if it's okay for you." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565934935> <http://schema.org/startDate> "2019-12-16T07:16:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565934935> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-565934935"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948270> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948270> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948270> <http://schema.org/description> "I suggest we introduce (in the `triple::stream` module) the following type (with the appropriate `thiserror`  annotations)\r\n```rust\r\nenum StreamError<E1, E2> {\r\n  UpStream{ source: E1 },\r\n  DownStream{ source: E2 },\r\n}\r\n```\r\n\r\nSeems to me that this type has the best of both worlds from `coercible-error` and `anyhow`:\r\n\r\n* it takes 0 bytes if E1 and E2 are both impossible types,\r\n* its `source` method will always return a `dyn Error` which can be dynamically downcast,\r\n* bonus: it can also be statically downcast with a simple `match`...\r\n\r\nGranted, the return type of stream methods (such as `in_sink` and `in_graph`) will be slightly more verbose than with `anyhow`, but at least it is (I think) idiomatic and easily understandable.\r\n\r\n_Originally posted by @pchampin in https://github.com/pchampin/sophia_rs/issues/8#issuecomment-565848667_" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948270> <http://schema.org/startDate> "2019-12-16T08:00:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948270> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/28#issuecomment-565948270"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948527> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948527> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948527> <http://schema.org/description> "Great! The `StreamError` is a brilliant idea. I also agree with the 'one module at a time' strategy.\r\n\r\nI would only name `StreamError`'s variants a bit different.\r\n```Rust\r\nenum StreamError<SErr, TErr> {\r\n    Source { source: SErr },\r\n    Target { source: TErr },\r\n}\r\n```\r\nThis way it is more obvious if a error was raised by the `TripleSource` or the consumer of it.\r\n\r\nAnother candidate that came into my mind is the [`either`-crate](https://crates.io/crates/either). It is basically a sum type like the suggested `StreamError` but is not implemented specific as an error type. However, it provides some nice utility functions. I think it will serve as a good template when implementing `StreamError`.\r\n\r\nWhen I have some time I would write a PR if it's okay for you.\r\n\r\n_Originally posted by @MattesWhite in https://github.com/pchampin/sophia_rs/issues/8#issuecomment-565934935_" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948527> <http://schema.org/startDate> "2019-12-16T08:01:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565948527> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/28#issuecomment-565948527"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565951586> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565951586> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565951586> <http://schema.org/description> "### Terminology\r\n\r\nIf we want to be consistent, the variants should be `Source`/`Sink` rather than `Source`/`Target`.\r\n\r\nI find `UpStream`/`DownStream` explicit enough, and a little more general (at some point, we might introduce other parts of a stream, such as a *filter*)... But this might be over-anticipating ;-) So I'm fine with your proposal as well (modulo the adjustment above).\r\n\r\n### The `either` crate\r\n\r\nThe main drawback I see in the `either` crate is that it does not implement `std::error::Error`. And I'm not sure how much all the other methods it provides are useful in our case.\r\n\r\nI would rather stick to our own type, and add some utility methods to it when we need them...\r\n\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565951586> <http://schema.org/startDate> "2019-12-16T08:11:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565951586> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/28#issuecomment-565951586"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565952033> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565952033> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565952033> <http://schema.org/description> "I moved the `coercible-error`/`StreamError` debate into another issue, as this is somewhat orthogonal to this one.\r\n\r\n> When I have some time I would write a PR if it's okay for you.\r\n\r\nBe my guest :-) Do you mind if I assign those issues to you?\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565952033> <http://schema.org/startDate> "2019-12-16T08:12:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/565952033> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/8#issuecomment-565952033"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566467745> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566467745> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566467745> <http://schema.org/description> "Okay I have no idea why Travis failed. The log seems like it has built an old version of the parser-module? Did I something wrong at commiting?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566467745> <http://schema.org/startDate> "2019-12-17T09:53:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566467745> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/29#issuecomment-566467745"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566476762> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566476762> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566476762> <http://schema.org/description> "I'm assuming you didn't use the `--all-features` option when you ran the tests locally. So you are missing the feature-gated parts of the code (which, it seems, still refer to `coercible-error`).\r\n\r\nI'm about to make a reviw of your PR, so you might want to wait for my comments before putting further work in iit. All in all, this is good, but there are a few changes that I'd like to suggest." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566476762> <http://schema.org/startDate> "2019-12-17T10:16:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/566476762> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/29#issuecomment-566476762"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567153382> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567153382> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567153382> <http://schema.org/description> "Removing lifetimes on Tripe and Quad is easy. I have a local branch that I'll push soon, where this is done.\r\n\r\nFor Graph and Dataset, this is more tricky. The problem comes from the fact that Graph::Triple, which is the type returned by the iterating methods (triples, triples_with_s, etc.) sometimes needs a lifetime, especially when one wants the iterator to return *references* to internal triples owned by the graph. This is something that I would like to keep.\r\n\r\nAs mentioned [elsewhere](https://github.com/pchampin/sophia_rs/issues/23#issuecomment-563998845_), the cleanest solution would be generic associated types (GAT), but those are not expected to be stabilized before long...\r\n\r\nI have experimented with another approach, which tries to emulate somehow GAT, by using pointers under the hood, hence eschewing lifetime parameters, and wrapping them in a safe abstraction. I tried my best to make this approach easy enough for implementors of the Graph trait (although the documentations is still rough at the edges).\r\n\r\nhttps://gist.github.com/pchampin/7fbf3262ab22b6a0f6a6eae8a6aa938c\r\n\r\n@Tpt @MattesWhite anyonelse... your feedback would be much appreciated" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567153382> <http://schema.org/startDate> "2019-12-18T18:28:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567153382> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24#issuecomment-567153382"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567434129> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567434129> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567434129> <http://schema.org/description> "Your solution seems suitable.\r\n\r\n* One minor disadvantage I see is the cost of extra wrapping of newly created triple but maybe the compiler is smart enough to optimize that away.\r\n* What definitley must be document is that this is just a temporary solution until GATs arrive.\r\n* A small suggestion I have to make: When implementors see that they have to return `GuradedTriples` they will probably have first a look at the docs of the type. As a consequence, I would move the constructors to the type itself.\r\n* Your implementation exposes the raw pointers to the user/implementor. [Here](https://gist.github.com/MattesWhite/f5daf2d38d36c4e325e00cbb41ec59e8) is a version with a complete safe API and without `UnsafeTriple`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567434129> <http://schema.org/startDate> "2019-12-19T10:35:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567434129> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24#issuecomment-567434129"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567438066> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567438066> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567438066> <http://schema.org/description> "I like @MattesWhite solution. A maybe dumb comment: are the NotNull pointers actually required in your solution? I believe you could do it with just references (but maybe I'm wrong)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567438066> <http://schema.org/startDate> "2019-12-19T10:47:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567438066> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24#issuecomment-567438066"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567478698> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567478698> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567478698> <http://schema.org/description> "Well, this is not a dumb question 😁 . Indeed, they are not needed. I updated to a version with zero unsafe code.\r\n\r\nBTW with the removal of everything unsafe the name `GuardedTriple` is not suitable anymore. Maybe something like `WrappedTriple` or `GraphTriple` would be better." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567478698> <http://schema.org/startDate> "2019-12-19T12:56:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567478698> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24#issuecomment-567478698"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567491658> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567491658> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567491658> <http://schema.org/description> "> Maybe something like WrappedTriple or GraphTriple would be better.\r\n\r\nThis type looks a lot like `Cow` from `std`. I am also not sure that the variant `BorrowedTriple` is useful: it should be easy and cheap to convert it to `BorrowedTerms`. If we also make the subject, predicate and object explicit, we would have a type `Triple` that would be an owned only triple, and `TripleCow` that is `Cow` for triples (and maybe `TripleRef` for the cases where just references are enough)? This way we get something that woulbe be very similar to `String` `str` and `Cow<str>` or `PathBuf`, `Path` and `Cow<Path>`.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567491658> <http://schema.org/startDate> "2019-12-19T13:34:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567491658> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24#issuecomment-567491658"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567638239> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567638239> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567638239> <http://schema.org/description> "> Your solution seems suitable.\r\n\r\nCool :)\r\n\r\n> * One minor disadvantage I see is the cost of extra wrapping of newly created triple but maybe the compiler is smart enough to optimize that away.\r\n\r\nMy solution has zero overhead in memory (PhantomData is 0-sized) and in runtime (provided the appropriate `#[inline]` annotations). Yours (with an enum) does induce an overhead. More below.\r\n\r\n> * What definitley must be document is that this is just a temporary solution until GATs arrive.\r\n\r\nAbsolutely. I wouldn't hold my breath, though... GATs have been mentioned for a while now.\r\n\r\n> * A small suggestion I have to make: When implementors see that they have to return `GuradedTriples` they will probably have first a look at the docs of the type. As a consequence, I would move the constructors to the type itself.\r\n\r\nVery good point. The current approach (with method) evolved organically from previous attempts, but the constructor approach is much cleaner.\r\n\r\n> * Your implementation exposes the raw pointers to the user/implementor. [Here](https://gist.github.com/MattesWhite/f5daf2d38d36c4e325e00cbb41ec59e8) is a version with a complete safe API and without `UnsafeTriple`.\r\n\r\nActually, the raw pointers are hidden inside the GuardedTriple; neither implementors nor users will actually *handle* the pointers directly. Only a very daring implementor may have to write `unsafe` sections if they are not satisfied with the 3 provided options, and decide to add their own implementation of UnsafeTriple. Which the documentation will clearly discourage.\r\n\r\nNow, regarding your variant: by using enums, you are introducing memory overhead (the enum takes as much space as the biggest variant), and runtime overhead (each call to triple methods will go through the `match` statement). My approach relies on [monomorphisation](https://doc.rust-lang.org/book/ch10-01-syntax.html#performance-of-code-using-generics).\r\n\r\nIf we were to accept a small overhead, there would be no need for this complex approach. We could simply go for dynamic dispatching with trait objects:\r\n```rust\r\ntrait Graph {\r\n    // note that the associated type Triple has vanished\r\n\r\n    fn triple<'s>(&'s self) -> Box<dyn Iterator<Item=Box<dyn Triple + 's>> + 's>\r\n    //                                               ^^^^^^^^^^^^^^^^^^^^\r\n    //                                               this is the big change\r\n}\r\n```\r\n\r\nI have considered this option. But, as I expressed before, I find it sad to renounce zero-cost abstract so close to the goal. And the proposed approach will allow for a smooth transition when GAT finally land (basically replace the associated type `Triple = *const T` with `Triple<'t> = &'t T`). So I think it is worth the (temporary and relatively light) hassle.\r\n\r\n(sorry for the long answer)\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567638239> <http://schema.org/startDate> "2019-12-19T19:53:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567638239> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24#issuecomment-567638239"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567812551> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567812551> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567812551> <http://schema.org/description> "@MattesWhite is this ready for merge? (guessing so, but just checking)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567812551> <http://schema.org/startDate> "2019-12-20T06:51:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567812551> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/29#issuecomment-567812551"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567816184> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567816184> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567816184> <http://schema.org/description> "Yes its ready 👍" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567816184> <http://schema.org/startDate> "2019-12-20T07:04:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567816184> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/29#issuecomment-567816184"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567844840> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567844840> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567844840> <http://schema.org/description> "Ok, I'll try to do it during the week-end. And I'll also try to push and merge my work on #24. The latter is impacting almost all files in the repo, so I advice you don't start any work until it's done -- merging it afterwards would be hell.\r\nThanks again for your help." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567844840> <http://schema.org/startDate> "2019-12-20T08:50:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/567844840> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/29#issuecomment-567844840"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568001921> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568001921> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568001921> <http://schema.org/description> ">  neither implementors nor users will actually handle the pointers directly.\r\n\r\nOf course but the types-signatures include raw pointers. Maybe it is already enough to hide them behind a typedef, e.g. \r\n```\r\ntype BorrowedTriple<T> = *const T;\r\n```\r\n\r\nIf I think further this might be a nice expressive way. Change the associated type of `Graph` to something linke `type IteratorTriple: TripleOrigin;` with:\r\n```\r\ntrait TripleOrigin: Triple {}\r\n\r\ntype CreatedTriple<T> = T;\r\ntype StoredTriple<T> = *const T;\r\ntype StoredTerms<TD> = [*const Term<TD>; 3];\r\n\r\n// respective impls of TripleOrigin for the types\r\n```\r\nDon't know if this realy works because I'm on mobile but I wanted to wright this thought down." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568001921> <http://schema.org/startDate> "2019-12-20T17:02:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568001921> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24#issuecomment-568001921"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568254441> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568254441> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568254441> <http://schema.org/description> "Now I had some time to test out my proposal. Here are the results:\r\n\r\nhttps://gist.github.com/MattesWhite/f5daf2d38d36c4e325e00cbb41ec59e8#file-sophia_experiment_zero-rs\r\n\r\nThe most notable difference is that I use _new-types_ instead of typedefs to declare the `TripleOrigin`s. As they induce no memory-overhead (jsut like `GuradedTriple`) they are zero-cost abstractions as-well.  In addition, they provide an expressive way for implementors to tell them what to do." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568254441> <http://schema.org/startDate> "2019-12-22T11:39:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568254441> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24#issuecomment-568254441"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568472512> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568472512> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568472512> <http://schema.org/description> "That's roughly what I'm planning to do. I'm not decided on the terminology, though. I want to make easy to understand by implementors of the `Graph`/`Dataset` traits." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568472512> <http://schema.org/startDate> "2019-12-23T13:17:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/568472512> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/24#issuecomment-568472512"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572144196> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572144196> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572144196> <http://schema.org/description> "Great PR :+1: , but... bad timing :-/ I was myself working on the parser module, which created some conflicts...\r\n\r\nThis should not be to hard to fix, though, since\r\n* `nt.rs` is now the old `rio_nt.rs`, which you didn't touch\r\n* `rio_common.rs` is now calling the unchecked constructors (Rio does the checking) so no TermError handling is required there anymore.\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572144196> <http://schema.org/startDate> "2020-01-08T16:19:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572144196> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/30#issuecomment-572144196"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572462054> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572462054> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572462054> <http://schema.org/description> "Looking good!\r\nFor keeping the history clean, would you mind submitting a new PR rebased on top of master, either with `rebase -i` or maybe just a single commit with all your changes (they are focused enough)... Sorry for the trouble..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572462054> <http://schema.org/startDate> "2020-01-09T09:06:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572462054> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/30#issuecomment-572462054"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572469432> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572469432> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572469432> <http://schema.org/description> "As far as I know you can select to [squash and merge](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/merging-a-pull-request#merging-a-pull-request-on-github) a PR which squashes all commits of the PR into a single one. \r\n\r\nFurther reading:\r\n\r\n- [Squash and Merge](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-merges#squash-and-merge-your-pull-request-commits)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572469432> <http://schema.org/startDate> "2020-01-09T09:24:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572469432> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/30#issuecomment-572469432"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572505132> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572505132> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572505132> <http://schema.org/description> "Good idea. I am not sure how/if it works when the PR has intermediate merges, but it's worth a try." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572505132> <http://schema.org/startDate> "2020-01-09T10:47:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572505132> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/30#issuecomment-572505132"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572639722> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572639722> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572639722> <http://schema.org/description> "> At investigating GraphAsDataset<G, H> I recognized that the second parameter H is used nowhere\r\n\r\nActually, it *is* used. GraphAsDataset does not wrap a G(raph) but a Borrow<G> (which is the trait bound on H). So you can decide to wrap either an owned graph or a simple reference to a graph.\r\n\r\n> It seems to me that the mods parser and serializer are currently adapted to the rio crates.\r\n\r\nNot sure what makes you think that... I tried to keep rio-specific code in rio_common.rs and all the parsers that are now based on rio (nt, nq, turtle, trig, ntrig), but parser.rs and serializer.rs are meant to be agnostic. If they are not, this is a bug.\r\n\r\n> Is this work finished and I can continue refactoring the error handling or should I wait?\r\n\r\nI won't be able to work on it in the next week or two, so you are free to go. That being said, may be it would make sense to wait until theses modules are refactored to expose proper traits (as you suggested in #25)..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572639722> <http://schema.org/startDate> "2020-01-09T16:28:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572639722> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/31#issuecomment-572639722"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572640721> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572640721> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572640721> <http://schema.org/description> "Apart from all that, I like what's in this PR. Do you want me to merge it now, or do you plan to include the symetrical work in `dataset` before? (I'm asking because the title of this PR is hinting at it, not to force you into more work... :sweat_smile:)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572640721> <http://schema.org/startDate> "2020-01-09T16:30:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572640721> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/31#issuecomment-572640721"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572644696> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572644696> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572644696> <http://schema.org/description> "Actually the work for `dataset` *is* done. Every existing implemtation of `Dataset` uses `Infallible` as error (except `GraphAsDataset` 😉) so far. Therefore, there is nothing to be done. " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572644696> <http://schema.org/startDate> "2020-01-09T16:39:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572644696> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/31#issuecomment-572644696"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572645491> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572645491> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572645491> <http://schema.org/description> "The discussions about #8 may have impact on this issue. We actually have two options:\r\n\r\n1. define a dedicated `sophia::parser::Error` which would replace the `ParserError` variant of the current global error type (with its location attribute to know where the error happened), or\r\n2. let each parser have their own error type, exposed through an associated type, just like `Graph` and `Dataset`.\r\n\r\nThe second option is more light-weight, but then we lose the ability to uniformly get the location of the error. This could be mitigated by requiring `Parser::Error` to implement a `WithLocation` trait that would be defined in the `parser` module...\r\n\r\nI think I like option 2 + `WithLocation` trait better. Any opinion?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572645491> <http://schema.org/startDate> "2020-01-09T16:40:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572645491> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/25#issuecomment-572645491"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572647537> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572647537> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572647537> <http://schema.org/description> "Maybe have a look at the `nom` crate. They spent quiet efford into improving parser errors in their last major update.\r\n\r\nCan't provide further material as I'm on mobile" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572647537> <http://schema.org/startDate> "2020-01-09T16:44:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572647537> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/25#issuecomment-572647537"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572659325> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572659325> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572659325> <http://schema.org/description> "Ok cool, merging at once.\r\n\r\nAfter all, I *am* working now on the parser module, so you might want to wait a little bit before touching it..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572659325> <http://schema.org/startDate> "2020-01-09T17:08:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572659325> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/31#issuecomment-572659325"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572787809> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572787809> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572787809> <http://schema.org/description> "Commit 9af95c5 is an attempt to address this issue. @MattesWhite , let me know if you are satisfied with it, and if so, feel free to close this issue.\r\n\r\nNote that parsers are almost rid of the global error types; only the RDF/XML parser still depends on it, because changing that would involve a substantial refactoring..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572787809> <http://schema.org/startDate> "2020-01-09T22:33:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572787809> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/25#issuecomment-572787809"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572799900> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572799900> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572799900> <http://schema.org/description> "Hi @JordanShurmer,\r\ncommit f3ed2f8 introduced the Rio based parsers, bringing Turtle support (among other format). Let me know if this satisfies your need, and if so, feel free to close this issue (unless you want to wait for a release to do so...)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572799900> <http://schema.org/startDate> "2020-01-09T23:13:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572799900> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-572799900"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572937354> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572937354> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572937354> <http://schema.org/description> "Nice work this should satisfy the most use cases.\r\n\r\nThe only thing that bothers me is the `WithLocation`-trait. I'm not sure if it is realy needed. All relevant parsers I know (`nom`, `pest`, `rio`) provide their own way of specifing location of an error. Each way differs somewhat but they are part of an error type **and** their textual representation. \r\nIn addition, I think the information is only relevant for RDF that is written by hand. RDF that was created by a seriallizer shouldn't contain formal errors and implementing a serializer that corrects its serialization based on errors from a parser seems not to be realistic. In fact, the only one that benefits from locating an error are humans. As a result, there is no need to include `Location` as part of the parser-api as a good parser will include it anyway.\r\n\r\nAn alternative to removing `WithLocation` would be to introduce something like `DisplayWithSource` which would print return a pretty print of the wrong area with further information (cf the [`chic`](https://docs.rs/chic/1.2.2/chic/)-crate) (kinda the `rustc` error messages). However, this is only realy applicable for `String`-based parsers." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572937354> <http://schema.org/startDate> "2020-01-10T08:57:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/572937354> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/25#issuecomment-572937354"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573014369> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573014369> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573014369> <http://schema.org/description> "> All relevant parsers I know (nom, pest, rio) provide their own way of specifing location of an error.\r\n\r\nThey all provide it, so it is reasonable to require this from any parser (and anyway, `Location` has an `Unknown` variant for the rare cases where this information would not be available).\r\n\r\nThey all provide it in their own way, so there is some value in unifying that with a unique trait (see more below).\r\n\r\n> In fact, the only one that benefits from locating an error are humans.\r\n\r\nI could not disagree more. Take for example any good text editor or IDE: they use this information to provide highlighting and navigation. Ok, they are usually parsing textual representations to extract the location information, but if they could get it more directly, why prevent them to do so?\r\n\r\nSo sorry, but I still vote to keep `WithLocation`... And that does not preclude using something like [chic](https://docs.rs/chic/1.2.2/chic/) for generating higher-level, user-facing errors. On the contrary, the information extracted from `WithLocation` will be useful in this scenario.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573014369> <http://schema.org/startDate> "2020-01-10T12:20:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573014369> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/25#issuecomment-573014369"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573585453> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573585453> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573585453> <http://schema.org/description> "> Take for example any good text editor or IDE\r\n\r\nOkay, I missed that use-case. It is okay for me to keep `WithLocation`. I only wanted to express that this is maybe a bit to much of unification. \r\n\r\nTo sum up, the design of the new `Parser`-trait is okay and definetly an improvement compared to the macro-solution before. Therefore, I consider this issue resolved. I will now start on refactoring the error handling of the XML parser." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573585453> <http://schema.org/startDate> "2020-01-13T09:59:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573585453> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/25#issuecomment-573585453"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573589690> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573589690> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573589690> <http://schema.org/description> "What about a Turtle serializer? Are there any attemps? I see that `rio` has a `TurtleFormatter` but it seems to me far from beeing usable." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573589690> <http://schema.org/startDate> "2020-01-13T10:10:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573589690> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-573589690"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573599990> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573599990> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573599990> <http://schema.org/description> "@MattesWhite you are right, we should not close this issue without a Turtle *serializer* as well.\r\n\r\nMy plan was to use `rio`'s formatters for that, but have not looked into it in details... However, if they are not satisfactory, I would be in favor of improving them rather than starting a different code base." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573599990> <http://schema.org/startDate> "2020-01-13T10:37:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573599990> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-573599990"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573600323> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573600323> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573600323> <http://schema.org/description> "Thanks :)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573600323> <http://schema.org/startDate> "2020-01-13T10:38:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/573600323> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/25#issuecomment-573600323"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574181064> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574181064> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574181064> <http://schema.org/description> "To be honest, there are about 50 lines of code dedicated to the Turtle formatter with no signs of prefixes, abbreviated numerical literals, nested anonymous blank nodes and so on. Basically the formatter is not existent. Furthermore, `rio` itself lacks a `Graph` which is necessary at least to print nested blank nodes [[Jena doc](https://jena.apache.org/documentation/io/rdf-output.html#streamed-block-formats)]. In addition `rio` itself is labeled as\r\n\r\n> RDF parsers library \r\n\r\nSo I think there won't be any progress in the near future. \r\n\r\n---\r\n\r\nIn my opinion, the best solution is to write a serializer specifically for the `sophia-core` API. At least to provide a basic serializer that is not NTriples.\r\n\r\nFor me the lack of a practical serializer is a blocking issue for the adoption of Rust in the Semantic Web. Therefore, the Turtle serializer has the highest priority for me and I wouldn't mind contributing the first external crate to `sophia`'s ecosystem (after we're done refactoring the error-handling).\r\n\r\n---\r\n\r\n@Tpt What do you have to say about this topic and my estimations?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574181064> <http://schema.org/startDate> "2020-01-14T13:45:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574181064> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-574181064"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574213496> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574213496> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574213496> <http://schema.org/description> "Indeed, the current Rio formatters are very basic. I wrote them in a few hours to have something working for Oxigraph. I did not put much effort into them.\r\n\r\nOne of my dream for Rio would be to add a second parser/formatter API additionally to the current triples/quads iterations that would encodes the syntax level structures like prefixes used, nested blank nodes, RDF lists... This would allow to convert between RDF representations while keeping as much structure as possible and allow Rio users to control how the content is rendered. This API would probably look like a stream of event like \"open nested blank node\", \"add predicate\" \"add subject\" \"close predicate\", \"open list\"...  But I do not think I'll work on it anytime soon. I am trying to push a first working version of Oxigraph at the moment.\r\n\r\nSo, if you want to have now a Turtle formatter highly integrated with what Sophia is currently offering I believe that writing a Turtle formatter inside of Sophia makes a lot of sense." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574213496> <http://schema.org/startDate> "2020-01-14T14:58:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574213496> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-574213496"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574358853> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574358853> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574358853> <http://schema.org/description> "Thanks @Tpt for this answer. I guess we can give it a try inside Sophia first, and possibly port it to Rio if you like it.\r\n\r\nI'm not sure we need something as sophisticated as the events you suggest. The way I see it, a Turtle serializer would be initialized with a base and a set of prefixes, and would then receive a stream of triples. It would serializer the triples in order, doing its best to keep it compact (using base, prefixes, and subject/predicate repetitions).\r\n\r\nThe trick would then be to generate a serializer-friendly triple-stream . This part could be implemented by extension-traits around Graph/Dataset (and as such, could not easily be integrated in Rio)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574358853> <http://schema.org/startDate> "2020-01-14T20:29:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574358853> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-574358853"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574535663> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574535663> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574535663> <http://schema.org/description> "I agree with the streaming Turtle serializer. Indeed, this would be for me the MVP required.\r\n\r\nFor generating better Turtle I would suggest providing two serializers. The first for serializing streams and the second borrows a `Graph` (`Dataset` for TriG) completly, so it can analyze triples thoroughly. For example, only make a nested blank node if it is only mentioned as object in one triple or identifying where a list can be put.\r\n\r\nRegarding putting the serializer into `sophia`. The current plan is to split `sophia` into a core API and crates implementing the provided interface (see #23 , #26 ). In addition, the implementation of a Turtle serializer (and related formats) will probably require several days (weeks, months...) of investment. Therefore, I'm not that into the idea doing all the work as one big (or several minor) PR. Accordingly, I'll setup my own project following the philosophy of #23 . Don't worry, I will continue to contribute to `sophia`. Especially, developing the serializer API." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574535663> <http://schema.org/startDate> "2020-01-15T07:41:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574535663> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-574535663"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574756259> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574756259> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574756259> <http://schema.org/description> "> For generating better Turtle I would suggest providing two serializers. [...]\r\n\r\nSounds like a good idea.\r\n\r\n> In addition, the implementation of a Turtle serializer (and related formats) will probably require several days (weeks, months...) of investment.\r\n\r\nProbably. So indeed, my priority is now on #26.\r\n\r\n> Don't worry, I will continue to contribute to `sophia`\r\n\r\nthanks :-)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574756259> <http://schema.org/startDate> "2020-01-15T17:03:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574756259> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/17#issuecomment-574756259"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574861363> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574861363> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574861363> <http://schema.org/description> "Hi, thanks for your interest in `sophia`.\r\n\r\nThanks also for spotting this bug (`namespace!` not being usable outside `sophia`). It made me realize a deeper issue about exposing this macro: it is conceptually unsafe. More precisely, it statically builds Iris, without any check that they are valid. I prefer to keep it that way to avoid an overhead caused by the `ns` submodules, but that should be documented.\r\n\r\nThe solution to your problem (that does not involve publicly exposing `IriData` fields) would be to create a new constructor `pub const unsafe IriData::from_raw_parts`, and call this constructor in `ns_tem!` instead of setting the fields directly.\r\n\r\n> btw, I am a neophyte Rust programmer\r\n\r\nI've been there not so long ago, and honestly, I still have much to learn ;-) Welcome onboard.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574861363> <http://schema.org/startDate> "2020-01-15T21:20:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574861363> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/33#issuecomment-574861363"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574863300> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574863300> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574863300> <http://schema.org/description> "Oh, piece of advice: never make a pull request with your `master` branch. If your pull request is rejected (and this one might well be...) your `master` branch becomes irreconcilable with the origin repository... You should always create a dedicate branch for a pull request." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574863300> <http://schema.org/startDate> "2020-01-15T21:25:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574863300> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/33#issuecomment-574863300"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574867291> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574867291> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574867291> <http://schema.org/description> "commit 3ce6c6c implements the better approach suggested above\r\n\r\nBut again, thanks for spotting this and hinting at a solution :-)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574867291> <http://schema.org/startDate> "2020-01-15T21:36:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/574867291> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/33#issuecomment-574867291"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/575152963> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/575152963> <http://schema.org/creator> <https://api.github.com/users/dwhitney> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/575152963> <http://schema.org/description> "Thanks!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/575152963> <http://schema.org/startDate> "2020-01-16T13:33:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/575152963> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/33#issuecomment-575152963"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/576148916> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/576148916> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/576148916> <http://schema.org/description> "What about merging this PR? As @althonos already 'thumb uped' this PR I guess he agrees to this." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/576148916> <http://schema.org/startDate> "2020-01-20T07:50:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/576148916> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/32#issuecomment-576148916"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577152280> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577152280> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577152280> <http://schema.org/description> "Sorry, the thumbs up didn't generate any notification, so I hadn't noticed it :) Good for me." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577152280> <http://schema.org/startDate> "2020-01-22T12:10:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577152280> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/32#issuecomment-577152280"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577324486> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577324486> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577324486> <http://schema.org/description> "I'm not sure exactly what problem you are trying to solve with the `LiteralData` type.\r\n\r\nAll I can see is additional verbosity due to the intermediate type.\r\n\r\nI can see a few interesting ideas:\r\n\r\n* naming subfields of literals (text/value & kind),\r\n* having a simpler constructor for `xsd:string`s (although I tended to favor uniformity by having all  (safe) term constructors return a result, even when they could not fail...),\r\n\r\nbut all of them could be implemented without the additional `LiteralData` type.\r\n\r\nWhat am I missing?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577324486> <http://schema.org/startDate> "2020-01-22T18:35:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577324486> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/35#issuecomment-577324486"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577587495> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577587495> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577587495> <http://schema.org/description> "My intention is to seperate handling of the single RDF-terms (IRI, blank node, literal, variable) from an RDF-term that can be anything. In my opinion this makes it **easier to reason** about how a certain type of term is handled.\r\n\r\nLet me explain it for serialization. Assume a trait for serializing something conformant to NTriples:\r\n\r\n```rust\r\ntrait NtSerializable {\r\n    fn seriallize<W: io::Write>(&self, w: &mut W) -> io::Result<()>;\r\n}\r\n```\r\n\r\nThis can be implemented for basic types like `IriData`, `BNodeId`, ... then serializing a `Term` would just be (simplyfied):\r\n\r\n```rust\r\nimpl NtSerializable for Term {\r\n    fn serialize<W: io::Write>(&self, w: &mut W) -> io::Result<()> {\r\n        match self {\r\n            Iri(iri) => iri.serialize(w),\r\n            Literal(literal) => literal.serialize(w),\r\n            ...\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nContinuing this up to `Graph` or `Database` (maybe with specialized traits for strict and so on). As a user it enables me to **precisely find the code** how different elements of RDF are serialized.\r\n\r\n---\r\n\r\nAnother point I want to make is **uniformity**. As the same is already done for IRIs and blank nodes I thought it would just be consequent to do the same for literals (and maybe variables). Especially, as blank nodes are less complex as literals but already have an own type.\r\n\r\n---\r\n\r\nIn a broader scale the seperation of `Literal`s also supports a higher idea of mine. Actually, I wanted to come up with this later. The idea is to **make `Term` a trait**. Yes, this probably adds  a lot more of generics, where-clauses and verbosity. But I think this only appies to the library side. \r\n\r\nApplications will pick probably only a bunch of concrete crates from the `sophia` ecosystem. Therefore, they will not need to handle complex where-clauses.\r\n\r\nOn the other hand this would allow us to support external term implementations with existing sophia code, For example, use rio's terms directly in `sophia::HashGraph` without the need for conversion. Another example is to handle strict and generalized RDF by different implementations of `Term` reusing the base types for IRIs, blank nodes and literals.\r\n\r\nFurthermore, extensions of the RDF-standard could easily interoperate with the `sophia` ecosystem. In fact, I'm thinking of Notation 3 here. In order to support quoted graphs in triples it is essential to support another kind of `Term`.\r\n\r\nHowever, this is not the topic of this PR and should prabably be moved into an own issue." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577587495> <http://schema.org/startDate> "2020-01-23T08:59:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577587495> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/35#issuecomment-577587495"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577698216> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577698216> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577698216> <http://schema.org/description> "@MattesWhite @Tpt whould you mind having a look at this PR? This is the long awaited refactoring of the `serializer` module, in the line of what I did with parsers. What do you think?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577698216> <http://schema.org/startDate> "2020-01-23T14:12:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577698216> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-577698216"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577721198> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577721198> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577721198> <http://schema.org/description> "Ok, that is clearer, thanks.\r\n\r\nIn the current design, I thought of the `Term`enum as a sort of \"class hierarchy\", where the enum itself is the superclass, and the variants (`Iri`, `Literal`, etc...) *are* the subclasses. The \"inner types\" (such as `IriData` and `BNodeId`) were mere artifacts, introduced to overcome the limitations on enum variants (they can not have private attributes or methods of their own).\r\n\r\nAs I understand, you propose an approach where each subclass is defined as a separate type, and variants of the superclass enum are mere wrappers. I agree this is more regular, probably easier to understand, and possibly more idiomatic (see for example https://docs.rs/json/0.12.1/json/enum.JsonValue.html).\r\n\r\nIf we go that way, though, I would prefer:\r\n\r\n* to name the subclass types as closely as possible to their variant (so renaming `IriData` to `Iri`, and so on), and have them defined in respective submodules (`term::iri`, `term::litral`, etc.);\r\n\r\n* to make `Literal` itself an enum, with variants `Typed{value: T, datatype: T}, Lang{value: T, tag: T}` and get rid of `LiteralKind`, because I find that the currently proposed design makes pattern matching on literals way too verbose...\r\n\r\n----\r\n\r\nAs for turning `Term` into a trait, this is indeed a totally different topic. Feel free to open an issue about it..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577721198> <http://schema.org/startDate> "2020-01-23T15:05:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/577721198> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/35#issuecomment-577721198"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578024518> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578024518> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578024518> <http://schema.org/description> "I'm happy to see that we came to an agreement, my intentions are exactly as you understand.\r\n\r\nYour preferred points are reasonable and I agree on them, too.\r\n\r\nAs this PR starts to heavily conflict with #37 and the changes required differ more and more from my initial proposal I close this PR and will commit a new one when the serializer PR is merged." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578024518> <http://schema.org/startDate> "2020-01-24T07:38:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578024518> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/35#issuecomment-578024518"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578423778> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578423778> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578423778> <http://schema.org/description> "In a subcomment above, I promised another proposal, and I meant it, but actually I came back to my original design :-/. Let my try to explain how.\r\n\r\nCurrently, the parser library works like that:\r\n``` rust\r\n// create a Parser -- this is not specified by the Parser trait\r\nlet p = TurtleParser::new().with_default_prefixes(&prefix_map);\r\n// use it to parse file f1 in graph g1\r\np.parse(f1).in_graph(&mut g1);\r\n// alternatively, use the triple stream API to parse file f2 in graph g2\r\nlet parsed_triples = p.parse(f2); // returns a TripleSource\r\ng2.insert_all(parsed_triples);\r\n```\r\nI find this API intuitive, and easy to read and write.\r\n\r\nIf we try to imagine a perfectly symmetrical API for serializers, it would look like\r\n```rust\r\n// create a Serializer -- this is not specified by the Serializer trait\r\nlet s = TurtleSerializer::new().with_prefixes(&prefix_map);\r\n// use it to serializer graph g1 in file f1\r\ns.serialize_graph(&g1).in_(f1);\r\n// alternatively, use the triple stream API to serialize graph g2 in file f2\r\nlet turtle_file = s.sink(f2); // returns a TripleSink\r\ng2.triples().in_sink(turtle_file);\r\n```\r\nThis looks (IMO) equally nice to the Parser example,\r\nbut it raises the question of what the `serialize_graph` method returns,\r\nand furthermore what would be the use of the returned object,\r\n*except* for calling its \"in_\" method (granted, the name is not good, but that's not the point here).\r\nSo I came to the conclusion that this intermediate object should probably not exist,\r\nand I came back to the original design.\r\n\r\n```rust\r\n// create a Serializer -- this is not specified by the Serializer trait\r\nlet s = TurtleSerializer::new().with_prefixes(&prefix_map);\r\n// use it to serializer graph g1 in file f1\r\ns.serialize_graph_in(&g1, f1);\r\n// alternatively, use the triple stream API to serialize graph g2 in file f2\r\nlet turtle_file = s.sink(f2); // returns a TripleSink\r\ng2.triples().in_sink(turtle_file);\r\n```\r\nDoes it make more sense?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578423778> <http://schema.org/startDate> "2020-01-25T17:10:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578423778> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-578423778"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578430436> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578430436> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578430436> <http://schema.org/description> "I don't say that your proposal doesn't make sense. The serializer trait you suggest is perfectly aligned to the source/sink model you follow.\r\n\r\nI think of a different model for serializers. For me a serializer's purpose is to serialize data to _one_ target. I agree that this means there a two steps for initialization. First create some configuration that you may be able to share across threads and so on. The difference in my thinking is that the concrete serializer is initialized with that config and a target, so the one serializer is owning it one target. Throughout the life of the serializer I can add one or more graphs, triples and so on. Eventually, the serializer is consumed and the target is returned (therefore `fn finish(self) -> Result<Self::Outcome>`).\r\n\r\n> and furthermore what would be the use of the returned object,\r\n\r\nTherefore, I suggested to return `Result<()>` until serialization is `finish()`ed nothing is returned but errors are reported.\r\n\r\nTo sum up, I prefer sharing a config and built serializers on demand, e.g. per thread. As far as I understand your solution shares one serializer that is responsible for serializing to several targets. I think that can become a problem when the serializer is used in different threads." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578430436> <http://schema.org/startDate> "2020-01-25T18:29:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578430436> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-578430436"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578502421> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578502421> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578502421> <http://schema.org/description> "Another point for using one serializer per target is streaming Turtel serialization. In order to be able to produce property and object lists the serializer needs to store the last subject and predicate it serialized. This can be used to continue serialization over two streams. When one serializer is used for several targets this would not work. Worse, it could produce incorrect serializations, e.g. continue the serialization in another target." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578502421> <http://schema.org/startDate> "2020-01-26T13:34:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578502421> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-578502421"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578624653> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578624653> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578624653> <http://schema.org/description> "@MattesWhite Both approaches have their pros and cons. They both have their risks/limitations (for example, it does not always make sense to serialize two graphs into the same file -- with RDF/XML, that would produce an invalid document), but they also both have their valid uses cases.\r\n\r\nSo my conclusion is that we should probably support both approaches. I will amend the PR in that sense on the next few days.\r\n\r\nThanks a lot for your critical eye, and for challenging me into improving the design of Sophia :-)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578624653> <http://schema.org/startDate> "2020-01-27T07:34:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578624653> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-578624653"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578636269> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578636269> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578636269> <http://schema.org/description> "Indeed, I thought about this problem two. And I'm curious about your solution. I suggest to solve this problem by consulting the [RDF spec](https://www.w3.org/TR/rdf11-concepts/#rdf-documents):\r\n\r\n> An RDF document is a document that encodes an RDF graph or RDF dataset in a concrete RDF syntax, [...].\r\n\r\nConsequently, the serialization of an `Graph` would also finalize the serialization process - for a triple serializer, as you proposed. Maybe the best solution is realy to provide two serializer traits. The first for streaming triples that is capable of consuming several `TripleSource`s before finishing. The second takes one complete `Graph` and finishes immedeatly. Where the streaming quads version should also be able to take `Graph`s.\r\n\r\nTo sum up:\r\n\r\n```rust\r\ntrait TripleSerializer {\r\n    type Outcome;\r\n    type Error: std::error::Error;\r\n\r\n    fn serialize<TS: TripleSource>(&mut self, ts: TS)\r\n        -> Result<(), StreamError<TS::Error, Self::Error>>;\r\n    fn finish(self) -> Result<Self::Outcome, Self::Error>;\r\n}\r\n\r\ntrait GraphSerializer {\r\n    type Outcome;\r\n    type Error: std::error::Error;\r\n\r\n    fn serialize<G: Graph>(self, g: &G)\r\n        -> Result<Self::Outcome, StreamError<G::Error, Self::Error>>;\r\n}\r\n\r\ntrait QuadSerializer {\r\n    type Outcome;\r\n    type Error: std::error::Error;\r\n\r\n    fn serialize_stream<QS: QuadSource>(&mut self, qs: QS)\r\n        -> Result<(), StreamError<QS::Error, Self::Error>>;\r\n    fn serialize_graph<G: Graph>(&mut self, g: &G, name: Option<&Term>) \r\n        -> Result<(), StreamError<G::Error, Self::Error>>;\r\n    fn finish(self) -> Result<Self::Outcome, Self::Error>;\r\n}\r\n\r\ntrait DatasetSerializer {\r\n    type Outcome;\r\n    type Error: std::error::Error;\r\n\r\n    fn serialize<D: Dataset>(self, d: &D) \r\n        -> Result<Self::Outcome, StreamError<D::Error, Self::Error>>;\r\n}\r\n```\r\n\r\n---\r\n\r\n> Thanks a lot for your critical eye, and for challenging me into improving the design of Sophia :-)\r\n\r\nYour welcome. I realy like our discussions as well and the results we found are pretty well I would say. Also I'm constantly a little bit afraid to go a step to far and start annoying you. So if this is ever the case please feel free to stop me ;-)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578636269> <http://schema.org/startDate> "2020-01-27T08:13:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/578636269> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-578636269"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/579715374> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/579715374> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/579715374> <http://schema.org/description> "Here is a new version of the serializer API. It is still very similar to my original proposal, but the serializing methods are now clearly carried by the sink (`TripleSerializingSink` and `QuadSerializingSink`, respectively).\r\n\r\nFor the sake of symmetry with the parser API, the use pattern that I described above is still possible, with the `serialize_triples_in` (etc.) methods. But those are mostly shortcuts for generating a sink and calling the corresponnding method on it.\r\n\r\nAnother use pattern, closer to the one you were advocating, is now possible:\r\n```rust\r\n// serializing graph g1 into file f1\r\nlet ttl_file = TurtleParser::new().with_prefixes(&prefix_map).to(f1);\r\n//                                             this is new -> ^^^^^^\r\nttl_file.serialize_graph(&g1);\r\n```\r\n\r\nNote that I didn't follow your latest suggestion to have separate traits for serializing sources and serializing graphs. I would rather leave it to implementors to decide what they allow and what they disallow. It makes sense in Turtle to serialize two graphs in the same file; it does not in RDF/XML, so that implementation may chose to close the underlying file at the end of `serialize_graph`. Still, I can imagine some more exotic target where serializing several graphs in RDF/XML would make sense..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/579715374> <http://schema.org/startDate> "2020-01-29T11:34:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/579715374> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-579715374"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580125497> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580125497> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580125497> <http://schema.org/description> "> Note that I didn't follow your latest suggestion to have separate traits for serializing sources and serializing graphs. I would rather leave it to implementors to decide what they allow and what they disallow. \r\n\r\nOkay you are right. It is okay to handle this by throwing an error if a second graph shouldn't be serialized.\r\n\r\n---\r\n\r\n> For the sake of symmetry with the parser API, ...\r\n\r\nI can understand that you stick to the 'serializer + sink' pattern to be symmetric with the parser. But in my view parsing and serialization are two inherent different things. Therefore, symmetry is not a valid design factor for the serializer API for me. On the first glance both parsing and serializing are symmetric. \"Go from document to data\" and \"go from data to document\". However, this is already the point where similarity ends. My statement can be proven by simply parsing a document and immediatly serialize it again. I'm pretty sure that for any set of parser and serializer the output will not be the _exact_ same as the input despite being correct (as long as the input does not come from the serializer itself).\r\n\r\nOn an implementation level, the parser is right in supporting a lazy evaluation, i.e. an `Iterator` API, as we might only want to check if a certain triple is contained or we want to only parser a certain set of triples. Here the `Iterator` can help us to stop early and save resources. On the other hand, when we are serializing data we are in control of it already, only giving the triples to the serializer we want to. This means that a serializer will consume a `TripleSource` at once.\r\n\r\nTo sum up, I advocate to break the symmetrie of parser and serializer. For me the `TripleSerializingSink` is all the API we need for a serializer in a core-crate.\r\n\r\n---\r\n\r\nBTW the insymmetry of parsing and serializing is an example why I'm not a fan of the `Sink`-trait in general. It adds complexity where it don't have to be. For example, the `Inserter` and `Remover` sinks could be removed by implementing the same thing directly in `Graph`'s methods. Maybe a more convincing point is that there is no special sink type in Rust I can think of no example neither in the std-lib nor in any popular crate I can think of. Of course I will change my mind if you bring any counterevidence." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580125497> <http://schema.org/startDate> "2020-01-30T07:47:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580125497> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-580125497"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580190535> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580190535> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580190535> <http://schema.org/description> "About parsing a file and reserializing it: the fact that its does not always *round-trip* does not mean that the general process is not symetric... We are considering different levels.\r\n\r\nAbout sinks, you have a point, though..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580190535> <http://schema.org/startDate> "2020-01-30T10:34:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580190535> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-580190535"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580271552> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580271552> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580271552> <http://schema.org/description> "> I introduced them to be able to consume sources, and I introduced sources because iterators had limitation [...].\r\n\r\nAs `TripleSource` has no longer a lifetime those limits are now mitigated. Furthermore, `TripleSource`s as fallible `Iterator`s are well handled by the `resiter` crate (even if I'm a bit concerned about its license, maybe [`fallible-iterator`](https://crates.io/crates/fallible-iterator) can be a replacement). In addition, we developed `StreamError` to handle situations where both source and sink could fail.\r\n\r\n> But we could reuse the notion of streaming mode, introduced in the Graph and Dataset traits, to make sources consumable in a more idiomatic way, e.g. with a `for_each_triple` method (resp. `for_each_quad`)...\r\n\r\nI don't realy understand what you want to express here. As stated in my quoted comment, I think that all current uses of `Sink` can be replaced by direct implementations. The only method I miss for convienience is an adapted version of `Iterator::collect()`. I would do something like:\r\n\r\n```rust\r\ntrait FromTripleSource {\r\n    type Error;\r\n\r\n    fn from_triple_source<TS: TripleSource>(ts: TS) -> Result<Self, StreamError<TS::Error, Self::Error>>;\r\n}\r\n\r\n// and this completed by\r\ntrait TripleSource {\r\n    ...\r\n\r\n    fn collect_triples<FTS: FromTripleSource>(self) -> Result<FTS, StreamError<Self::Error, FTS::Error>> {\r\n        FTS::from_triple_source(self)\r\n    }\r\n}\r\n```" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580271552> <http://schema.org/startDate> "2020-01-30T14:12:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580271552> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-580271552"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580854285> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580854285> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580854285> <http://schema.org/description> "From your comments above, I gather that my explanation (in the `tripe::stream` module) of why we need `TripleSource` is not clear enough. But thanks for your question about `collect`, that's a perfect example of the (too) strong assumption that `Iterator` makes on its items.\r\n\r\nHere is a proposal to replace (or complement) the current doc in `triple::stream`. Is it clearer for you?\r\n\r\n---\r\n\r\nConsider a parser using 3 buffers to store the subject, predicate, and object of the triples it parses.\r\nEach time it extracts a triple from the data, it yields it (as 3 references to its internal buffers)\r\nthrough the `for_each_triple` method. Then, it **reuses** the buffers to store the data for the next triple,\r\nand yields the new triple, as 3 references to the *same* buffers.\r\n\r\nAn iterator can not be implemented this way, because items yielded by iterators are expected to live (at least) as long as the iterator itself. Consider for example the `collect` method of iterators, it would not work if the items were as short lived as in the example above.\r\n\r\nBecause many parsers (as well as other triple sources) will be implemented in a manner similar to that described above, we have to provide a trait with *weaker assumptions* on its items than `Iterator` has.\r\n\r\nThe alternative would be to wrap such parsers with a layer that would *copy* the data from internal buffers to fresh buffers for each triples, and we do not want to impose that cost on all implementations\r\n— especially when many consumers will be happy with short-lived references." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580854285> <http://schema.org/startDate> "2020-01-31T18:30:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/580854285> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-580854285"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581039551> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581039551> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581039551> <http://schema.org/description> "Sorry but I don't see the use case you describe. It don't makes sense to me to have short lived buffer contents. \r\n\r\nHere are the use cases (for parsers) I can imagine and roughly how I would implement them:\r\n\r\n#### Parse from `String`\r\n\r\nThe parser is implemented in a zero-copy way and gives out `RefTerm`s (`TD = &'source str`). In this case `RefTerm`s can be stored within the parser without a problem as the lifetime is tight to the `source` so the references 'content' will outlive the parsing anyway. Note that instead of `&'source str` you can always return `&'static str` as it is guaranteed to outlive `'source`. This can become handy when some shorthand like `a` or implicit datatypes are parsed in Turtle. So no need for internal, owning buffers here.\r\n\r\n#### Parse from big document\r\n\r\nLets assume that the RDF-document we parse is to big for our machine's memory. Indeed, this is an interessting case where it could be desireable to only parse one triple (NTriples) or one block (Turtle) at a time and give out references of this temporary read. Here I could think of an architecture of iterator-of-iterators. The outer-iterator reads from the document (`'doc`) units of interesst (`'doc :  'part` this means the lifetime `'part` is ensured to be shorter than `'doc` see [here](https://doc.rust-lang.org/1.30.0/book/second-edition/ch19-02-advanced-lifetimes.html)). Those parts then are parsed individually by parsers that hand out `RefTerm<'part>`. I think this could work.\r\n\r\n#### Read from persistent data structure\r\n\r\nHere I think no parsing is needed but `Graph`s are directly constructed (e.g. HDT format). For this case you found already a very elegant solution.\r\n\r\n---\r\n\r\nAs you can see in my opinion I can't figure out the problem you are facing.\r\n\r\nBTW It is not clear to me what the function `for_each_triple()` is supposed to do... something like `Iterator::for_each()`?\r\n\r\nAnd the most important question: What has this to do with sinks?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581039551> <http://schema.org/startDate> "2020-02-01T15:17:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581039551> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-581039551"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581925988> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581925988> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581925988> <http://schema.org/description> "I started writting my Turtle serializer: https://github.com/MattesWhite/metis-rs\r\n\r\nFor now it is pretty basic and far from usable but the stream serializer already works (kind of). What stops me from advancing at the moment is the abbreviation of IRI, i.e. how to match against a namespace. Maybe something like \r\n\r\n```rust\r\nimpl IriData {\r\n    fn match_ns(&'a self, ns: impl AsRef<str>) -> Option<impl Iterator<Item = &'a Char>>;\r\n}\r\n```\r\n\r\nwhere in case of a match the `Iterator` holds the left chars so it matches all (non-)suffixed IRIs... \r\n\r\nI can implement this if you want but as said I wait for the serializer API to be merged before continuing my work.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581925988> <http://schema.org/startDate> "2020-02-04T14:08:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581925988> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/34#issuecomment-581925988"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581994599> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581994599> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581994599> <http://schema.org/description> "> Parse Strings\r\n\r\nThings are not that simple... Consider the following turtle\r\n```turtle\r\n@base <http://example.org/foo/bar/>\r\n<../BAZ> <http://schema.org/label> \"\\u2693\"; \r\n    <http://example.org/other-prop> \"\\u2744\".\r\n```\r\nThe subject of the first triple, can not reference to the inner data of the string (it must contain `http://example.org/foo/BAZ`), and neither can the object (it must contain `☃`). So you need internal buffers. And once the first triple has been yielded, it makes sense for the parser to reuse the internal object buffer to store the new literal.\r\n\r\n> Parse big files\r\n\r\nWhat you are suggesting is to have different APIs for parsing strings and files... This is not really convenient for the user.\r\n\r\n> What does it have to do with sinks\r\n\r\nAs I put it in the intro of that issue:  I introduced sinks to be able to consume sources, and I introduced sources because iterators had limitation. By improving the design of sources (with the `for_each_triple` method), we could make it possible to consume a source without a dedicated sink object.\r\n\r\nAnd yes, the `for_each_triple` methods is supposed to work the same way as `Iterator::for_each`. Again, sources are just iterators with weaker assumptions on their items.\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581994599> <http://schema.org/startDate> "2020-02-04T16:29:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/581994599> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-581994599"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582278349> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582278349> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582278349> <http://schema.org/description> "Okay, I see now that there are non trivial cases parsing RDF. So when I understand you correctly in your example you want to return a literal `\"☃\"` instead of `\"\\u2744\"` which means you store the ☃ inside the parser give _a reference to it_ out in this iteration and reuse this buffer in the next iteration, correct? Hm... difficult thing if we don't want to copy each term...\r\n\r\n> [...] because iterators had limitation.\r\n\r\nYou mentioned this before but you didn't give any examples. Could you please explain this further and how sinks are able to better consume a source?\r\n\r\nIn fact, I had real trouble implementing my [serializer](https://github.com/MattesWhite/metis-rs/blob/master/metis/src/serialize/turtle/stream.rs#L43) for `TripleSource`. For current API, it is not possible to consume a `TripleSource` that not implements `Iterator` as there is nothing that points out what elements are to expect. Therefore, I had to write my trait bound for `Iterator<Item=Result<Tri, E>>` instead of `TripleSource`" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582278349> <http://schema.org/startDate> "2020-02-05T07:34:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582278349> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-582278349"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582343969> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582343969> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582343969> <http://schema.org/description> "By \"iterator had limitations\", I meant \"Iterator makes too strong assumptions on the lifetime of their items\", which you can rephrase \"Iterators do not support short-lived items (i.e. items living not longer than a single iteration)\".\r\n\r\nI just pushed [a branch](https://github.com/pchampin/sophia_rs/tree/better_sources) (still WIP) where I improved the `TripeSource` trait as suggested above (plus filter, map and map_filter as a bonus). Also, a `TripleSource` now indicates the kind of triples it yields (reusing the trick we used for `Graph`'s iterators to avoid the lifetime issues).\r\n\r\nIt makes it possible to consume a `TripleSource` using `for_each_triple` or `try_for_each_triple`, without requiring to implement `TripleSink`, which can be simply removed." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582343969> <http://schema.org/startDate> "2020-02-05T10:33:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582343969> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-582343969"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582350594> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582350594> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582350594> <http://schema.org/description> "> I started writting my Turtle serializer: https://github.com/MattesWhite/metis-rs\r\n\r\nAwesome :)\r\n\r\nI'm on my way to improve the `stream` API (#38), which will open the way to a cleaner Serializer API (#37). Once this is done, I'd like to release a new version. It's been a long time since the last one, and your crate could depend on a stable version rather than a github link...\r\n\r\nRegarding `match_ns`, that's a good idea, with the following changes:\r\n* why not simply accept `&str` for the `ns` parameter?\r\n* I'm guessing you meant `char` and not `Char`\r\n* Why return an iterator of `&'a char`? Why not simply `char`?\r\n* It would make more sense to me to return the *right* chars, i.e. those usable to make the suffix\r\n  (but maybe that's what you meant).\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582350594> <http://schema.org/startDate> "2020-02-05T10:51:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582350594> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/34#issuecomment-582350594"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582392178> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582392178> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582392178> <http://schema.org/description> "This looks awesome now I understand what you are talking about. However, it could be hard but a `next_triple()` method would be nice." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582392178> <http://schema.org/startDate> "2020-02-05T12:49:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582392178> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-582392178"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582521856> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582521856> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582521856> <http://schema.org/description> "> This looks awesome now I understand what you are talking about. \r\n\r\nThanks :-)\r\n\r\n> However, it could be hard but a `next_triple()` method would be nice.\r\n\r\nYeah, I though about it... It could look like that:\r\n```rust\r\n    fn next_triple<'s>(&'s mut self) -> StreamedTriple<'s, Self::Triple>;\r\n```\r\nand the bound on lifetime `'s` would prevent to call `next_triple` again while the returned streamed triple is alive (as this would cause two mutable borrows on self).\r\n\r\nBut... I can not implement this method for Rio parsers, so I ruled it out -- with regrets :cry: \r\n\r\nOn the one hand, it is a shame do make an API design decision based on one particular implementation. But on the other hand, the UnsafeTriple / StreamedTriple pattern (which is required to make the `next_triple` method possible) is a quite complex one (you know how hard it was to make it right... you were there :wink:), so we can't expect all implementatiosn to have a similar mechanism.  Hence my decision.\r\n\r\nOf course, when Rust finally supports GAT, things will be much easier :smile:" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582521856> <http://schema.org/startDate> "2020-02-05T17:31:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/582521856> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-582521856"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585050945> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585050945> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585050945> <http://schema.org/description> "I guess you're still trying hard to implement the new `TripleSource`? Writing a Turtle serializer and a Notation 3 parser, I got a lot of improvements / features pending for `sophia`. However, I don't want to commit PRs while you change an integral part of the crate. So a short update per week or so would be nice to have :wink: .\r\n\r\nBTW I don't depend on a new release. My crate will not be ready for release for a long time. In fact, it is more a playground for my PhD than a serious project. Therefore, I wouldn't mind if your not spending to much effort on releasing a new version.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585050945> <http://schema.org/startDate> "2020-02-12T06:26:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585050945> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-585050945"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585143427> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585143427> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585143427> <http://schema.org/description> "> I guess you're still trying hard to implement the new TripleSource?\r\n\r\nNo, I'm just buried in other stuff, much less fun... :-( Sorry to keep you waiting. I'll try to keep things moving, though. I'm very interested in your N3 parser :-)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585143427> <http://schema.org/startDate> "2020-02-12T10:40:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/585143427> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-585143427"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/586209846> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/586209846> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/586209846> <http://schema.org/description> "Thanks :)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/586209846> <http://schema.org/startDate> "2020-02-14T10:55:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/586209846> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/39#issuecomment-586209846"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103777> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103777> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103777> <http://schema.org/description> "@MattesWhite could you please have a loop at the latest commit 9a97dae ? It introduces a new Serializer API which I think will please you better than my former attempt #37." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103777> <http://schema.org/startDate> "2020-02-23T18:59:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103777> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/34#issuecomment-590103777"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103823> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103823> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103823> <http://schema.org/description> "Superceded by 9a97dae" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103823> <http://schema.org/startDate> "2020-02-23T19:00:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590103823> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/37#issuecomment-590103823"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590413013> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590413013> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590413013> <http://schema.org/description> "Solved by 1e0836ace5cf" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590413013> <http://schema.org/startDate> "2020-02-24T16:19:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590413013> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/38#issuecomment-590413013"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590414481> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590414481> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590414481> <http://schema.org/description> "Nitpicking a bit, but would you mind sorting the terms in the namespace?\r\nAlphabetical order would be the most natural, perhaps putting all \"classes\" first, then all \"properties\"..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590414481> <http://schema.org/startDate> "2020-02-24T16:21:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590414481> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/41#issuecomment-590414481"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590724976> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590724976> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590724976> <http://schema.org/description> "> [...] I think will please you better than my former attempt [...]\r\n\r\nYour right :smile:, nice work. I created a PR, fixing some minor issues.\r\n\r\nThe only thing left on the initial agenda is now separating the 'kinds of term' into own modules. We already talked about this in #35 . Should I take care about this or do you want to do this on your own?\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590724976> <http://schema.org/startDate> "2020-02-25T07:32:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590724976> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/34#issuecomment-590724976"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590786474> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590786474> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590786474> <http://schema.org/description> "> Should I take care about this or do you want to do this on your own?\r\n\r\nI don't mind if you do ;-)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590786474> <http://schema.org/startDate> "2020-02-25T10:06:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590786474> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/34#issuecomment-590786474"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590798950> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590798950> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590798950> <http://schema.org/description> "I'm all for it, but this will take some time to please this macro:\r\n\r\n> error: aborting due to 256 previous errors\r\n\r\n:-/" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590798950> <http://schema.org/startDate> "2020-02-25T10:33:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590798950> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/44#issuecomment-590798950"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590811346> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590811346> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590811346> <http://schema.org/description> "Thanks for this proposal. Comments below\r\n\r\n* Consuming Triple/Quad Source → I'm not entirely sure... see below.\r\n* Removing NxSerializer alias → good call, this is indeed better that way\r\n* Renaming NtX to NqX → of course, silly me :-/\r\n\r\n\r\nMost (if not all) places where Triple/Quad Sources are used (e.g. `Graph::insert_all`), they are borrowed mutably. The reason for not consuming them is that some sources (especially parsers) may still carry valuable information after they have exhausted their triples (e.g. the prefix declaration they have encountered). See #45 for a discussion on that topic.\r\n\r\nWould you mind making a new PR with only the last two items, and wait till we resolve #45 for the first one? Thanks" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590811346> <http://schema.org/startDate> "2020-02-25T11:02:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590811346> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/43#issuecomment-590811346"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590871214> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590871214> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590871214> <http://schema.org/description> "I don't know if such information is that valuable. For me the task of a parser is to read and interpret the contents of an RDF document. Therefore, it should return only absolute IRIs, resolving prefixes and base IRI. Accordingly, the information someone could get from a parser should already be included in the triples returned.\r\n\r\nAs a special case, retrieving the base IRI from a Turtle document (or other Notation3 derived format) can be ... dangerous. As stated in [RDF 1.1 chapter 6.3](https://www.w3.org/TR/turtle/#sec-iri-references)\r\n\r\n> [...] Each @base or BASE directive sets a new In-Scope Base URI, relative to the previous one. \r\n\r\nSo there can be an unlimited number of `@base` directives in a Turtle document, doing some fun stuff like:\r\n\r\n```turtle\r\n# This is valid Turtle\r\n@base <http://example.com/fun/stuff/> .\r\n<Peter> a <../Human> .\r\n\r\n@base <../> .\r\n<Human> <#hasEntity> <stuff/Peter> .\r\n```\r\n\r\nSo what base IRI should be returned?\r\n\r\nOf course I see that there are possibilities where it can be beneficial to yield such informations and not to convert IRIs immediately but I think those are very optimized and in such cases parsers should return an own type of `Graph` rather than implementing the streaming interface. " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590871214> <http://schema.org/startDate> "2020-02-25T13:38:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/590871214> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/45#issuecomment-590871214"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591011874> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591011874> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591011874> <http://schema.org/description> "# Proposed solution (the revenge)\r\n\r\nNow that `TripleSink` and `QuadSink` [have disappeared](#38), the previous proposed solution is moot.\r\n\r\nHere are some design considerations:\r\n* Following the [principle of least surprise](https://en.wikipedia.org/wiki/Principle_of_least_astonishment), `Graph::insert_all` and `Dataset::insert_all` should insert the triples as is.\r\n* Following the same principle, the most obvious (and documented) way of loading a graph from a file should \"do the right thing\", i.e. not conflate bnodes from different sources if any.\r\n* That being said, the most common use case for loading triples from a file is to create a *fresh* graph containing these triples, rather than adding them to an existing graph possibly already containing triples...\r\n\r\nAs a consequence, here is the solution that I think is best;\r\n* remove the methods `TripleSource::in_graph` and `QuadSource::in_dataset`;\r\n* replace them by methods `TripleSource::collect_graph<G>` and `QuadSource::collect_dataset<D>`.\r\nThese new methods are idiomatic (they mimic the `Iterator::collect<T>` method).\r\n\r\nThis solution comes with an additional cost, though: \r\n* either the Graph and Dataset trait have to specify a way to construct and empty Graph/Dataset,\r\n* or the G/D parameters require an additional trait bound (Default? a new FromTripleSource trait) in addition to Graph/Dataset...\r\n\r\nThe first option induces an effort on all implementors of Graph/Dataset. The second option induces that effort only on those implementors who want to support collect_graph/collect_dataset, but users may in turn be surprised if not all Graph/Dataset implementations support that. I'm still not sure which one I prefer." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591011874> <http://schema.org/startDate> "2020-02-25T18:57:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591011874> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/1#issuecomment-591011874"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591281468> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591281468> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591281468> <http://schema.org/description> "Reduced version committed in #46 " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591281468> <http://schema.org/startDate> "2020-02-26T07:33:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591281468> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/43#issuecomment-591281468"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591367914> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591367914> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591367914> <http://schema.org/description> "Looks like cargo fmt is till unhappy..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591367914> <http://schema.org/startDate> "2020-02-26T11:00:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591367914> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/47#issuecomment-591367914"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591614288> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591614288> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591614288> <http://schema.org/description> "> Somehow I managed to butcher the latest merged PR #46.\r\n> Repaired with this commit.\r\n\r\nYuck! A `rebase` and a `push --force` would have been cleaner.\r\n\r\nInstead, I cherry-picked the relevant commits from this PR (squashing the two fmt-related ones), and merged them in 19e854b1. You are still credited as the authors of the new commits.\r\n\r\nThanks for this work, I like where this is going." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591614288> <http://schema.org/startDate> "2020-02-26T19:58:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/591614288> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/47#issuecomment-591614288"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593436346> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593436346> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593436346> <http://schema.org/description> ">  Integrate the join mechanism more deeply into Iri, as far as possible.\r\n\r\n+1\r\n\r\n> write an adapter for iterators, e.g. graph.triples().resolve_with(&term)....\r\n\r\nI can see your use case here, but I think I would rather go for something like\r\n```\r\n    graph.triples().map_triples(|t| base.resolve_triple(t))\r\n```\r\n(see #50 for my thought on the issue of resolving relative IRIs).\r\n\r\n> Integrate new Iri into Term, including convenient functions.\r\n\r\n+1\r\n\r\n> Replace usage of Term where actually only an Iri is valid.\r\n\r\nWhat do you have in mind. Recall that Sophia aims to support a [generalized model](https://docs.rs/sophia/0.3.0/sophia/#generalized-vs-strict-rdf-model). In particular, any term is allowed in any position of Triples/Quads.\r\n\r\n> Replace Option<&Term> for graph names with [a dedicated enum]\r\n\r\nYour proposed enum is incorrect w.r.t. the RDF Abstract Model, which allows IRIs **or blank nodes** as graph names. Furthermore, as mentioned above, I'd like to keep the Sophia generalized model as uniform as possible. Literal as graph names are very debatable, but variables as graph names will be useful when we want to represent queries as generalized datasets.\r\n\r\nAn orthogonal concern is: should we have a dedicated type for graph names, instead of simply using `Option<Term>`? I previously used a dedicated type, and I found it caused much complexity without having real added value. Furthermore, I think the semantics of the graph name in a quad is accurately conveyed by `Option<Term>`: triples from the default graph have *no* associated graph name, while triples from named graphs have *some* associated graph name, which is a term.\r\n\r\nSo I'm not really favorable to that last item. But I'm still open for discussion..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593436346> <http://schema.org/startDate> "2020-03-02T14:44:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593436346> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-593436346"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593444113> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593444113> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593444113> <http://schema.org/description> "> For me the task of a parser is to read and interpret the contents of an RDF document. Therefore, it should return only absolute IRIs, resolving prefixes and base IRI.\r\n\r\nabsolutely, I'm not suggesting otherwise.\r\n\r\nConsider the following use-case though. I get a turtle file, I parse it as a graph, then apply some changes to the graph. Then I want to serialize it back to turtle, into something as similar as possible as the original file. For this, I need to \"remember\" which prefixes were declared in the original file (and possibly its `@base` declaration), because this information is not available anymore in the graph itself.\r\n\r\nNote that in other APIs (such as Rdflib in Python, and I Jena in Java), every graph has an associated prefix mapping, precisely to address the use-case above. But I never liked this design, because for me the graph should be *only* the abstract syntax.\r\n\r\nGranted, some turtle files might override their `@base` or some prefix in the middle of the file, making such \"round-trip\" nearly impossible to achieve. But at least for the majority of \"simple\" cases, we should provide a simple way to do it." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593444113> <http://schema.org/startDate> "2020-03-02T14:59:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593444113> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/45#issuecomment-593444113"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593445129> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593445129> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593445129> <http://schema.org/description> "And for the record, the more I think about it, the more I'm leaning towards the callback solution. Among others, it has the advantage of allowing to *consume* the TripleSource or QuadSource, as we would do with a standard iterator." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593445129> <http://schema.org/startDate> "2020-03-02T15:01:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593445129> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/45#issuecomment-593445129"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593446228> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593446228> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593446228> <http://schema.org/description> "Regarding the replacement of `Term` where only `Iri` is valid.\r\n\r\nHere I had something in mind like `Namespace` or the data type of literals as they really only work with IRIs. At the moment there is error handling or a panic in those cases. I thought it would be nice to let the type system take care of such situations. Of course, such replacements must be evaluated with user-friendliness in mind." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593446228> <http://schema.org/startDate> "2020-03-02T15:04:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593446228> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-593446228"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593829247> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593829247> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593829247> <http://schema.org/description> "Concerning #23 I get the feeling that this topic is to much detail for a common API.\r\nAs this topic is pretty specific to Turtle, e.g. NTriples have no prefixes and Json-LD has its `\"@context\"`, and targets a \"majority of simple cases\".\r\n\r\nYou said yourself in another issue that you like to keep `sophia` as general as applicable which I totally agree with. Therefore, I would suggest to leave this question open for implementers of Turtle parsers. In addition, this would increase the incompatibility with `rio`'s parser.\r\n\r\n---\r\n\r\nBTW [`metis`](https://github.com/MattesWhite/metis-rs/tree/master/metis/src/parse) now also includes a Turtle parser. I programmed it as an intermediate step towards an Notation3 parser (which I started but not works, yet). It is still WIP and has many rough edges but parses at least most documents. For now it is not aligned with `sophia`'s parser API, yet. But I plan to do so in the future. Maybe you can use it as an additional inspiration for \"RDF in Rust\".\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593829247> <http://schema.org/startDate> "2020-03-03T08:32:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593829247> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/45#issuecomment-593829247"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593897758> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593897758> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593897758> <http://schema.org/description> "In the latest commit I removed `unsafe` from `Iri`'s `*_unchecked()` methods due to the [question I asked](https://users.rust-lang.org/t/unchecked-always-unsafe/38975) at URLO." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593897758> <http://schema.org/startDate> "2020-03-03T11:10:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593897758> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-593897758"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593995872> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593995872> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593995872> <http://schema.org/description> "> this topic is pretty specific to Turtle\r\n\r\nI beg to differ: except for N-Triples and N-Quads, all major concrete syntaxes have a notion of base and prefix binding (Turtle, TriG, N3, RDF/XML, JSON-LD, RDFa)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593995872> <http://schema.org/startDate> "2020-03-03T15:02:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/593995872> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/45#issuecomment-593995872"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595080435> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595080435> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595080435> <http://schema.org/description> "I noticed there are a bunch of requested changes to the documentation. Don't think I won't address them. I just wait for a final commit to this PR when it's done." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595080435> <http://schema.org/startDate> "2020-03-05T07:56:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595080435> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-595080435"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595082211> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595082211> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595082211> <http://schema.org/description> " > - [ ] write an adapter for iterators, e.g. `graph.triples().resolve_with(&term)...`.\r\n\r\nAs you opened a dedicated issue (#50) should a solution be included here or would you rather like a separate PR?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595082211> <http://schema.org/startDate> "2020-03-05T08:00:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595082211> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-595082211"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595126001> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595126001> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595126001> <http://schema.org/description> "Re #50 this PR is fine: your `Resolve` trait is exactly what I had in mind." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595126001> <http://schema.org/startDate> "2020-03-05T09:36:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595126001> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-595126001"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595647207> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595647207> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595647207> <http://schema.org/description> "In the last commit I added  a `resolve_triples()` method to `TripleSource`. If you think the design is okay I would add implementasion for `QuadSource` and an extension trait for `Iterator`s (`Item = Term, Triple, Quad, Result<Term>, ...`)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595647207> <http://schema.org/startDate> "2020-03-06T07:55:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595647207> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-595647207"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595701358> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595701358> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595701358> <http://schema.org/description> "> In the last commit I added a `resolve_triples()` method to `TripleSource`\r\n\r\nAs [previously stated](https://github.com/pchampin/sophia_rs/pull/49#issuecomment-593436346), I have mixed feelings about this.\r\n\r\nOn the one hand, I can see that this is a rather general-purpose method on triple/quad stream, that may deserves a dedicated method.\r\n\r\nBut on the other hand, if we go down that path, there are many other general-purposes functions that I can think of that would equally deserve their own specific method:\r\n\r\n* rename bnodes into fresh ones\r\n* replace bnodes with variables / variables with bnodes\r\n* change absolute IRIs to relative ones (given a base IRI) (opposite of resolve)\r\n* replace variables by their bound values (given a mapping)\r\n\r\nWe would end up with a rather cluttered API, while all of this can be achieved rather simply with `map_triples`. In the case of `resolve_triples`, this would be\r\n```rust\r\n   source.map_triples(|t| base.resolve(t))\r\n```" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595701358> <http://schema.org/startDate> "2020-03-06T10:19:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595701358> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-595701358"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595743441> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595743441> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595743441> <http://schema.org/description> "You're right `resolve_triples()` is more or less a convenient method for `map_triples()`. And especially as it is a convenience I'd like keeping it. Besides the constraints of `Iterator`s they have a pretty rich API. And you get all of it by simply implementing `next()`. Of course most `Iterator` methods can be implemented by `map()` and `fold()` as well. Triple-/QuadSource can be the same where you get a rich API of convenience methods for free.\r\n\r\nAnother point is discoverability. With many convenient methods someone can directly see the features `sophia` provides. Whereas, you have to figure out yourself how the parts fit together when there are only a few methods." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595743441> <http://schema.org/startDate> "2020-03-06T12:17:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595743441> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-595743441"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595751202> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595751202> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595751202> <http://schema.org/description> "Further digging into `*Source` adapters I found that there are many duplicate items. I don't know if this is intentional or not. For the later case a comitted a version implementing `Resolver` for a `QuadSource`. This way we could remove all the duplicated adapters from `quad::stream` and even the `StreamingMode`s should be removable." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595751202> <http://schema.org/startDate> "2020-03-06T12:41:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/595751202> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-595751202"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596220705> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596220705> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596220705> <http://schema.org/description> "Thanks for this suggestion, this is indeed a good idea. We are currently in a big refactoring of the `Term` type (see for example #47 and #48), so I will probably wait until this is finished to address this issue. But I definitely will..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596220705> <http://schema.org/startDate> "2020-03-08T15:59:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596220705> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/51#issuecomment-596220705"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596221570> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596221570> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596221570> <http://schema.org/description> "re. including `resolve_triples` in `TripleSource`: ok, you convinced me :-)\r\n\r\nre. duplicate items in `triple::stream` and `quad::stream`: first I to reuse the types from `triple::stream` in `quad::stream` (only adding additional traits to them), but this required a bunch of `pub(crate)` qualifiers, which I thought were not very elegant..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596221570> <http://schema.org/startDate> "2020-03-08T16:07:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596221570> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-596221570"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596240528> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596240528> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596240528> <http://schema.org/description> "Thank you. Moving the `IRI` type out also looks interesting. Currently I have my own `IRI` type, and have also been using https://docs.rs/curie/0.1.1/curie/ which (effectively) provides a third. Perhaps there needs to be some coming together here, or a separate crate?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596240528> <http://schema.org/startDate> "2020-03-08T19:09:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596240528> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/51#issuecomment-596240528"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596543949> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596543949> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596543949> <http://schema.org/description> "It seems to me that the issue of adapters for Triple- and QuadSources goes of topic of this PR.\r\n\r\nI conclude this PR with an `IntoIterator` implementation for `Resolver`.\r\n\r\nThere is no coding left I want to do regarding the PR's topic. Therefore, I removed the [WIP] tag and suggest this PR for merging." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596543949> <http://schema.org/startDate> "2020-03-09T14:06:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596543949> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-596543949"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596673820> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596673820> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596673820> <http://schema.org/description> "I'm happy with this PR, **except** for the `IntoIter` impl for `Resolver` (see my comment on the code). Actually, I think that the `resolve_triples`/`Resolver` thing be treated separately. In particular, I came to the conclusion that `TripleSource::resolve_triples` should be implemented as follow:\r\n\r\n```rust\r\n    fn resolve_triples<'a>(self, base: IriParsed<'a>) -> MapSource<Self, XXX>\r\n    where /* ... */\r\n    {\r\n        self.map_triples(move |t| base.resolve(t))\r\n    }\r\n```\r\nThis way, we would inherit all the `impl`s attached to `MapSource`, including `IntoIter`.\r\n\r\nThe only problem is the `XXX` in the return type of the method; we need to put there the exact type of the closure, which is not possible :-/ But I can see a solution to this: make `MapSource` more generic: instead of expecting a `FnMut(StreamedTriple<S::Triple>) -> T`, it would expect a trait `SourceMapper<S>`, which would be implemented by `FnMut(StreamedTriple<S::Triple>) -> T`, but also other types...\r\n\r\nI suggest we get rid of all the parts of this PR that relate to `resolve_triple` and the `Resolver` type. This will be added in the future PR addressing #52. Ideally, this would be done by cherry-picking the relevant commits and submitting a clean branch. But if that's too much hassle, and you prefer to just remove all this with an additional commit, I'll understand." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596673820> <http://schema.org/startDate> "2020-03-09T17:36:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/596673820> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-596673820"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598038987> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598038987> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598038987> <http://schema.org/description> "I found out that the macro `#![deny(missing_docs)]` can not only be applied to the whole library but also to (sub-)modules. Meaning the documentation effort can be progressed iteratively.\r\n\r\nTherefore, I propose to mark this issue 'help_wanted' and 'good_first_issue'." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598038987> <http://schema.org/startDate> "2020-03-12T07:09:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598038987> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/44#issuecomment-598038987"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590313> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590313> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590313> <http://schema.org/description> "- [x] No further content to add to this PR.\r\n- [x] Conversations are resolved.\r\n- [x] Documentation is added.\r\n- [x] Tests were added.\r\n\r\nI think its ready to be merged." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590313> <http://schema.org/startDate> "2020-03-13T07:36:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590313> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/49#issuecomment-598590313"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590851> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590851> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590851> <http://schema.org/description> "> Merge the stream submodules into a top-level module stream equal to triple and quad.\r\n\r\nI started trying this out, factorizing some of the code into a `StatementSource` trait, then defining specializations of it as `TripleSource` and `QuadSource`. But I ran into the following problem:\r\n\r\nOne can not easily use the specialized traits in a trait bound. Instead of writing\r\n```rust\r\n        pub fn consume_triple_source<TS: TripleSource>(mut ts: TS) \r\n        { /*...*/ }\r\n````\r\none needs to write\r\n```rust\r\n        pub fn consume_triple_source<TS: TripleSource>(mut ts: TS) \r\n        where <TS::Mode as StreamingMode>::Item: UnsafeTriple\r\n        { /*...*/ }\r\n````\r\nwhich is unintuitive and cumbersome. This does not go in the direction of making the API easier...\r\n\r\nI put [a summarized version of this problem](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=cb7ee5fdcb52bfff47d8f143ac7fd461) in the playground.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590851> <http://schema.org/startDate> "2020-03-13T07:37:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/598590851> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/52#issuecomment-598590851"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599254389> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599254389> <http://schema.org/creator> <https://api.github.com/users/dwhitney> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599254389> <http://schema.org/description> "Isaac Newton invented calculus while quarantined, so I guess I can write a SPARQL parser? I've used the oxigraph library quite a bit, and I like it, but the slowest part of it is its parser (acknowledged by @Tpt). I guess I can just start writing one and then ask for feedback? I'd like to to parse into a common AST. I guess using the oxigraph algebra is sufficient?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599254389> <http://schema.org/startDate> "2020-03-15T19:35:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599254389> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-599254389"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599397796> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599397796> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599397796> <http://schema.org/description> "@dwhitney that would awesome...  :-)\r\n\r\nSophia has evolved quite a bit in the meantime, in order to be more usable as a common API for RDF in Rust. @Tpt and I have agreed (in a discussion offline) that a good way forward would be to extract oxigraph's SPARQL parser and AST into a separate crate, using sophia's `Term` type as a building block.\r\n\r\nFYI, the `Term` type is currently being refactored (#47, #48, #49). Once this is finished (Literals still need to be done), I plan to extract it into a separate crate `sophia_term`, so that crates using it, such as this new SPARQL crate, would not end up importing the whole of sophia." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599397796> <http://schema.org/startDate> "2020-03-16T08:07:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/599397796> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-599397796"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600023497> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600023497> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600023497> <http://schema.org/description> "@dwhitney Great! Thank you! I have done some changes in the parser that have significantly improve the speed of the current parser (migration to peg 0.6 and avoiding duplicate parsing)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600023497> <http://schema.org/startDate> "2020-03-17T11:37:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600023497> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-600023497"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600563139> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600563139> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600563139> <http://schema.org/description> "For me I did everything on my list is done and now the PR is ready to be merged.\r\n\r\nIf any changes are requested I'm happy to follow or discuss." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600563139> <http://schema.org/startDate> "2020-03-18T11:12:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/600563139> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/53#issuecomment-600563139"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601188663> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601188663> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601188663> <http://schema.org/description> "One moment please I'm just doing some last minor changes myself" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601188663> <http://schema.org/startDate> "2020-03-19T13:48:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601188663> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/53#issuecomment-601188663"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601190395> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601190395> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601190395> <http://schema.org/description> "Now I'm done :wink: " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601190395> <http://schema.org/startDate> "2020-03-19T13:51:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/601190395> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/53#issuecomment-601190395"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602095344> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602095344> <http://schema.org/creator> <https://api.github.com/users/dwhitney> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602095344> <http://schema.org/description> "Haven't had as much time as I'd like to look at this (still working from home). I found this parser. Have either of you taken a look at it? https://github.com/mattsse/nom-sparql\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602095344> <http://schema.org/startDate> "2020-03-21T19:55:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602095344> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-602095344"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602250770> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602250770> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602250770> <http://schema.org/description> "@dwhitney I was not aware of this paper, thanks! There seems to be no code related to testing the parser against the W3C testsuite, I don't know how correct it is." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602250770> <http://schema.org/startDate> "2020-03-22T18:22:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602250770> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-602250770"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602251830> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602251830> <http://schema.org/creator> <https://api.github.com/users/dwhitney> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602251830> <http://schema.org/description> "Yeah if your parser's performance has increased enough, perhaps there is no\nneed to invest the time in a new one, but before you made your\nimprovements, parsing was often the slowest part of the query by several\norders of magnitude.\n\nOn Sun, Mar 22, 2020, 2:22 PM Thomas Tanon <notifications@github.com> wrote:\n\n> @dwhitney <https://github.com/dwhitney> I was not aware of this paper,\n> thanks! There seems to be no code related to testing the parser against the\n> W3C testsuite, I don't know how correct it is.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pchampin/sophia_rs/issues/19#issuecomment-602250770>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAAIFIIH7HSAOK7GVOURAT3RIZJO3ANCNFSM4JY2PGVA>\n> .\n>\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602251830> <http://schema.org/startDate> "2020-03-22T18:30:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/602251830> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-602251830"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/603690027> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/603690027> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/603690027> <http://schema.org/description> "I'm waiting to see your POC, but I'm not sure exactly what benefit you would gain from such a trait, especially if Iri, Literal and BlankNode are still constrained to be concrete types...\r\n\r\nNote that nothing forces implementations of Sophia's traits (Graph, Dataset, Parser, Serializer...) to use Term internally. For example, Rio parsers do not, but still interoperate with Sophia. All that is required is to provide easy ways to convert internal \"terms\" to and from Sophia's Term.\r\n\r\nFor that matter, thanks to the TermData parameter, Term is already rather flexible:\r\n\r\n* `Term<&str>` aka `RefTerm` can be cheaply constructed whenever `str` data is already available;\r\n* self-owning variants, such as `Term<Box<tr>>` or `Term<Rc<str>>` (aka `BoxTerm` and `RcTerm` respectively) can be used in other cases;\r\n* maybe we should also give more visibility to `Term<Cow<str>>`, giving it a type alias of its own (`CowTerm`), as it provides a nice trade-off between the two options above.\r\n\r\nThat being said, as I wrote, I'm curious to see your POC, and I remain open to discussion on this issue." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/603690027> <http://schema.org/startDate> "2020-03-25T07:45:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/603690027> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-603690027"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604456753> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604456753> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604456753> <http://schema.org/description> "I see where this comes from; a student of mine also had a dependency problem when he pulled the commit splitting sophia in two distinct crates. However, I don't think this PR is the correct way to solve it.\r\n\r\nFirst: I don't know how the `path` hack in `sophia/Cargo.toml` will behave once published on crates.io, but I'm guessing not very well.\r\n\r\nSecond: I wish to keep the version numbers of all sophia crates aligned, (at least on the first two components). This will make maintenance much easier (even though it might seem strange for sophia-term to begin its life at version 0.4.0... :wink:)\r\n\r\nThe clean solution to your problem, I think, is to add the following section to *your* `Cargo.toml`:\r\n```toml\r\n[patch.crates-io]\r\nsophia-term = { git = 'https://github.com/pchampin/sophia_rs' }\r\n```\r\nThis instuct cargo to look for sophia-term in the git repo, whoever asks for it (including sophia itself).\r\n\r\nWe found this solution here:\r\nhttps://doc.rust-lang.org/cargo/reference/overriding-dependencies.html\r\n\r\nDoes this solve your problem?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604456753> <http://schema.org/startDate> "2020-03-26T14:17:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604456753> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/56#issuecomment-604456753"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604491371> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604491371> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604491371> <http://schema.org/description> "Ok, PRs are much faster committed then they should :wink: .\r\n\r\nAfter further research we are both right. In order to use the newest version of `sophia` in `metis` I'll add the patch-section to my `Cargo.toml`. However, the `path` should also be added to `sophia/Cargo.toml`. It allows you to work with the [local version](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) of `sophia_term`during development once the (sub-)crate is published.\r\n\r\nRegarding the version of `sophia_term` I thought this might be a copy'n'paste error. As this is intentional I will not argue about versioning.\r\n\r\nAccordingly, you can either close this PR or I'll remove the changes at `term/Cargo.toml` in an additional commit and you can squash the commits." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604491371> <http://schema.org/startDate> "2020-03-26T15:20:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604491371> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/56#issuecomment-604491371"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604581594> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604581594> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604581594> <http://schema.org/description> "> However, the `path` should also be added to `sophia/Cargo.toml`. It allows you to work with the [local version](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) of `sophia_term` during development once the (sub-)crate is published.\r\n\r\nAwesome, thanks for doing the research ;-) I'll do this right away." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604581594> <http://schema.org/startDate> "2020-03-26T17:53:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604581594> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/56#issuecomment-604581594"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604587671> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604587671> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604587671> <http://schema.org/description> "FTR, from a few tests that I just made :\r\n* `path = \"../term\"` in `sophia/Cargo.toml` solves the problem for *local* installations only (i.e. when your `Cargo.toml` specifies a `path` for sophia);\r\n* however, if your `Cargo.toml` uses `git = \"...\"` (even with a *local* git repo), you seem to need the `patch.crates.io` directive.\r\n\r\nSo both solve slightly different problems." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604587671> <http://schema.org/startDate> "2020-03-26T18:05:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/604587671> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/56#issuecomment-604587671"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605917669> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605917669> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605917669> <http://schema.org/description> "Actually, this discussion about `Term<Cow<str>>` has been on my mind lately, and I just pushed some work (39733c4a) in that spirit.\r\n\r\n* I created my own, lighter version, of `Cow<str>`, called `MownStr` (enjoy the pun), for \"maybe owned string\".\r\n* I added the `MownTerm<'a>` alias for `Term<MownTerm<'a>>`\r\n* I slightly changed the contract of `Resolve` in the process (it is now infallible in most cases).\r\n* `Resolve` can now produce `MownTerm` in addition to `Term<TD2>` (NB: there is no conflict, because `TD2` is bound to `for<'x> From<&'x str>`, which `MownTerm` does not implement).\r\n\r\nI think this addresses most of the points you raise above." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605917669> <http://schema.org/startDate> "2020-03-30T10:27:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605917669> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/60#issuecomment-605917669"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605948540> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605948540> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605948540> <http://schema.org/description> "I like the idea of `map` very much.\r\n\r\nA few remarks\r\n* I would allow the function passed to `map` to alter the underlying text. Doing otherwise would break the user's expectation about what `map` does (in any other type, this is the main purpose of `map` after all). Granted, modifying the string is more hazardous here, since the function does not know the *context* of the string (is it a ns? a suffix? the value of a literal?...). But I still think this sould be allowed.\r\n*  I think we could then simply get rid of `clone_with`, which essentially does the same thing -- or maybe rename it to `map_str`, for the sake of regularity.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605948540> <http://schema.org/startDate> "2020-03-30T11:38:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605948540> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/61#issuecomment-605948540"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605962707> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605962707> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605962707> <http://schema.org/description> "Nice work I'll try integrate it. Maybe `MownStr` is worth its own crate ...?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605962707> <http://schema.org/startDate> "2020-03-30T12:13:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/605962707> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/60#issuecomment-605962707"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606020612> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606020612> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606020612> <http://schema.org/description> "While refactoring #61 for `MownStr` I discovered that normalization has an equivalent issue as resolve. Should there be a similar two-way-implementation with one extra for `MownStr`? I think we already had a similar discussion during #49 where I switched to only `Cow<str>` witch you denied because it was no longer possible to use `TermFactory`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606020612> <http://schema.org/startDate> "2020-03-30T14:06:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606020612> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/60#issuecomment-606020612"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606139516> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606139516> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606139516> <http://schema.org/description> "Included in PR #59, which has been merged" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606139516> <http://schema.org/startDate> "2020-03-30T17:36:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606139516> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/57#issuecomment-606139516"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606445928> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606445928> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606445928> <http://schema.org/description> "Just an afterthought: I'd like to keep `clone_with` after all, and renamingir `map_str` would *not* be a good idea: `map` (and `map_X`) consumes the term, while `clone` (and hence `clone_X`) only borrows it." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606445928> <http://schema.org/startDate> "2020-03-31T07:16:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606445928> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/61#issuecomment-606445928"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606455420> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606455420> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606455420> <http://schema.org/description> "Yep, this also came to my mind. I think it would make sense to have\r\n```rust\r\n    pub fn normalized(&self, policy: Normalization) -> MownTerm\r\n```\r\nnext to `clone_normalized_with`.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606455420> <http://schema.org/startDate> "2020-03-31T07:38:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606455420> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/60#issuecomment-606455420"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606607168> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606607168> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606607168> <http://schema.org/description> "With the latest commit this PR is now ready to be merged from my perspective.\r\n\r\nBTW the replacement of `.into()` by `.clone_into()` revealed many opportunities to optimize implementations, I think." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606607168> <http://schema.org/startDate> "2020-03-31T12:51:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/606607168> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/61#issuecomment-606607168"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/607863675> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/607863675> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/607863675> <http://schema.org/description> "@MattesWhite please do not merge master in the middle of a PR. I'd rather you rebase it on top of master and force push it -- or do it myself just before the merge. It makes the history much nicer (call this vanity :wink:).\r\n\r\nApart from that, very nice work, thanks. I'll do the tidying and merge it." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/607863675> <http://schema.org/startDate> "2020-04-02T13:58:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/607863675> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/61#issuecomment-607863675"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/609587820> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/609587820> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/609587820> <http://schema.org/description> "Do you still want to have a `factory` in the _mown_-version? I think the `_with(factory)` methods are mostly used with `TermFactory` and this is another approach to avoid copies than `MownStr`. In addition, we would actually require two factories for `MownStr`: `fn(&'a str) -> MownStr<'a>` and `fn(String) -> MownStr<'_>`.\r\n\r\nOn further thinking, it may even make sense to add those two functions to `TermFactory` and instead of passing a closure to `_with(factory)` methods pass an `impl TermFactory`. By passing an owned `String` to a `TermFactory` it could make use of the existing allocated data to create a new `Rc`, `Arc` or whatever, saving another copy with zero costs. I think it should also be possible to then implement `TermFactory` for `(fn(&str) -> TD, fn(String) -> TD)`.\r\n\r\n_Note:_ Requiring that `fn(String) -> TD` is possible would mean that `&str` could not be used as `TD` in such a context." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/609587820> <http://schema.org/startDate> "2020-04-06T06:19:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/609587820> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/60#issuecomment-609587820"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610228266> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610228266> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610228266> <http://schema.org/description> "Thanks for this proposal. I don't think I agree with your premise \"`Namespace` was practically another Iri-type\":\r\n\r\n* a `Namespace` is neither an IRI nor a Term (you can not use it in a triple or a quad). If anything, it relates more to `TermFactory`;\r\n\r\n* not any `Iri` can be used as a `Namespace` -- as your comment above points out, the correct behavior of `with_suffix` is not entirely trivial with \"suffixed\" IRIs.\r\n\r\nFurthermore, `schema.get(\"Person\")` looks much nicer, I think, than `Term::from(schema.with_suffix(\"Person\"))`.\r\n\r\nI could see the value of providing `From` conversion from `Iri` to `Namespace`, and possibly a `get_iri` method in `Namespace`, in addition to `get`... But as for replacing `Namespace` with `Iri` entirely... not convinced yet, sorry." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610228266> <http://schema.org/startDate> "2020-04-07T07:38:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610228266> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/62#issuecomment-610228266"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610250578> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610250578> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610250578> <http://schema.org/description> "Okay naming `Namespace` another IRI-type were maybe not the best words. In fact, some transitions between `Namespace` and `Iri` might be more reasonable.\r\n\r\n```rust\r\nlet var = Term::from(schema.with_suffix(\"Person\")?);\r\n// maybe better looking\r\nlet var: Term<_> = schema.with_suffix(\"Person\")?.into();\r\n```\r\n\r\nThe thing is I would really like to return `Iri` instead of `Term`. The reason is re-usability. Of course we could do a `.try_into()` if we need an IRI but this would introduce another error-handling.\r\n\r\n---\r\n\r\n**To give some context:**\r\n\r\nI'm currently updating `metis` to the current state of `sophia`. This will also be the PoC of how a `Term`-trait could benefit `sophia` (see #55). I planned to use `Namespace` for the prefixes. However, after parsing a prefix's IRI it must be resolved against the current base IRI. Meaning (I) parse the IRI, (II) resolve the `Iri`  and finally (III) convert `Iri` to `Namespace`. Hence, the PR. Maybe a `impl Resolve<Namespace> for IriParsed` could also help :thinking:.\r\n\r\nIdeally, I could reuse the prefix-parser from Turtle for N3. Which means that I would like to return an `Iri` as Turtle and N3 use different _terms_ which both implement `From<Iri>`. In fact, my N3Term looks something like:\r\n\r\n```rust\r\nenum N3Term<TD> {\r\n    Iri(Iri<TD>),\r\n    Literal(Literal<TD>),\r\n    Existential(BlankNode<TD>),\r\n    Universal(Variable<TD>),\r\n    Formula(Formula<TD>), // some kind of `Graph<N3Term>`\r\n    List(Vec<N3Term<TD>>),\r\n}\r\n```\r\n\r\nAs you can see I would like to reuse a `Graph` implementation of `sophia` which I can't do because it's fixed to `sophia_term::Term`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610250578> <http://schema.org/startDate> "2020-04-07T08:26:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610250578> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/62#issuecomment-610250578"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610267939> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610267939> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610267939> <http://schema.org/description> "A part of [this comment](https://github.com/pchampin/sophia_rs/pull/62#issuecomment-610250578) from @MattesWhite on #62 is more relavant to this topic:\r\n\r\n> Ideally, I could reuse the prefix-parser from Turtle for N3. Which means that I would like to return an `Iri` as Turtle and N3 use different _terms_ which both implement `From<Iri>`. In fact, my N3Term looks something like:\r\n> \r\n> ```rust\r\n> enum N3Term<TD> {\r\n>     Iri(Iri<TD>),\r\n>     Literal(Literal<TD>),\r\n>     Existential(BlankNode<TD>),\r\n>     Universal(Variable<TD>),\r\n>     Formula(Formula<TD>), // some kind of `Graph<N3Term>`\r\n>     List(Vec<N3Term<TD>>),\r\n> }\r\n> ```\r\n> \r\n> As you can see I would like to reuse a `Graph` implementation of `sophia` which I can't do because it's fixed to `sophia_term::Term`.\r\n\r\nThanks, this helps me understand the benefit you expect from a `Term` trait.\r\n\r\nI had already given some thoughts (although not as much as you) to N3 and Sophia, and my idea was that N3 *could* be encoded in the generalized model provided by Sophia. Namely:\r\n\r\n* lists are represented by a chain of blank nodes,\r\n* formulae are represented by named graphs (with blank nodes as names).\r\n\r\nSo rather than forcing some `N3Term` type into a plain Sophia `Graph`, I would have gone for using a Sophia `Dataset` as a back-end, and wrapping it in a `N3Graph` providing a higher level API. I don't know if that makes sense.\r\n\r\nMay be you have already explored this lead and found it unfeasible or suboptimal... It is very possible that I am overlooking some problems of this approach.\r\n\r\nBut what you propose seems to extend Sophia's scope much beyond RDF. Granted, the current generalized model already extends it... but this is even much more. For example, what you suggest is that not all implementations of the `Term` trait would be entirely interoperable. If I get a triple out of an N3Graph, and that triple involved a formula, what happens when I try to insert it in another graph?\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610267939> <http://schema.org/startDate> "2020-04-07T09:02:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610267939> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-610267939"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610269117> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610269117> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610269117> <http://schema.org/description> "> Maybe a `impl Resolve<Namespace> for IriParsed` could also help :thinking:\r\n\r\nYep, that would look much better to me. This and a `get_iri` method on `Namespace`, so that you can get an `Iri` instead of a `Term`..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610269117> <http://schema.org/startDate> "2020-04-07T09:04:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610269117> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/62#issuecomment-610269117"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610384544> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610384544> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610384544> <http://schema.org/description> "Once again a good discussion :+1: \r\n\r\nI committed a new PR (#63) that applies the changes discussed. Therefore, I close this PR." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610384544> <http://schema.org/startDate> "2020-04-07T13:24:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610384544> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/62#issuecomment-610384544"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610778959> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610778959> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610778959> <http://schema.org/description> "Granted your suggestion for a `N3Graph` could work. But you are right. Such a hacked implementation is far from what I imagine. Given the complexity we already have in returning triples, further abstraction don't make things better. All in all, I think I should be satisfied with the possibility to re-use `sophia`'s `Term` and its subtypes, implementing N3 on top is still a huge amount of work. However, I'm convinced that an N3-engine in Rust could out-perform existing N3-engines by orders of magnitudes if we look at `cwm` (Python), `ldfu` (Java) and EYE (Prolog).\r\n\r\nIn summary I'll close this issue as this (as you mentioned) exceeds the intended implementation of RDF to far.\r\n\r\n---\r\n\r\n**Problems with `Dataset` as `N3Graph`**\r\n\r\nA short list of problems of your suggestion for the record:\r\n\r\n- Lists are a first class datatype in N3. The `rdf:first`/`rdf:rest` implementation in RDF is rather a reification of N3-lists. Therefore, it makes sense to handle lists as some kind of N3-Term.  \r\n- Lists are frequently used and manipulated in built-in functional predicates each time traversing the formula would probably be very expensive.\r\n- Each time resolving if a blank node is a formula-expression or simply a blank node should be expensive as well.\r\n\r\nAs mentioned above, I imagine a performance optimized N3-engine. Accordingly, an optimized implementation of a `Formula` is more practical than re-using `sophia`'s `Graph`s or `Dataset`s." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610778959> <http://schema.org/startDate> "2020-04-08T06:36:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610778959> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-610778959"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610779419> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610779419> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610779419> <http://schema.org/description> "Isn't this issue solved due to the `Resolve`-trait?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610779419> <http://schema.org/startDate> "2020-04-08T06:38:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610779419> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/50#issuecomment-610779419"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610799521> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610799521> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610799521> <http://schema.org/description> "Again, I am thrilled by your project of an N3 implementation in Rust. And I sympathize entirely with your concerns about performances. Actually, thinking a little more about that, I beleive this should be the opposite: `N3Graph` should have its own implementation, but comply with the `Graph` traits (and/or possibly the `Dataset` traits, although that requires some thinking...).\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610799521> <http://schema.org/startDate> "2020-04-08T07:31:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610799521> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-610799521"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610806512> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610806512> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610806512> <http://schema.org/description> "Absolutely! :tada: " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610806512> <http://schema.org/startDate> "2020-04-08T07:47:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/610806512> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/50#issuecomment-610806512"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611482928> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611482928> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611482928> <http://schema.org/description> "> Do you still want to have a factory in the mown-version?\r\n\r\nNo, of course not! I fixed it in my comment. Thanks.\r\n\r\n> it may even make sense (..) instead of passing a closure to `_with(factory)` methods pass an `impl TermFactory`\r\n\r\nWell, not currently, because the methods in `TermFactory` rely on the `_with(factory)` methods...\r\n\r\n> By passing an owned `String` to a `TermFactory` it could make use of the existing allocated data to create a new `Rc`, `Arc`.\r\n\r\nI thought so at first, but actually no: `Rc<str>`( and `Arc<str>`) reallocate the `str` data (together with its ref-counting data) (see [this example](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=87c9044f9dfcdc8af7512e59a70e8046)).\r\n\r\nUsing `Rc<String>` instead of `Rc<str>` would make this kind of optimization possible, but might introduce additional hidden cost (fragmenting the memory more, longer deallocation...). Furthermore, the primary goal of `TermFactory` is to *avoid* allocations, and reuse an existing `TermData` instead, so I'm not sure about the ROI if such optimization...\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611482928> <http://schema.org/startDate> "2020-04-09T11:41:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611482928> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/60#issuecomment-611482928"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611494160> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611494160> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611494160> <http://schema.org/description> "Actually, I'm currently trying some refactoring on `TermFactory`, which might address your concerns. Will probably push later this afternoon..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611494160> <http://schema.org/startDate> "2020-04-09T12:11:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611494160> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/60#issuecomment-611494160"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611580942> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611580942> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611580942> <http://schema.org/description> "Done, the commit referenced above, as well as aff86514, make it easier to convert terms while limiting the number of (re-)allocations. This relies largely on combining `MownStr`/`MownTerm` with the `map` methods you introduced in `Term`, which were definitely a super good idea :)\r\n\r\nDoes that fit your needs?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611580942> <http://schema.org/startDate> "2020-04-09T15:09:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611580942> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/60#issuecomment-611580942"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611988817> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611988817> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611988817> <http://schema.org/description> "Nice work 👍 I think this simplification will realy increase the usability of `sophia`.\r\n\r\nInspecting the `_join.rs` I found the implementation of `Resolve<Literal>` a little bit akward. I think this could easily optimzed as it calls `dt.value().as_ref()`... maybe this could be improved as part of the PR. Something like matching on the literal's kind and then use `self.resolve(dt)` or so." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611988817> <http://schema.org/startDate> "2020-04-10T11:18:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/611988817> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/65#issuecomment-611988817"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/612011568> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/612011568> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/612011568> <http://schema.org/description> "I agree that this is ugly, but I couldn't figure a way to make it work by simply resolving `other.dt()`. Lifetime hell strikes again... I don't have the bandwidth to address it right now, but fell free..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/612011568> <http://schema.org/startDate> "2020-04-10T12:38:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/612011568> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/65#issuecomment-612011568"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/613296590> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/613296590> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/613296590> <http://schema.org/description> "While thinking on a graph implementation and the `map()` stuff I stumbled upon another use-case for a `Term` trait:\r\n\r\nIn a bunch of cases terms are passed as read-only references, e.g. the filter methods of `Graph`. Currently, reference passing is either done by monomorphization or `&RefTerm`. Both have disadvantages. Monomorphization blows up code-size and compilation times while `&RefTerm` requires often the creation of a new `Term` instance. I think this is one of the rare cases where passing a trait object per `&dyn TermTrait` would be more sufficient.\r\n\r\nThe described use-case is similar to `TermMatcher` and indeed we could re-use or improve it. \r\n\r\nI haven't flashed out this thought entirely but I think we could use this to simplify some of `sophia`'s APIs. In addition, it may make sense to move `Graph`'s filter-methods to `TripleSource` (as well as for `Dataset` and `QuadSource`) (#52)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/613296590> <http://schema.org/startDate> "2020-04-14T08:19:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/613296590> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-613296590"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614126235> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614126235> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614126235> <http://schema.org/description> "If I understand trait objects correctly, `&dyn TermTrait` is *not* a direct reference to your, say, `RcTerm`, but a reference to an object, automatically created by the compiler, that contains a pointer to your `RcTerm` as well as a table of pointers to its methods (the equivalent of C++'s [virtual table](https://www.learncpp.com/cpp-tutorial/125-the-virtual-table/)). My guess is that creating this trait object is at least as expensive as creating a `RefTerm`...\r\n\r\nBut yes, we could consider simplifying the API, and requiring `RefTerm`s everywhere the current API accepts `Term<T>` for any `T`. Note however, that with the current approach, developers have a choice: reduce compile time and image size by *only* calling `Graph` methods with `RefTerm`s, or reduce execution time by passing whatever term they have at hand, and relying on monorphization. In any case, thorough testing of different options is the only way to know which is the best.\r\n\r\n> In addition, it may make sense to move `Graph`'s filter-methods to `TripleSource`\r\n\r\nThis is already the case. Any iterator of `Result<Triple, _>` is a `TripleSource`. And as a bonus, itis also an iterator :-)\r\nhttps://github.com/pchampin/sophia_rs/blob/f8f030448efa70c2a0576319ec796c6fe1935ec4/sophia/src/triple/stream/_iterator.rs#L8-L13" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614126235> <http://schema.org/startDate> "2020-04-15T15:58:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614126235> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-614126235"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614157903> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614157903> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614157903> <http://schema.org/description> "I am not a big fan of moving this particular implementation of `Resolve` away from all the others...\r\nTurns out that I managed to solved problem inside the `_join` module (619fe8e)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614157903> <http://schema.org/startDate> "2020-04-15T16:57:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614157903> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/66#issuecomment-614157903"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614453763> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614453763> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614453763> <http://schema.org/description> "Okay I agree with you the use of `RefTerm` mitigates the usage of a trait-object `&dyn TermTrait`. In fact, I tried a little bit around to implement a `TermTrait` that hasn't a `<TD>` type parameter which is necessary to avoid monomorphization. If it should be usable it requires to be comparable to at leas some kind of `&Term<TD>` and I didn't find a way of doing it with returning a `RefTerm` :roll_eyes: ...\r\n\r\n---\r\n\r\n> If I understand trait objects correctly, `&dyn TermTrait` is _not_ a direct reference ...\r\n\r\nWell, your understanding is mostly true. `&dyn Trait` is a so-called fat pointer that, as you stated correctly, contains two pointers: The first points to the data passed in and the second points to the datatype's `vtable`. All in all, the creation of a trait object only requires taking a pointer to the data and the `vtable`-pointer is probably already defined at compile time which means creating a trait object has nearly the same cost as taking a _single_ normal reference where a `RefTerm` allocates a whole new `Term` (see size-table below). The real cost of a trait object is that it's methods can no longer be inlined by the compiler, probably resulting in less efficient/optimized code.\r\n\r\nMaybe it is better to show the impact of an trait object when we look at the size of different `Term`s:\r\n\r\n```\r\n// Results of std::mem::size_of<${type}>():\r\nSize of RefTerm:       72\r\nSize of Term<String>:  96\r\nSize of BoxTerm:       72\r\nSize of MownTerm:      96\r\nSize of RcTerm:        72\r\nSize of ArcTerm:       72\r\nSize of &dyn Error:    16\r\n-------------------------\r\nSize of Term<&str>:    72\r\nSize of Literal<&str>: 64\r\nSize of Iri<&str>:     40\r\nSize of &str:          16\r\n```\r\n\r\nAs you can see on my 64bit machine each `RefTerm` requires the allocation of 72 additional bytes of the stack (9 words!) while a trait object always only has a size of 16 bytes, i.e. 2 words." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614453763> <http://schema.org/startDate> "2020-04-16T07:01:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614453763> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-614453763"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614496052> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614496052> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614496052> <http://schema.org/description> "> All in all, the creation of a trait object only requires taking a pointer to the data and the vtable-pointer is probably already defined at compile\r\n\r\nMakes sense. I stand corrected, then.\r\n\r\nThe point your raise about the size of `Term` in general is valid. One question that I still have is: is it worth it two have IRIs split in ns+suffix? How much time and space does it save, compared to the burden of carrying fat `Term`s around? Unfortunately, investigating this would be very time consuming... This would be easier if `Term` was a trait, though :-D\r\n\r\nRegarding monoporphization of `Graph`/`Dataset` methods, it looks as a different (although related) issue to me. Would you mind posting a new issue on that particular subject?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614496052> <http://schema.org/startDate> "2020-04-16T08:26:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614496052> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-614496052"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614541777> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614541777> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614541777> <http://schema.org/description> "Thought: a good point about a `Term` trait would be that types such as `Iri` or `Literal` could implement that trait too. This would spare us conversions in many situations.\r\n\r\nOther thought: if we want to be able to use `&dyn Term`, then that puts limitations on the methods of `Term`. In particular, it can have no \"constructor\" (method returning Self). This limitation might come back to bite us sometime...\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614541777> <http://schema.org/startDate> "2020-04-16T09:50:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614541777> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-614541777"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614673773> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614673773> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614673773> <http://schema.org/description> "Yet another thought: currently the `Term<T>` type implements `PartialEq<Term<U>>`, meaning that I can write `t1 == t2` with any two terms. I don't think we could make it with a trait (especially given the constraints on trait objects).\r\n\r\nOf course, we could define a function `fn term_eq<T1: Term, T2: Term>(t1: &T1, t2: &T2) -> bool` but that would not be as nice. Is this really bad, though..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614673773> <http://schema.org/startDate> "2020-04-16T14:04:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614673773> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-614673773"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614679485> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614679485> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614679485> <http://schema.org/description> "In general, I think that the API should not impose the use of trait objects. Assuming we have a `Term` trait, having functions accept `&T where T: Term` is the best option: people who want compile-time optimization can pass references to concrete types; people who want to avoid monomorphization can restrict themselves to passing exclusively `dyn` references. Everyone can have it their way.\r\n\r\nI made one exception to that rule: `Graph`/`Dataset` methods return a boxed iterator (hence a trait object), because 1/ it allows for a default implementation, and 2/ the alternative was horribly cumbersome (declaring a bunch of associated types...)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614679485> <http://schema.org/startDate> "2020-04-16T14:13:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614679485> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/68#issuecomment-614679485"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614683534> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614683534> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614683534> <http://schema.org/description> "@MattesWhite I created a branch `term_trait` to experiment with this idea.\r\n\r\nHave a look at 9e878ad. If that's a kind of things you had in mind, we can try to propagate it into the rest of the API and see how it fits..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614683534> <http://schema.org/startDate> "2020-04-16T14:20:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/614683534> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-614683534"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615079919> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615079919> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615079919> <http://schema.org/description> "I think 9e878ad is a good point to start I added some comments to the commit.\r\n\r\nTL;DR:\r\n\r\nThe idea to downcast `TermTrait` seems promising. But instead of adding a `TermKind` I would introduce \"`KindTraits`\" that give a `&str`-only view on the underlying data." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615079919> <http://schema.org/startDate> "2020-04-17T07:02:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615079919> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-615079919"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615084599> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615084599> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615084599> <http://schema.org/description> "I'll need some time to process you \"downcasting\" idea. My gut feeling is that working with `match` is more convenient, but I'll ponder about it.\r\n\r\nI'd rather return `MownStr` than `&str` because some implementations may not have a ready to use `str` data to point to. Example: i32 as Literal. (Also, I have an idea to reduce the size of MownStr to 16 bits, just as much as `&str`, but that will be a different story).\r\n\r\n> This way we could have implementation of the traits based on `TermData::as_str()` rather than creating intermediate `RefTerms` (or `MownTerms`).\r\n\r\nI think my proposal also allows that. \r\n\r\n> Still we won't have to move the whole API of Iri and co to the traits as they are only intended to be used when terms are read-only.\r\n\r\nI don't understand this sentence... Terms are *always* read-only, they have no mutable method..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615084599> <http://schema.org/startDate> "2020-04-17T07:14:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615084599> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/69#issuecomment-615084599"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615086574> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615086574> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615086574> <http://schema.org/description> "My 2 cents:\r\n\r\n### Regarding - Pro - less memory consumption in `Graphs`\r\n\r\nThere is one tricky thing about using prefixes in `Graph`s. There is no unique prefix/suffix from a given IRI. For example, if we consider the IRI `http://example.com/foo#barbaz` if is perfectly valid in Turtle to define `@prefix bar: <http://example.com/foo#bar>` and `@prefix foo: <http://example.com/foo#>` and then use `bar:baz` or `foo:barbaz` for the same IRI. Because of that `Graph`s have to apply prefixes normalization, a process that has a cost. So, I am not sure if handling prefixes in `Graph`s does actually bring something compared to only storing absolute IRIs and use delta compression or tries to save space." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615086574> <http://schema.org/startDate> "2020-04-17T07:19:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615086574> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/67#issuecomment-615086574"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615091073> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615091073> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615091073> <http://schema.org/description> "> Terms are _always_ read-only, they have no mutable method...\r\n\r\nYes, I didn't flashed this out properly. What I meant was that in these cases, terms are not processed either, e.g. normalized, mapped or other methods that require access to the internals/the `TermData`. As you mentioned in #55 the `TermTrait` can/should not have constructors." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615091073> <http://schema.org/startDate> "2020-04-17T07:30:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615091073> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/69#issuecomment-615091073"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615121921> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615121921> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615121921> <http://schema.org/description> "@Tpt \r\n> There is no unique prefix/suffix from a given IRI\r\n\r\nThat's right. If one wants to use ns/suffix split to *optimize* memory consumption, then a form a normalization is required. But that's not a requirement in sophia, this split was introduced as an *opportunistic* optimization: whenever we construct IRIs having the same prefix (either by parsing them from Curies, or building them from a `Namespace` object), we do not *have* to duplicate the ns data.\r\n\r\n> only storing absolute IRIs and use delta compression\r\n\r\nBut then you have to decompress the data whenever you want to return a reference to it... That's ok for storage or transfer, but not for direct use." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615121921> <http://schema.org/startDate> "2020-04-17T08:40:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/615121921> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/67#issuecomment-615121921"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/617808563> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/617808563> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/617808563> <http://schema.org/description> "I didn't know that trick, it is great. Thanks.\r\n\r\nAnd yes, `Box<dyn std::error::Error>` is better than my ad-hoc `CatchAll` hack..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/617808563> <http://schema.org/startDate> "2020-04-22T14:20:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/617808563> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/71#issuecomment-617808563"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618930144> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618930144> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618930144> <http://schema.org/description> "Sorry for the merge misunderstood something... well this isn't going to be merged anyway..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618930144> <http://schema.org/startDate> "2020-04-24T10:22:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618930144> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/70#issuecomment-618930144"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618931156> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618931156> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618931156> <http://schema.org/description> "In the latest commit I introduce `IriView` which prevents `traits::Term` from returning a trait object. But `IriView` is actually only a wrapper for `&dyn Iri` so nothing won with that solution. However, I think this could be a valuable direction to go. I try further alternatives." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618931156> <http://schema.org/startDate> "2020-04-24T10:25:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/618931156> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/70#issuecomment-618931156"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619214118> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619214118> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619214118> <http://schema.org/description> "Solved by d7cb8c3." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619214118> <http://schema.org/startDate> "2020-04-24T20:01:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619214118> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/1#issuecomment-619214118"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216106> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216106> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216106> <http://schema.org/description> "FYI, 1bad729 indtroduced the crate [sophia_jsonld](https://crates.io/crates/sophia_jsonld).\r\n\r\nIr is very incomplete at the moment (only supports the [serialization from RDF](https://www.w3.org/TR/json-ld11-api/#serialize-rdf-as-json-ld-algorithm) algorithm), but that's a start..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216106> <http://schema.org/startDate> "2020-04-24T20:06:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216106> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/16#issuecomment-619216106"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216671> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216671> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216671> <http://schema.org/description> "Not published on crates.io yet, but an adapter for Oxigraph is now available at https://github.com/pchampin/sophia_oxigraph." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216671> <http://schema.org/startDate> "2020-04-24T20:08:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619216671> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/22#issuecomment-619216671"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619217756> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619217756> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619217756> <http://schema.org/description> "Can we close this, then?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619217756> <http://schema.org/startDate> "2020-04-24T20:11:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/619217756> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/68#issuecomment-619217756"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/620017119> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/620017119> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/620017119> <http://schema.org/description> "I have written for Oxigraph [a better version of the isomorphism algorithm than the one provided in Rio](https://github.com/Tpt/oxigraph/blob/2bbe29c31a584ed5c2519a3d28e562b83d8a5882/lib/src/model/isomorphism.rs).\r\n\r\nThis version does not support named graphs but uses iterative hashing to try to make easier to check when there are a lot of connected blank nodes.\r\n\r\nFeel free to reuse it, I spent more than a day on it, it would be very nice to make it useful outside of Oxigraph. Adding back named graphs support should not be hard." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/620017119> <http://schema.org/startDate> "2020-04-27T14:18:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/620017119> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/72#issuecomment-620017119"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/621818120> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/621818120> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/621818120> <http://schema.org/description> "@Tpt I detected an issue in the algorithm when a graph includes redundant blank nodes. The problem is closer described in the function's documentation." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/621818120> <http://schema.org/startDate> "2020-04-30T12:58:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/621818120> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/73#issuecomment-621818120"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/625689725> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/625689725> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/625689725> <http://schema.org/description> "With the latest commit this PR is complete and ready to be merged." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/625689725> <http://schema.org/startDate> "2020-05-08T07:51:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/625689725> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/73#issuecomment-625689725"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/626508407> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/626508407> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/626508407> <http://schema.org/description> "Does anyone know/understand why Travis CI stuck?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/626508407> <http://schema.org/startDate> "2020-05-11T06:53:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/626508407> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/73#issuecomment-626508407"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627193653> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627193653> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627193653> <http://schema.org/description> "> Does anyone know/understand why Travis CI stuck?\r\n\r\nCan you elaborate?\r\n\r\nNote that I don't have a strong feeling between Travis and Github CI. It's just that I'm no expert in either one." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627193653> <http://schema.org/startDate> "2020-05-12T08:27:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627193653> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/73#issuecomment-627193653"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627203404> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627203404> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627203404> <http://schema.org/description> "Well if I look [into Travis](https://github.com/pchampin/sophia_rs/pull/73/checks?check_run_id=656064037) it states that the check started about 4 days ago and is still queued. But no particular test is being executed so far. However, I ran the tests, clippy and fmt locally so non of them should fail.\r\n\r\nSubmitting another commit just to restart Travis wrong seems to me." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627203404> <http://schema.org/startDate> "2020-05-12T08:46:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627203404> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/73#issuecomment-627203404"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627427390> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627427390> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627427390> <http://schema.org/description> "After further (offline) discussions, I came to agree that this proposal is too generic and not appropriate." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627427390> <http://schema.org/startDate> "2020-05-12T15:45:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627427390> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/69#issuecomment-627427390"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627441455> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627441455> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627441455> <http://schema.org/description> "> Well if I look [into Travis](https://github.com/pchampin/sophia_rs/pull/73/checks?check_run_id=656064037) (...)\r\n\r\nthis is actually Github's rendering of Travis's report. If you click on the link at the bottom, you are lead [there](https://travis-ci.com/github/pchampin/sophia_rs/builds/164657789) which shows that all tests have passed 4 days ago.\r\n\r\nSo it seems to be a glitch on Github's side. Could this be intentional to lead us to migrate to GH CI? :smiling_imp: " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627441455> <http://schema.org/startDate> "2020-05-12T16:09:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627441455> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/73#issuecomment-627441455"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627775408> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627775408> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627775408> <http://schema.org/description> "As @pchampin is working on an introduction of a `Term` trait himself (which we agreed on in another online discussion), I close this PR." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627775408> <http://schema.org/startDate> "2020-05-13T06:29:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627775408> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/70#issuecomment-627775408"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627776002> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627776002> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627776002> <http://schema.org/description> "As the PR is already merged and only Travis is still doing silly things I clean up by closing this PR." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627776002> <http://schema.org/startDate> "2020-05-13T06:30:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/627776002> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/73#issuecomment-627776002"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633215000> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633215000> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633215000> <http://schema.org/description> "At last, this is implemented by 91bbb99.\r\nThis is a big change (including a few unrelated refactoring).\r\n\r\n@MattesWhite (or anyone else): if you struggle updating your code to this new version, contact me and I'll to help." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633215000> <http://schema.org/startDate> "2020-05-24T11:12:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633215000> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-633215000"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633467170> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633467170> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633467170> <http://schema.org/description> "First of all big respect for this major refactoring of the whole crate :clap: . I see the huge amount of work that has gone into it :+1: and the trait really integrates well.\r\n\r\nBut with such a large change there are some points I'd like to address which could further improve `sophia`.\r\n\r\n### `str_absolute()`\r\n\r\nThis function currently returns `i8` I'd like to suggest to use a dedicated `enum`. It shouldn't add overhead and makes the code more readable.\r\n\r\n### `term_*()` functions\r\n\r\nYou introduced several `term_*()` functions to provide generic default implementations for several standard traits, e.g. `Display`, `PartialCmp` and so on. \r\n\r\nTo make better use of Rust's type system I propose to introduce a dedicated type for these implementations:\r\n\r\n```rust\r\nstruct GenericTermImpl<T: TTerm + ?Sized>(T);\r\n\r\n// with\r\nimpl<T> Deref for GenericTermImpl<T> {\r\n    type Target = T;\r\n\r\n    ...\r\n}\r\n\r\n// and \r\nimpl<T> From<T> for GenericTermImpl<T> {...}\r\n```\r\n\r\nThis new-type clearly shows when a generic implementation is used and that implementors have the opportunity to write optimized implementations for their own types. In addition, this wrapper monomorphizes to nothing so it doesn't add overhead.\r\n\r\n### raw value\r\n\r\nThere are a bunch of `raw_*()` functions. I think there could be better documentation and more readable code by introducing a dedicated type:\r\n\r\n```rust\r\npub struct RawValue<'a>(pub &'a str, pub Option<&'a str>);\r\n```\r\n\r\n---\r\n\r\nI'd gladly submit PRs for my proposals if you like. However, with ESWC approaching I have only a limited capacity currently." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633467170> <http://schema.org/startDate> "2020-05-25T09:07:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633467170> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-633467170"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633614282> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633614282> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633614282> <http://schema.org/description> "Thanks for the appreciation ;-)\r\n\r\n* re. an enum for `str_absolute`: that would indeed be cleaner, but that would add some boiler plate for the return value of a single private function... I'm not convinced it is worth the trouble, but I'm not agains it.\r\n\r\n* re. a dedicated type for raw values: you are right, it makes sense now that we have a number of \"methods\" for this type...\r\n\r\n* re. `GenericTermImpl`: I'm not entirely following were you are going with this, but feel free to flesh it out in a PR, whenever you have time :)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633614282> <http://schema.org/startDate> "2020-05-25T15:06:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/633614282> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-633614282"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/640869307> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/640869307> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/640869307> <http://schema.org/description> "@phillord thanks for the report.\r\n\r\n@althonos you wrote the RDF/XML parser. Would you have time to take a look at this?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/640869307> <http://schema.org/startDate> "2020-06-08T20:30:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/640869307> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/76#issuecomment-640869307"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642527572> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642527572> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642527572> <http://schema.org/description> "which version of sophia are you using?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642527572> <http://schema.org/startDate> "2020-06-11T09:23:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642527572> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-642527572"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642542068> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642542068> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642542068> <http://schema.org/description> "Assuming you are using the latest release (0.5.3), I just pushed an experimental branch `rio_xml`. You might want to try it, and replace `xml::RdfXmlParser` by `xml2::RdfXmlParser` in your code, see if that solves this issue -- and possibly #76 as well.\r\n\r\nIf it does, I will probably switch to this implementation as the default RDF/XML parser." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642542068> <http://schema.org/startDate> "2020-06-11T09:54:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642542068> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-642542068"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642873104> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642873104> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642873104> <http://schema.org/description> "I'm trying to work my way through this. It seems to work and parse much quicker, but it's not a drop in replacement in my code.\r\n\r\nCurrently my main use for this just dumps graphs out into `[Term; 3]`. So I do this:\r\n\r\n````rust\r\n    let triple_iter = sophia::parser::xml::parse_bufread(bufread);\r\n\r\n    let triple_result: Result<Vec<_>, _> = triple_iter.collect();\r\n    let triple_v: Vec<[SpTerm; 3]> = triple_result.unwrap();\r\n````\r\n\r\nBut I can't drop in replace this with xml2, and I haven't managed to work out how to get triples from the `xml2::RdfXmlParser`. Apologies, I find the API rather confusing! I'd be grateful for any hints." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642873104> <http://schema.org/startDate> "2020-06-11T19:04:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642873104> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-642873104"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642889943> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642889943> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642889943> <http://schema.org/description> "> It seems to work and parse much quicker,\r\n\r\ngood\r\n\r\n> but it's not a drop in replacement in my code.\r\n\r\nnot quite, you are right...\r\n\r\n> Apologies, I find the API rather confusing! I'd be grateful for any hints.\r\n\r\nI should be the one to apologize... I'm sorry you feel that way about the API, and I am open to any suggestion to make it easier.\r\n\r\nNow about your problem:\r\n\r\n## TL/DR\r\nThis should work for you:\r\n```rust\r\n    let triple_source = sophia::parser::xml2::parse_bufread(bufread);\r\n    let triple_result: Result<Vec<[BoxTerm;3]>, _> = triple_source.collect_triples();\r\n    let triple_v = triple_result.unwrap();\r\n```\r\n## Explanations\r\n\r\n* First, you need to understand that `xml::parse_bufread(b)` is just a shortcut for `xml::RdfXmlParser::default()::parse(b)`, where [`RdfXmlParser`] implements the [`TripleParser`] trait. So basically, `xml::parse_bufread` is specified as the trait method [`TriplelParser::parse`] (and this should be true of the `parse_bufread` method of any parser module).\r\n\r\n* The contract of this method is to return a [`TripleSource`], which itself is a trait. This trait is implemented by any *iterator* of triples, but has other implementations. Each parser provides its own implementation of [`TripleSource`]. `xml`'s happens to be an iterator, and your code above was relying on that. `xml2`, on the other hand, has a different implementation (which contributes to making it faster, by the way :wink:).\r\n\r\n* Since sophia 0.5.0, [`TripleSource`] provides a method similar to Iterator's `collect`. It is called [`collect_triples`], and can build most implementations of [`Graph`] (to be precise: it can build any implementation of [`CollectibleGraph`]).\r\n\r\n* `Vec<[BoxTerm;3]>` happens to implement [`Graph`] and [`CollectibleGraph`].\r\n\r\nI hope this helps.\r\n\r\n[`RdfXmlParser`]: https://docs.rs/sophia/0.5.3/sophia/parser/xml/struct.RdfXmlParser.html\r\n[`TripleParser`]: https://docs.rs/sophia/0.5.3/sophia/parser/trait.TripleParser.html\r\n[`TriplelParser::parse`]: https://docs.rs/sophia/0.5.3/sophia/parser/trait.TripleParser.html#tymethod.parse\r\n[`TripleSource`]: https://docs.rs/sophia/0.5.3/sophia/triple/stream/trait.TripleSource.html\r\n[`collect_triples`]: https://docs.rs/sophia/0.5.3/sophia/triple/stream/trait.TripleSource.html?search=#method.collect_triples\r\n[`Graph`]: https://docs.rs/sophia/0.5.3/sophia/graph/trait.Graph.html\r\n[`CollectibleGraph`]: https://docs.rs/sophia/0.5.3/sophia/graph/trait.CollectibleGraph.html" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642889943> <http://schema.org/startDate> "2020-06-11T19:40:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/642889943> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-642889943"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643337801> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643337801> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643337801> <http://schema.org/description> "FTR, there was an error in my previous comment; `Vec<BoxTerm>` should have been `Vec<[BoxTerm;3]>`. I just edited it to fix that." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643337801> <http://schema.org/startDate> "2020-06-12T15:33:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643337801> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-643337801"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643602674> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643602674> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643602674> <http://schema.org/description> "I have it working now. It's taking me a while to test, because I think my code was dependent on behaviour from the old parser that was actually buggy. " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643602674> <http://schema.org/startDate> "2020-06-13T10:17:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643602674> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-643602674"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643662005> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643662005> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643662005> <http://schema.org/description> "Well, it seems to be working well. The two failures I were getting in my test suite were, I am sure, because of behaviour that was buggy in the old parser.  It also fixes #76. \r\n\r\nIn terms of the API, I think the issue is partly mine. I still not find Rust entirely natural to use. Especially when implemented though traits, the documentation you need in the Rust doc can be several clicks away or deep in the page. Main thing that would help would be a bit more module documentation and especially examples!\r\n\r\nI need to think more on sophia, because at the moment my own https://github.com/phillord/horned-owl duplicates some of the functionality. Too many options." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643662005> <http://schema.org/startDate> "2020-06-13T18:43:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/643662005> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-643662005"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644078747> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644078747> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644078747> <http://schema.org/description> "> Well, it seems to be working well.\r\n\r\nGreat. I'll make the Rio parser the default in the next release. I'll close both issues then.\r\n\r\n> Main thing that would help would be a bit more module documentation and especially examples!\r\n\r\nYep, that's a pertaining item on my TODO list ;)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644078747> <http://schema.org/startDate> "2020-06-15T11:44:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644078747> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-644078747"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644410574> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644410574> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644410574> <http://schema.org/description> "More documentation is on everyone's TODO list:-)\r\n\r\nDo you have an ETA for a new release?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644410574> <http://schema.org/startDate> "2020-06-15T21:55:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/644410574> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-644410574"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645822826> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645822826> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645822826> <http://schema.org/description> "From my point of view this PR is ready to be merged. If you have any requests about the changes I'll be glad to serve them." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645822826> <http://schema.org/startDate> "2020-06-18T07:04:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645822826> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/75#issuecomment-645822826"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645839416> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645839416> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645839416> <http://schema.org/description> "> Do you have an ETA for a new release?\r\n\r\nI'm hoping to do it by the end of June or beginning of July." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645839416> <http://schema.org/startDate> "2020-06-18T07:38:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/645839416> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-645839416"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646323082> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646323082> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646323082> <http://schema.org/description> "Okay, thanks for letting me know!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646323082> <http://schema.org/startDate> "2020-06-18T21:49:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646323082> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-646323082"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646460549> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646460549> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646460549> <http://schema.org/description> "I realized that the RDF test suite is rather a use-case of `sophia` than a required part of the library. Therefore, I decided that I'll publish the test suite as an own crate. Accordingly, I suppose to close this issue. \r\n\r\nOnce the next version of `sophia` is live I'll publish `rdf-testsuite` (if I'm ready by that time :sweat_smile:). Maybe we could add a _affiliated crates_ section to `sophia`'s `README`?  " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646460549> <http://schema.org/startDate> "2020-06-19T06:27:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/646460549> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/72#issuecomment-646460549"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659257773> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659257773> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659257773> <http://schema.org/description> "Commit 86baca0 is actually a merge of a rebased and adapted version of this PR. Closing as \"merged\"." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659257773> <http://schema.org/startDate> "2020-07-16T08:46:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659257773> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/75#issuecomment-659257773"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659545332> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659545332> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659545332> <http://schema.org/description> "> I'm hoping to do it by the end of June or beginning of July.\r\n\r\nA little later than announced, but v0.6.0 is now out, with `parser::xml` now based on Rio parser. Give it a try, and feel free to close this issue (and #76) if your problems are solved." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659545332> <http://schema.org/startDate> "2020-07-16T17:04:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659545332> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-659545332"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659876543> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659876543> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659876543> <http://schema.org/description> "With the latest commit 9464afa the new trait `TTerm` is now part of the public API and well integrated into the crate. Therefore, I consider this issue successfully done :+1: " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659876543> <http://schema.org/startDate> "2020-07-17T05:59:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659876543> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/55#issuecomment-659876543"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659969129> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659969129> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659969129> <http://schema.org/description> "Sounds like a great idea. I announced it [on my blog](http://champin.net/blog/2020/sophia-v0.6/)\r\nbut arguably it is not as visible as URLO :wink:.\r\n\r\nFeel free write the posts -- I confess I didn't have a URLO account until today... Please just mention me (I'm @pchampin there too) so I'll be notified (I guess)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659969129> <http://schema.org/startDate> "2020-07-17T08:48:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/659969129> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/78#issuecomment-659969129"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660823034> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660823034> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660823034> <http://schema.org/description> "In the scope of Rust, I would say `sophia` is your best choice currently.\r\n\r\nAs far as I understood, Hydra it's basically a vocabulary for describing Web APIs. For building up an RDF-graph `sophia` is totally suited and has many convenient things to do so, e.g. [`namespace!()`](https://docs.rs/sophia_api/0.6.1/sophia_api/macro.namespace.html) to declare your vocabulary inside Rust code.\r\n\r\nAs far as JSON-LD support goes, you might have seen the [`sophia_jsonld`](https://crates.io/crates/sophia_jsonld) crate. It might not be very mature as it can only serialize expanded JSON-LD at the moment but it is a good point to start. In the end, the _only_ missing thing for from the RDF-side of your project is to implement a proper JSON-LD compaction algorithm to have a nice serialization.\r\n\r\nThere are other crates about JSON-LD (https://crates.io/search?q=json-ld, https://lib.rs/search?q=json-ld), however, none of them is as well maintained as `sophia` and most are only concerned with JSON-LD directly and do not cover the RDF part." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660823034> <http://schema.org/startDate> "2020-07-20T06:05:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660823034> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/79#issuecomment-660823034"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660883539> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660883539> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660883539> <http://schema.org/description> "@brycefisher nice project, I'm looking forward to trying that!\r\n\r\n@MattesWhite summed it up pretty well. You can either construct an RDF graph using [the implementations provided by Sophia](https://docs.rs/sophia/0.6.1/sophia/graph/inmem/index.html), or maybe have your own types implement the [Graph trait](https://docs.rs/sophia_api/0.6.1/sophia_api/graph/trait.Graph.html) to avoid duplicating information.\r\n\r\nThen indeed, you can generate expanded JSON-LD with the serializer provided in [`sophia_jsonld`](https://crates.io/crates/sophia_jsonld). Compacting it to a more idiomatic form is the job of [JSON-LD's compaction algorithm](https://www.w3.org/TR/json-ld11-api/#compaction), which has no implementation in Rust for the moment, AFAIK.\r\n\r\nHowever, I have been in contact with @timothee-haudebourg, who is working on an [implementation of JSON-LD](https://github.com/timothee-haudebourg/json-ld). Hopefully I'll find some time to contribute to this one during the summer, but I guess Timothée can use any help he can find :wink:." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660883539> <http://schema.org/startDate> "2020-07-20T08:28:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/660883539> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/79#issuecomment-660883539"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661267740> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661267740> <http://schema.org/creator> <https://api.github.com/users/brycefisher> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661267740> <http://schema.org/description> "This is great info and great news! Thanks so much. I think I still need to get up to speed on JSON-LD syntax and semantics, but it sounds like this is the crate for me. Many thanks!!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661267740> <http://schema.org/startDate> "2020-07-20T18:46:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661267740> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/79#issuecomment-661267740"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661727505> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661727505> <http://schema.org/creator> <https://api.github.com/users/timothee-haudebourg> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661727505> <http://schema.org/description> "Help is indeed welcome :smiley: \r\nI'm working on the compaction algorithm on a [dedicated branch](https://github.com/timothee-haudebourg/json-ld/tree/compaction). I had to take a break from JSON-LD but I should resume development relatively soon." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661727505> <http://schema.org/startDate> "2020-07-21T08:54:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/661727505> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/79#issuecomment-661727505"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669752690> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669752690> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669752690> <http://schema.org/description> "Hi,\r\nnice to see another one interested in contributing to `sophia`. Regarding the licencing I can't tell you much. This is the responsibility of @pchampin . \r\n\r\nReally nice that you did a benchmark on IRI crates in Rust. As you can see in #74 we are aware of this issue. Like you pointed out IRIs can have many different use cases where the focus is laid on different properties. To be able to satisfy as many applications as possible the `TTerm` trait was designed as flexible as possible. Therefore, it may be of interest for your benchmark to implement `TTerm` for the other IRI types you inspect and look at the performance and size of graphs made up of those. You may also notice that `sophia` itself already provides two different implementations of an IRI, namely `sophia::term::SimpleIri` and `sophia::term::iri::Iri`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669752690> <http://schema.org/startDate> "2020-08-06T07:16:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669752690> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/81#issuecomment-669752690"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669799895> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669799895> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669799895> <http://schema.org/description> "@alexkreidler thanks for your interest, and welcome on board :)\r\n\r\nRe. licensing: as a French civil servant, I feel compelled to use CeCILL, which is compatible with French law and endorsed by my administration. Also, I usually start my personal projects with a rather protective license (GPL-like or LGPL-like) as a commitment to favour open-source in general.\r\n\r\nThat being said, I agree that a more permissive license is a better way to foster adoption (and external contribution) in a project like Sophia. I had already started I that with *some* of the crates, but I just (see commit above) changed all remaining crates to [CeCILL-B](https://cecill.info/licences/Licence_CeCILL-B_V1-en.txt), a BSD-compatible variant of CeCILL.\r\n\r\nThat's a first move, but I am still open to discussion. So:\r\n\r\nQ1: Is a BSD-style licence permissive enough for you, or is there something I'm missing that makes Apache more appealing to you?\r\n\r\nQ2: Is the CeCILL variant acceptable, or would you prefer to stick to the original one?\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669799895> <http://schema.org/startDate> "2020-08-06T08:48:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/669799895> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/81#issuecomment-669799895"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670075950> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670075950> <http://schema.org/creator> <https://api.github.com/users/alexkreidler> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670075950> <http://schema.org/description> "Hey all, thanks for the kind responses!\r\n\r\nFor both questions 1 and 2: I think the permissive CeCILL-B license makes perfect sense for this project. I'll close this issue.\r\n\r\nI'll start digging through some code and try to see which of the areas I mentioned above would be good to start at, and then maybe ask some more questions on the specific issues.\r\n\r\nAlso @MattesWhite thanks for those details, I might go back to updating the benchmarks later. " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670075950> <http://schema.org/startDate> "2020-08-06T17:38:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670075950> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/81#issuecomment-670075950"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670971828> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670971828> <http://schema.org/creator> <https://api.github.com/users/alexkreidler> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670971828> <http://schema.org/description> "I may start work on this soon. As it seems Sophia, Rio, and Oxigraph are very focused on performance, I think it may be beneficial to create two submodules of `sophia_jsonld`: one like `full` that fully implements the spec, and another `streaming` one, based on the following spec and implementations:\r\nhttps://www.w3.org/TR/2020/NOTE-json-ld11-streaming-20200507/\r\nhttps://github.com/rubensworks/jsonld-streaming-serializer.js\r\nhttps://github.com/rubensworks/jsonld-streaming-parser.js\r\n\r\nI will probably look at other JSON parsers in rust to get some inspiration. I'm a little inclined to just built the system on top of an existing well-maintained JSON parser like serde's [`StreamDeserializer`](https://docs.rs/serde_json/1.0.57/serde_json/de/struct.StreamDeserializer.html). \r\nI've also always liked the Parsing Expression Grammar formalism as it makes things simple, but looking at the Rust libraries it seems they are slower than other options. Nom looks like the next-best thing. However I am a bit wary of rolling my own entire parsing system; I don't think I trust my Rust skills that much yet. As long as I stay within a tool that has documentation, I'll be able to figure things out.\r\n\r\nI'd appreciate any thoughts or feedback people had before I jump in!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670971828> <http://schema.org/startDate> "2020-08-08T20:41:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670971828> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/16#issuecomment-670971828"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670972435> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670972435> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670972435> <http://schema.org/description> "It looks like a great idea!\r\n+1 to reuse a steaming JSON parser. It's what we did for the RDF/XML parsers with [`quick_xml`](https://github.com/tafia/quick-xml).\r\nHere is [a JSON parser benchmark](https://github.com/serde-rs/json-benchmark).\r\n\r\nI would love having `rio_jsonld` crates if you want to host your work as part of Rio!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670972435> <http://schema.org/startDate> "2020-08-08T20:49:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/670972435> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/16#issuecomment-670972435"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/671945422> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/671945422> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/671945422> <http://schema.org/description> "Thanks a lot." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/671945422> <http://schema.org/startDate> "2020-08-11T13:25:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/671945422> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/83#issuecomment-671945422"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008064> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008064> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008064> <http://schema.org/description> "Is this solved in v0.6.0?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008064> <http://schema.org/startDate> "2020-08-11T15:15:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008064> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/76#issuecomment-672008064"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008203> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008203> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008203> <http://schema.org/description> "@phillord are you ok to close this issue? Since the pre-release patch [\"[seemed] to be working well\"](https://github.com/pchampin/sophia_rs/issues/77#issuecomment-643662005), I am assuming that your problem is also solved with the current release.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008203> <http://schema.org/startDate> "2020-08-11T15:15:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/672008203> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-672008203"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673002145> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673002145> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673002145> <http://schema.org/description> "We don't have a proper Roadmap document, I'm afraid. The issue list serves as a list of \"future features\", while the README file gives a coarse summary of the \"current features\". Also, this is still a side project for everyone involved, so the development of new features is not driven by a strict planning, but more by fuzzier factors, such as the need of a given feature, or the urge to procrastinate ;-)\r\n\r\nThat being said, if you have a suggestion for the structure of such a roadmap file, a PR would be welcome...\r\n\r\nOtherwise, feel free to open specific issues related to features/functionalities that you are wondering about, or would like to be added." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673002145> <http://schema.org/startDate> "2020-08-12T17:14:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673002145> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/80#issuecomment-673002145"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673365099> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673365099> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673365099> <http://schema.org/description> "Yes, indeed I have a requirement for something to create new RDF terms, e.g. when I turn the results of the RDF test suite into RDF itself or more generally try to do some object-triple-mapping.\r\n\r\nAnother use case is creating new blank nodes when parsing `[]` terms in Turtle. But that can be handled by a dedicated crate.\r\n\r\n### Change `TermFactory`\r\n\r\nGiven the new `TTerm` trait, it is right to go for a `Term` agnostic factory, especially agnostic of `TermData`. However, I'd rather stick with the factory pattern.\r\n\r\nThe thing with a factory is that we still have a dedicated entity. The `CreateableTerm` solution you proposed has only `static` methods (no `self` argument). This makes it quite difficult to implement the trait for a `TermCache`. In addition, the naming `CreateableTerm` would not fit that well with an `ArcTermCache`.\r\n\r\n### Conclusion\r\n\r\nDue to the need to change the current `TermFactory` trait I'd close this PR and prepare a new one with a `sophia_term::Term` agnostic factory." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673365099> <http://schema.org/startDate> "2020-08-13T09:17:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673365099> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/82#issuecomment-673365099"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673633609> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673633609> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673633609> <http://schema.org/description> "I took a stab at adding doc comments: https://github.com/pchampin/sophia_rs/pull/84" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673633609> <http://schema.org/startDate> "2020-08-13T18:15:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/673633609> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/44#issuecomment-673633609"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/674504784> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/674504784> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/674504784> <http://schema.org/description> "I have added the last missing doc comments in the `sophia` crate and now the travis build is green :)\r\n\r\nThis pull request is now ready to be reviewed. @pchampin" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/674504784> <http://schema.org/startDate> "2020-08-16T09:40:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/674504784> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/84#issuecomment-674504784"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675604292> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675604292> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675604292> <http://schema.org/description> "I was also thinking of implementing a SPARQL parser with [nom](https://github.com/Geal/nom) before I found https://github.com/mattsse/nom-sparql which was mentioned by @dwhitney.\r\n\r\nIt says it's a WIP in the README and there was no development for more than a year. I wonder whether @mattsse would be willing to adapt it to fit into `sophia`, allowing it, via abstraction, to reuse some types and code. If he only meant it as a WIP which he doesn't want to maintain, maybe he'd be willing to have it adapted and included in `sophia`.\r\n\r\nA question for @pchampin is whether having `nom` as a dependency is acceptable." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675604292> <http://schema.org/startDate> "2020-08-18T17:12:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675604292> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-675604292"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675624146> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675624146> <http://schema.org/creator> <https://api.github.com/users/mattsse> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675624146> <http://schema.org/description> "Hi there 👋\r\n\r\nit's been a while since I've worked on it. It was a small side project I only hacked on for few weeks. Unfortunately I did not finish it so far that I was pleased with it and felt good about publishing it and moved on... 🙈\r\n\r\nCurrently I've got some time on my hands and if that crate could be useful for `sophia` I'd be willing to adapt/donate it. So long as `nom` as dependency is acceptable.\r\n\r\n> There seems to be no code related to testing the parser against the W3C testsuite\r\n\r\nI wasn't aware that there is a test suite, If you can point me to where i can find it, I'd be happy to test against it @Tpt \r\n\r\nfwiw the parser should be already feature complete(ish), so the most work would probably be \r\n\r\n* testing against the WC3 suite\r\n* impl `Display` for every type, so that a roundtrip (string -> sparql -> string) is supported\r\n* optional update to `nom` 0.6. (is still in alpha)\r\n\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675624146> <http://schema.org/startDate> "2020-08-18T17:52:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675624146> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-675624146"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675915964> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675915964> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675915964> <http://schema.org/description> "I'm not the owner of `sophia` but as a common API for RDF in Rust (#23) `sophia` should really only include \"the most common namespaces\", in my opinion.\r\n\r\nHowever, for exactly this reason the `namespace!` macro is public. You can just create your own _ontology crate_ all you need to do is having `sophia_api` as dependency and do something like:\r\n\r\n```rust\r\n#[macro_use]\r\nextern crate sophia_api;\r\n\r\npub mod lemon {\r\n    namespace!(\r\n        \"http://www.w3.org/ns/lemon/ontolex#\",\r\n        // I don't know the actual vocabulary        \r\n        Lemon,\r\n        Grenade,\r\n        Orange,\r\n        ...\r\n    )\r\n}\r\n```" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675915964> <http://schema.org/startDate> "2020-08-19T07:56:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675915964> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/87#issuecomment-675915964"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675923924> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675923924> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675923924> <http://schema.org/description> "I'm not the owner of `sophia` so take this with a grain of salt.\r\n\r\nThe aim of `sophia` is to provide a common API for RDF in Rust (#23), therefore, it is not intended to include a parser in `sophia` (the current implementations are more or less artefacts from before the split into several crates). A more fitting approach would be to develop a SPARQL API for `sophia`, i.e. a bunch of traits, base types and core functionality. So that third party crates, like `nom-sparql` can implement a parser against this API. In the end this should allow users to pick a parser that fits their needs best. In addition, this means that an implementation of a SPARQL engine is not required to include a parser.\r\n\r\n---\r\n\r\n@yever, @mattsse Nice to see new people working on `sophia` and its ecosystem :+1: \r\n\r\n@mattsse You can find out about the SPARQL test suite here: https://www.w3.org/2009/sparql/docs/tests/README.html" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675923924> <http://schema.org/startDate> "2020-08-19T08:12:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675923924> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-675923924"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675990339> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675990339> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675990339> <http://schema.org/description> "@MattesWhite This is exactly what I was about to answer. :-)\r\n\r\n@yever unless you have a strong objection, I think we can close this issue?\r\nOn a different topic: I am also involved in semweb + linguistics projects, so I would be interested to learn more about your work ;)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675990339> <http://schema.org/startDate> "2020-08-19T09:04:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675990339> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/87#issuecomment-675990339"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675993118> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675993118> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675993118> <http://schema.org/description> "@mattsse The recent versions of the test suite are here: https://github.com/w3c/rdf-tests/tree/gh-pages/sparql11\r\nI use this repository as a git submodule in Oxigraph in order to be able to get quick feedbacks (<1s for the full SPARQL test suite). Here is my testsuite evaluation code: https://github.com/oxigraph/oxigraph/blob/master/testsuite/src/sparql_evaluator.rs\r\nIt contains also support of query and update evaluation tests.\r\n\r\nOxigraph already has `Display` implementations: https://github.com/oxigraph/oxigraph/blob/master/lib/src/sparql/algebra.rs via the Sparql* structs (the default display prints the algebra notation). During testing I check that the -> serialized -> parser returns the same tree." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675993118> <http://schema.org/startDate> "2020-08-19T09:06:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/675993118> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-675993118"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/677698790> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/677698790> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/677698790> <http://schema.org/description> "As announced this PR is closed in favour of #89. " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/677698790> <http://schema.org/startDate> "2020-08-20T14:26:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/677698790> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/82#issuecomment-677698790"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678332754> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678332754> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678332754> <http://schema.org/description> "@yever asked\r\n> A question for @pchampin is whether having nom as a dependency is acceptable.\r\n\r\nand @MattesWhite replied\r\n> The aim of `sophia` is to provide a common API for RDF in Rust (#23), therefore, it is not intended to include a parser in `sophia`.\r\n\r\nTo be more precise: the `sophia_api` crate aims to provide a common API. Other crates in the `sophia` repo are intended to provide *some* implementation of said API  (e.g. `sophia_term` provides an implementation of the trait `TTerm`) but of course the goal is to keep the ecosystem open (e.g. [Oxigraph](https://github.com/oxigraph/oxigraph) is now implementing that API). Finally, the `sophia` crate is gradually becoming a \"compilation\" of other crates, including `sophia_api` and `sophia_term`. Eventually, the code it contains will move into more specialized crates (`sophia_X`), and the `sophia` crate itself will only be a bunch of `pub use` from those specialized crates. \r\n\r\nNow regarding SPARQL support, the first step would be to add new traits in `sophia_api`, related to SPARQL management. Off the top my head, I imagine\r\n* a `SparqlDataset` trait (deriving from `Dataset`), providing a `prepare_query` method, returning a `SparqlQuery`;\r\n* a `SparqlQuery` trait, providing a `execute` method, returning a `SparqlResult`;\r\n* a `SparqlResult` trait, providing a number of methods for interacting with the different kinds of results SPARQL can produce (SELECT, CONSTRUCT/DESCRIBE, ASK).\r\n\r\nThen one or several implementations of these traits could be provided. For [Oxigraph](https://github.com/oxigraph/oxigraph), this would amount to simply adapt the existing types to the traits above. But a generic implementation of `SparqlDataset`, able to resolve queries against any type implementing `Dataset`, would be nice too... This one could benefit from the nom-based parser by @mattsse.\r\n\r\nI hope this clarifies things.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678332754> <http://schema.org/startDate> "2020-08-21T14:53:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678332754> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-678332754"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623139> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623139> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623139> <http://schema.org/description> "Thank you both :-) \r\n\r\nI'll create my own crate for the namespaces I need, so I'm closing this issue." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623139> <http://schema.org/startDate> "2020-08-22T10:20:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623139> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/87#issuecomment-678623139"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623998> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623998> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623998> <http://schema.org/description> "Thanks @pchampin. This fits my expectations. I noticed that `sophia` is gradually being modularized and I like this development.\r\n\r\nI thought that the `nom`-based parser could maybe be included in the workspace (making in it an optional dependency for users of `sophia`) because it was created as a side project and not yet published into `crates.io`.\r\n\r\nI agree that creating the relevant traits for SPARQL would be a good first step that makes a lot of sense. In fact, `Oxigraph` and `nom-sparql` can be 2 integration test scenarios for these traits.\r\n\r\nI'll try to see how far I can go with implementing these traits and raise a pull request if I have something presentable." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623998> <http://schema.org/startDate> "2020-08-22T10:31:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/678623998> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/19#issuecomment-678623998"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680838385> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680838385> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680838385> <http://schema.org/description> "@alexkreidler agreed, a streaming JSON-LD parser/serializer would be very nice, in addition to a standard one.\r\nFor the parser part, integrating it with Rio looks like the way to go, as Sophia is relying on Rio for all its parsers now.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680838385> <http://schema.org/startDate> "2020-08-26T12:06:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680838385> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/16#issuecomment-680838385"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680847900> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680847900> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680847900> <http://schema.org/description> "> What's the long term objective in terms of compliance with the rest of the spec? (flattening, compaction, framing)\r\n\r\nMost algorithms in the spec take JSON as input and return JSON as output, so I consider them as slightly out-of-scope for Sophia (which is centered on the notion of RDF Graph). The only relevant algorithms for Sophia are therefore `toRdf` (i.e. a JSON-LD parser) and `fromRdf` (i.e. a JSON-LD serializer).\r\n\r\nThat being said, these two algorithms are not totally independant from the others:\r\n* `toRdf` explicitly relies on the expansion algorithm\r\n* `fromRdf` as described by the spec produces expanded JSON-LD, but a full-featured serializer should provide options to produce a compact JSON-LD document, according to a given context.\r\n\r\nThe way I see things:\r\n* a separate crate will implement the JSON-LD algorithms according to the JSON-LD spec (I have [this one](https://github.com/timothee-haudebourg/json-ld) in mind, I am in contact with @timothee-haudebourg);\r\n* `sophia_jsonld` will depend on this crate to provide implementations of the Sophia traits for parsers and serializer.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680847900> <http://schema.org/startDate> "2020-08-26T12:26:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/680847900> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/88#issuecomment-680847900"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681929965> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681929965> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681929965> <http://schema.org/description> "Well spotted. Thx" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681929965> <http://schema.org/startDate> "2020-08-27T12:54:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681929965> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/85#issuecomment-681929965"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681949112> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681949112> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681949112> <http://schema.org/description> "Awesome work, thx" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681949112> <http://schema.org/startDate> "2020-08-27T13:28:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681949112> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/86#issuecomment-681949112"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681998103> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681998103> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681998103> <http://schema.org/description> "@yever \r\nIn [a comment above](https://github.com/pchampin/sophia_rs/pull/91#discussion_r478430754), you wanted to make it easier for developers to handle results whose kind is known in advance.\r\n\r\nWith the commit just above, it is now possible to write:\r\n```rust\r\n    for binding in d.query(\"SELECT * {...}\")?.into_bindings() {\r\n        ...\r\n    }\r\n    // or\r\n    if d.query(\"ASK {...}\")?.into_boolean() {\r\n        ...\r\n    }\r\n```\r\nIs that enough for you? Or do you still think additional methods (`ask_query`, `select_query`) should be added? Adding them would be straighforward, but personally, I tend to prefer a single method, and the pattern above." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681998103> <http://schema.org/startDate> "2020-08-27T14:50:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/681998103> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/91#issuecomment-681998103"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682004755> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682004755> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682004755> <http://schema.org/description> "> @yever\r\n> In [a comment above](https://github.com/pchampin/sophia_rs/pull/91#discussion_r478430754), you wanted to make it easier for developers to handle results whose kind is known in advance.\r\n> \r\n> With the commit just above, it is now possible to write:\r\n> \r\n> ```rust\r\n>     for binding in d.query(\"SELECT * {...}\")?.into_bindings() {\r\n>         ...\r\n>     }\r\n>     // or\r\n>     if d.query(\"ASK {...}\")?.into_boolean() {\r\n>         ...\r\n>     }\r\n> ```\r\n> \r\n> Is that enough for you? Or do you still think additional methods (`ask_query`, `select_query`) should be added? Adding them would be straighforward, but personally, I tend to prefer a single method, and the pattern above.\r\n\r\n~Sorry, I overlooked those `into_` methods.~ Thanks for adding these methods :) I'm still a bit concerned about panicking... ;) \r\n\r\nWhat I would have liked is to have the `query` method itself express in its `Result` type an error such as `\"This SparqlResult is not a Bindings\"`.\r\n\r\nMaybe a reasonable middle ground here is to make the `into_` methods return a `Result`, so that the client code can question-mark both:\r\n```rust\r\nfor bindings in dataset.query(\"SELECT ...\")?.into_bindings()? {\r\n    ...\r\n}\r\n```\r\nso that eventually the client function can join these `Result`s and collect all possible errors, including \"wrong result type\".\r\n\r\nIt's true that it's mostly the client code's fault if they used `into_bindings()` and got a different result type, but I think it's a nicer dev experience if this doesn't blow up your program, but rather handles politely the mistake." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682004755> <http://schema.org/startDate> "2020-08-27T15:00:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682004755> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/91#issuecomment-682004755"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682858354> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682858354> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682858354> <http://schema.org/description> "@yever \r\n> I'm still a bit concerned about panicking... ;)\r\n\r\nI think of those methods as very similar to `unwrap`, i.e. you should only call them if you are 100% about the pre-condition. In doubt, you should use a `match` (or `if let`) instead.\r\n\r\n> It's true that it's mostly the client code's fault if they used `into_bindings()` and got a different result type, but I think it's a nicer dev experience if this doesn't blow up your program, but rather handles politely the mistake.\r\n\r\n`Result` adds a little overhead, which is acceptable to handle errors that may be caused by unexpected data or runtime conditions. It should not be used, IMO, to try and catch developer's mistakes -- those must be detected beforehand, and therefore should not need any handling at runtime.\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682858354> <http://schema.org/startDate> "2020-08-28T16:41:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/682858354> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/91#issuecomment-682858354"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683296247> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683296247> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683296247> <http://schema.org/description> "I was convinced by your last comment. I created a pull request into this pull request with some tests (#92).\r\n\r\nI wanted to suggest adding a reference to the SPARQL issue (#19) also to this pull request." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683296247> <http://schema.org/startDate> "2020-08-29T14:13:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683296247> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/91#issuecomment-683296247"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683413960> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683413960> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683413960> <http://schema.org/description> "Is there any specific reason for avoid passing tests to print anything?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683413960> <http://schema.org/startDate> "2020-08-30T12:21:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683413960> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/93#issuecomment-683413960"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683465390> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683465390> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683465390> <http://schema.org/description> "No strong reason, just avoiding cluttering the tests output with random messages.\r\nHere, I get\r\n```\r\n(4, Some(4))\r\n(0, None)\r\n```\r\nin the Oxigraph test output. I spent some time looking for what could print that in Oxigraph. I find it very disturbing." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683465390> <http://schema.org/startDate> "2020-08-30T20:15:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/683465390> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/93#issuecomment-683465390"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/684441427> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/684441427> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/684441427> <http://schema.org/description> "Oh, I didn't realize this was part of the test macro, and could \"pollute\" someone else's test suite. Sorry about that..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/684441427> <http://schema.org/startDate> "2020-09-01T06:28:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/684441427> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/93#issuecomment-684441427"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/685106560> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/685106560> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/685106560> <http://schema.org/description> "As a first step I refactored the core of `TermIndexMap` into a new crate [`indexed-hash-set`](https://crates.io/crates/indexed-hash-set) that basically provides the same core functionality. With this I'll continue my work on #89." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/685106560> <http://schema.org/startDate> "2020-09-01T20:14:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/685106560> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/64#issuecomment-685106560"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/686299858> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/686299858> <http://schema.org/creator> <https://api.github.com/users/MattesWhite> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/686299858> <http://schema.org/description> "Now it is ready to be merged :+1: " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/686299858> <http://schema.org/startDate> "2020-09-03T07:06:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/686299858> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/94#issuecomment-686299858"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691104063> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691104063> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691104063> <http://schema.org/description> ">this is a really nice project!\r\n\r\nthanks :)\r\n\r\n>I just found out, that I need to build 'sophia_iri' with Rust nightly.\r\n\r\nI am very surprised! I am using Rust stable exclusively (1.45.0 at the moment)...\r\nI just tried to build a fresh clone of the repo, and checked with `rustup show` that I am indeed using stable:\r\n```\r\nactive toolchain\r\n----------------\r\n\r\nstable-x86_64-unknown-linux-gnu (default)\r\nrustc 1.45.0 (5c1f21c3b 2020-07-13)\r\n```\r\n\r\nWhat toolchain are you using?\r\n" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691104063> <http://schema.org/startDate> "2020-09-11T13:44:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691104063> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/95#issuecomment-691104063"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691112688> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691112688> <http://schema.org/creator> <https://api.github.com/users/huhn511> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691112688> <http://schema.org/description> "Oh sorry, my fault!\r\n\r\nIndeed, I did just update Rust and now it works with stable. \r\n\r\nThanks!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691112688> <http://schema.org/startDate> "2020-09-11T14:00:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691112688> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/95#issuecomment-691112688"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691118234> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691118234> <http://schema.org/creator> <https://api.github.com/users/huhn511> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691118234> <http://schema.org/description> "I think it would be nice to have some examples for each crate. Also very helpful, would be a [mdbook](https://github.com/rust-lang/mdBook) for detailed documentation - and the rendered docs page a nice start for developers. \r\n\r\nWhat do you think about it? I could add PR with a docs folder and prepare something (setup mdbook, structure. GitHub deploy action, etc).\r\n\r\nBest wishes ✌️ " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691118234> <http://schema.org/startDate> "2020-09-11T14:11:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691118234> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/14#issuecomment-691118234"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691131628> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691131628> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691131628> <http://schema.org/description> "@huhn511 That would be really nice indeed, and yes, a PR would be greatly appreciated :)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691131628> <http://schema.org/startDate> "2020-09-11T14:35:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691131628> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/14#issuecomment-691131628"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691702197> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691702197> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691702197> <http://schema.org/description> "Thanks, I'll have a look asap." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691702197> <http://schema.org/startDate> "2020-09-13T17:48:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/691702197> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/96#issuecomment-691702197"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/693422154> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/693422154> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/693422154> <http://schema.org/description> "Finally found a moment to merge this! Thanks again @yever " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/693422154> <http://schema.org/startDate> "2020-09-16T13:55:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/693422154> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/84#issuecomment-693422154"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708223609> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708223609> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708223609> <http://schema.org/description> "Accepted (with a rebase and some extra commits) in 2219d38" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708223609> <http://schema.org/startDate> "2020-10-14T07:43:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708223609> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/96#issuecomment-708223609"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708224273> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708224273> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708224273> <http://schema.org/description> "Thanks a lot and sorry for taking so long integrating this PR. As you can see, I have made some adjustments, but I'm really happy with this.\r\nI'll try to find some time for adding some content, but feel free to submit some as well." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708224273> <http://schema.org/startDate> "2020-10-14T07:44:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/708224273> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/96#issuecomment-708224273"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715311393> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715311393> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715311393> <http://schema.org/description> "@yever thanks for this contribution, and sorry for the long delay.\r\nI don't think I will keep those tests, because the `sparql::dummy` module is really just that, a dummy module. Its purpose was to check that I could build an (fake) implementation of the proposed traits that would satisfy the compiler (the problem with generic code is that sometimes a trait compiles fine, but implementing it in a way that satisfies the compiler proves to be impossible, or very hard).\r\nSo before I merge the PR, the dummy module will probably go away..." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715311393> <http://schema.org/startDate> "2020-10-23T12:28:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715311393> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/92#issuecomment-715311393"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715375970> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715375970> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715375970> <http://schema.org/description> "@pchampin You are welcome and of course this PR is only a suggestion.\r\n\r\nMy intention was not to test the `dummy` module (which is anyway flagged to be compiled only for the tests), but to test through it the implementation of `SparqlResult` which is part of the public API.\r\n\r\nThe methods whose implementation I am testing are:\r\n- SparqlResult::into_bindings\r\n- SparqlResult::into_boolean\r\n- SparqlResult::into_triples\r\n\r\nIf you don't wish to test them, or you wish to test them in a different way, I'll close this PR." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715375970> <http://schema.org/startDate> "2020-10-23T14:26:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715375970> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/92#issuecomment-715375970"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715880560> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715880560> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715880560> <http://schema.org/description> "Sorry for keeping this stalling for so long.\r\nI pushed another commit with\r\n* more documentation\r\n* a couple of new traits for prepared queries, with a different approach.\r\n\r\nI was reluctant to abandon totally the idea that queries could be pre-processed once and reused multiple times... This proposal makes it possible, but does not impose on implementers to do anything about it (String provides a fallback implementation for Query).\r\n\r\n@Tpt, this notion of \"prepared query\" is quite different from the one in Oxigraph, but I think they can cohabit. It seems to me that `oxigraph::sparql::Query` would be a good candidate for it, but if I am wrong, you can still use `String` as a fallback.\r\n\r\nWhat do you guys think?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715880560> <http://schema.org/startDate> "2020-10-24T08:27:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715880560> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/91#issuecomment-715880560"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715881266> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715881266> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715881266> <http://schema.org/description> "Ok, I missed that, sorry. So yes, it makes sense to test those.\r\nBut the fact is that you are relying on the dummy `MyDataset` implementation of `SparqlDataset`...\r\nIf you don't mint, I suggest you wait until #91 is cleaned and merged, and then we can see how to proper test it.\r\nHopefully, I'll attend to that quickly (just waiting for your feedback and Tpt's on my last commit).\r\n\r\nThanks again." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715881266> <http://schema.org/startDate> "2020-10-24T08:32:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715881266> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/92#issuecomment-715881266"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715893299> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715893299> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715893299> <http://schema.org/description> "> @Tpt, this notion of \"prepared query\" is quite different from the one in Oxigraph, but I think they can cohabit. It seems to me that oxigraph::sparql::Query would be a good candidate for it.\r\n\r\nYes, indeed, `oxigraph::sparql::Query` is a great candidate for it. I was also planning to remove from Oxigraph 0.2 \"prepared query\" that does not do much outside parsing to only use this `oxigraph::sparql::Query` type. I guess we are moving in the same direction." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715893299> <http://schema.org/startDate> "2020-10-24T10:15:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715893299> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/91#issuecomment-715893299"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715903537> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715903537> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715903537> <http://schema.org/description> "I like the added docs and the support for prepared queries." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715903537> <http://schema.org/startDate> "2020-10-24T11:47:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715903537> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/91#issuecomment-715903537"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715905337> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715905337> <http://schema.org/creator> <https://api.github.com/users/yever> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715905337> <http://schema.org/description> "Ok. I converted this pull request into a draft. I'll create a new one after #91 is merged.\r\n\r\nI'll try to come up with a way to test without relying on `MyDataset`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715905337> <http://schema.org/startDate> "2020-10-24T12:04:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/715905337> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/92#issuecomment-715905337"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/716491394> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/716491394> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/716491394> <http://schema.org/description> "Closed in favour of #91 " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/716491394> <http://schema.org/startDate> "2020-10-26T11:36:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/716491394> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/90#issuecomment-716491394"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/717150045> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/717150045> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/717150045> <http://schema.org/description> "Actually, the implementation of  `SparqlBindings` was also part of the dummy module, so I removed it when merging the PR.\r\nI am not sure any type is an \"obvious\" candidate for being a default generic implementation for this trait... " .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/717150045> <http://schema.org/startDate> "2020-10-27T10:39:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/717150045> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/pull/92#issuecomment-717150045"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737194473> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737194473> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737194473> <http://schema.org/description> "Hi @007vasy and thanks for your interest.\r\nNo wonder you didn't find how to do it: there is currently no implemenation of a SPARQL-protocol client in Sophia... :-/\r\nBut I'll add this to my TODO list." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737194473> <http://schema.org/startDate> "2020-12-02T12:17:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737194473> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/97#issuecomment-737194473"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737486631> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737486631> <http://schema.org/creator> <https://api.github.com/users/007vasy> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737486631> <http://schema.org/description> "@pchampin that is great to hear! Is there anything what I can assist you with? I am not a Rust expert, however if you give me some  pointers I will try to help and assist. (I have developed a graphQL endpoint for Anzograph which uses SparQL protocol in a JS)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737486631> <http://schema.org/startDate> "2020-12-02T20:48:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/737486631> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/97#issuecomment-737486631"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/757571359> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/757571359> <http://schema.org/creator> <https://api.github.com/users/007vasy> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/757571359> <http://schema.org/description> "https://github.com/007vasy/rust-sparql-client/blob/main/src/main.rs this is a bare bones code, however with anzograph it could be used as  base for a sparql client for anzograph (I made it work with that db)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/757571359> <http://schema.org/startDate> "2021-01-11T00:26:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/757571359> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/97#issuecomment-757571359"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/767390760> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/767390760> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/767390760> <http://schema.org/description> "I have a first version of a a SPARQL client for Sophia here:\r\nhttps://github.com/pchampin/sophia_sparql_client\r\n\r\nIt is not on crates.io yet because it relies on the `SparqlDataset` trait which is only available in the github version of Sophia at the moment, but I'll release it at the same time as the next version of Sophia.\r\n\r\nIn the meantime, you can still use it directly from github:\r\nhttps://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/767390760> <http://schema.org/startDate> "2021-01-26T08:39:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/767390760> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/97#issuecomment-767390760"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/770297586> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/770297586> <http://schema.org/creator> <https://api.github.com/users/007vasy> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/770297586> <http://schema.org/description> "thanks! @pchampin :)" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/770297586> <http://schema.org/startDate> "2021-01-30T23:37:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/770297586> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/97#issuecomment-770297586"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773911563> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773911563> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773911563> <http://schema.org/description> "This seems to be a problem with quick-xml :-(\r\nI raised an issue about that tafia/quick-xml#258 .\r\n@Tpt, since this affects `rio_xml`, you might be interested in following that issue.\r\n\r\nThanks @phillord for spotting this." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773911563> <http://schema.org/startDate> "2021-02-05T09:30:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773911563> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98#issuecomment-773911563"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773915287> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773915287> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773915287> <http://schema.org/description> "I believe that `quick-xml` does not parse doctypes and so does not extract entities. It is definitely possible to add doctype entities support to `rio_xml` but it would require quite a lot of work.\r\n\r\n@phillord The quickest way to go for you seems to replace the file entities with XML namespaces." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773915287> <http://schema.org/startDate> "2021-02-05T09:37:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773915287> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98#issuecomment-773915287"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773925378> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773925378> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773925378> <http://schema.org/description> "@Tpt\r\n> The quickest way to go for you seems to replace the file entities with XML namespaces.\r\n\r\nIt is not so simple... The trick of using namespace-like entities is very common in RDF/XML, because there are a lot of places where IRIs have to be provided in *text* rather than tag or attribute names... The `rdf:datatype` in @phillord 's example illustrates that...\r\n\r\nI don't know if quick-xml allows to add custom entities to a a Reader. If so, a quick and dirty workaround could be to preemptively add common namespaces as entities... But I don't see any such feature in the documentation ;-(" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773925378> <http://schema.org/startDate> "2021-02-05T09:53:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773925378> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98#issuecomment-773925378"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773934931> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773934931> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773934931> <http://schema.org/description> "> I don't know if quick-xml allows to add custom entities to a a Reader.\r\n\r\nI don't think it's possible. quick-xml only supports the default entities for special character escaping (<, >...).\r\nIt would be great to add this feature as part of quick-xml or write a small library that allows entities encoding/decoding and parses the doctype." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773934931> <http://schema.org/startDate> "2021-02-05T10:10:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773934931> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98#issuecomment-773934931"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773995403> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773995403> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773995403> <http://schema.org/description> "@Tpt It's not my file, so I can't replace anything in it. Either it works or it doesn't.\r\n\r\nUnfortunately neither quick-xml nor xml-rs appear to be support doctype entity definitions. Understandably so, I guess, as doctype declarations seem a bit of a hangover from the past. But they are being used as this example, albeit a slightly old one, shows." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773995403> <http://schema.org/startDate> "2021-02-05T12:10:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/773995403> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98#issuecomment-773995403"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/774894695> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/774894695> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/774894695> <http://schema.org/description> "> Unfortunately neither quick-xml nor xml-rs appear to be support doctype entity definitions. \r\n\r\nYes, it would be great to have an XML library compatible with doctypes. This would allow better compatbility with old files indeed." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/774894695> <http://schema.org/startDate> "2021-02-08T06:06:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/774894695> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98#issuecomment-774894695"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775001140> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775001140> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775001140> <http://schema.org/description> "FTR, I submitted a PR to `quick-xml` (https://github.com/tafia/quick-xml/pull/261) which I believe hits a sweet spot:\r\n* it extends `quick-xml`'s API: when unescaping a text or attriute, one can now pass a map of custom entity definitions;\r\n* however, parsing the DOCTYPE in order to build that map remains the responsibity of the user (in our case, `rio_xml`).\r\n\r\nHowever, to solve this issue, we don't need to parse the DOCTYPE entirely. A naive extraction of internal entity definitions should cover 99.99% of RDF/XML files. I have a POC example program in my PR:\r\n\r\nhttps://github.com/pchampin/quick-xml/blob/custom-entities/examples/custom_entities.rs" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775001140> <http://schema.org/startDate> "2021-02-08T09:22:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775001140> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98#issuecomment-775001140"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775233882> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775233882> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775233882> <http://schema.org/description> "There is already a simple RDF/XML formatter in RIo: https://docs.rs/rio_xml/0.5.1/rio_xml/struct.RdfXmlFormatter.html" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775233882> <http://schema.org/startDate> "2021-02-08T15:35:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775233882> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/99#issuecomment-775233882"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775250301> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775250301> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775250301> <http://schema.org/description> "Yes, I have seen. I have currently implemented most of my library in terms of sophia. I'm actually fairly unclear about the relationship between sophia and rio; I know that rio has a sophia adaptor as a feature. It isn't clear to me whether I should be using rio directly or sophia as I am at the moment (this wasn't a principled decision on my behalf; I just found sophia first!)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775250301> <http://schema.org/startDate> "2021-02-08T15:59:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775250301> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/99#issuecomment-775250301"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775395978> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775395978> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775395978> <http://schema.org/description> ">  I'm actually fairly unclear about the relationship between sophia and rio; I know that rio has a sophia adaptor as a feature. \r\n\r\nIt's a bit complicated indeed.\r\nRio implements some [`sophia_api`](https://docs.rs/sophia_api) traits and [`sophia`](https://docs.rs/sophia) wraps the Rio parsers (RDF/XML and Turtle/Trig/Ntriples/NQuads) to provide its own parsing APIs. To summaries, Rio crates have an optional dependency on `sophia_api` and `sophia` depends on `sophia_api` and on the Rio crates. Rio also provides formatters (used in e.g. [Oxigraph](https://github.com/oxigraph/oxigraph)) but Sophia uses it owns formatters for Turtle and derived formats." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775395978> <http://schema.org/startDate> "2021-02-08T19:43:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775395978> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/99#issuecomment-775395978"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775481517> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775481517> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775481517> <http://schema.org/description> "Thank you for the explanation. It's very clear!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775481517> <http://schema.org/startDate> "2021-02-08T21:40:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775481517> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/99#issuecomment-775481517"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775901694> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775901694> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775901694> <http://schema.org/description> "To complete @Tpt's excellent summary: it would indeed be nice to wrap Rio formattes into Sophia's [serializer](resource://activity-streams/data/content/activity-streams.html#/) API, the same way it is currently done for parsers... TODO++" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775901694> <http://schema.org/startDate> "2021-02-09T12:27:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/775901694> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/99#issuecomment-775901694"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776123310> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776123310> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776123310> <http://schema.org/description> "The latest commit (017aab4f) adds a wrapper around Rio's RDF/XML and Turtle parsers. An example of how to use it is provided in `sophia/examples/convert.rs`." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776123310> <http://schema.org/startDate> "2021-02-09T17:53:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776123310> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/99#issuecomment-776123310"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776124828> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776124828> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776124828> <http://schema.org/description> "@phillord  up?\r\n> are you ok to close this issue? Since the pre-release patch \"[seemed] to be working well\", I am assuming that your problem is also solved with the current release." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776124828> <http://schema.org/startDate> "2021-02-09T17:56:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776124828> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/77#issuecomment-776124828"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776125154> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776125154> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776125154> <http://schema.org/description> "@phillord  up\r\n> Is this solved in v0.6.0?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776125154> <http://schema.org/startDate> "2021-02-09T17:56:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776125154> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/76#issuecomment-776125154"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776278587> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776278587> <http://schema.org/creator> <https://api.github.com/users/phillord> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776278587> <http://schema.org/description> "Thank you indeed!" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776278587> <http://schema.org/startDate> "2021-02-09T22:11:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/776278587> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/99#issuecomment-776278587"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/784958642> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/784958642> <http://schema.org/creator> <https://api.github.com/users/Tpt> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/784958642> <http://schema.org/description> "I have just added entities support to Rio: https://github.com/oxigraph/rio/commit/bb81f95d5cdf6dfcd278d92a2d51bf154a166fb5" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/784958642> <http://schema.org/startDate> "2021-02-24T10:02:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/784958642> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98#issuecomment-784958642"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/786549992> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/786549992> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/786549992> <http://schema.org/description> "@phillord I just pushed the branch [tmp-xml-entities](https://github.com/pchampin/sophia_rs/tree/tmp-xml-entities), which depends on @Tpt's github version of `rio`. This adds support for entities in RDF/XML into Sophia.\r\nI will not merge this branch as is, but rather wait for a stable version of `Rio`. However, in the meantime, you can have your own code depend on this branch." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/786549992> <http://schema.org/startDate> "2021-02-26T10:11:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/786549992> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/98#issuecomment-786549992"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791730599> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791730599> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791730599> <http://schema.org/description> "Thanks for your interest in Sophia. Indeed, documentation is not Sophia's strong suit at the moment, unfortunately.\r\n\r\nI propose to close this issue as a duplicate of #14, but I promise to try and make some proper documentation soon." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791730599> <http://schema.org/startDate> "2021-03-05T21:46:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791730599> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/100#issuecomment-791730599"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791886335> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791886335> <http://schema.org/creator> <https://api.github.com/users/hoijui> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791886335> <http://schema.org/description> "In a loop over all triples, I wanted to put all literal objects in one vec, all subjects and non-literal (and non-blank) objects in one vec, and all predicates + their subject and object in an other data structure (vec?), to be able to use them in a graph-data structure ([petgraph](https://docs.rs/petgraph/0.5.1/petgraph/)) later on. I was not able to do that, as I am a rust newb, and got lost in the lifetime, and nested data-structure complexity of it (from the sophia side).\r\nSuch an example would be nice to see for me (without the petgraph part, maybe?)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791886335> <http://schema.org/startDate> "2021-03-06T07:00:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791886335> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/14#issuecomment-791886335"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791904196> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791904196> <http://schema.org/creator> <https://api.github.com/users/hoijui> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791904196> <http://schema.org/description> "I guess I would store the `Rc<str>` in my `vec`, right?\r\nhow would I get to it, in the loop?" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791904196> <http://schema.org/startDate> "2021-03-06T09:46:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791904196> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/14#issuecomment-791904196"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791915963> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791915963> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791915963> <http://schema.org/description> "@hoijui I just opened the [discussion](https://github.com/pchampin/sophia_rs/discussions) feature, so that we can have StackOverflow style Q&A's, which I think is more appropriate for that kind of question. I suggest that you open a question there, and provide an code example... I'll have a look." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791915963> <http://schema.org/startDate> "2021-03-06T11:17:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791915963> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/14#issuecomment-791915963"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791950397> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791950397> <http://schema.org/creator> <https://api.github.com/users/hoijui> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791950397> <http://schema.org/description> "done: https://github.com/pchampin/sophia_rs/discussions/102" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791950397> <http://schema.org/startDate> "2021-03-06T13:59:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/791950397> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/14#issuecomment-791950397"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797277754> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797277754> <http://schema.org/creator> <https://api.github.com/users/niko2342> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797277754> <http://schema.org/description> "It seems to be a bug in the nightly-version of rust. After updating to the latest nightly-build every works as expected (same on stable version)." .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797277754> <http://schema.org/startDate> "2021-03-12T06:51:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797277754> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/103#issuecomment-797277754"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797322024> <http://example.com/ns#authorAssociation> "OWNER" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797322024> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797322024> <http://schema.org/description> "Thanks for the update. I was about to ask what version of rust you were using ;)\r\n\r\nI have a similar problem currently in the CI: the stable and nightly version are passing the tests correctly, but the beta version is panicking with a similar message to yours... :-/" .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797322024> <http://schema.org/startDate> "2021-03-12T08:25:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/pchampin/sophia_rs/issues/comments/797322024> <http://schema.org/url> "https://github.com/pchampin/sophia_rs/issues/103#issuecomment-797322024"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/pchampin/sophia_rs/labels/bug> <http://schema.org/description> "Something isn't working" .
<https://api.github.com/repos/pchampin/sophia_rs/labels/bug> <http://schema.org/name> "bug" .
<https://api.github.com/repos/pchampin/sophia_rs/labels/duplicate> <http://schema.org/description> "This issue or pull request already exists" .
<https://api.github.com/repos/pchampin/sophia_rs/labels/duplicate> <http://schema.org/name> "duplicate" .
<https://api.github.com/repos/pchampin/sophia_rs/labels/enhancement> <http://schema.org/description> "New feature or request" .
<https://api.github.com/repos/pchampin/sophia_rs/labels/enhancement> <http://schema.org/name> "enhancement" .
<https://api.github.com/repos/pchampin/sophia_rs/labels/good%20first%20issue> <http://schema.org/description> "Good for newcomers" .
<https://api.github.com/repos/pchampin/sophia_rs/labels/good%20first%20issue> <http://schema.org/name> "good first issue" .
<https://api.github.com/repos/pchampin/sophia_rs/labels/help%20wanted> <http://schema.org/description> "Extra attention is needed" .
<https://api.github.com/repos/pchampin/sophia_rs/labels/help%20wanted> <http://schema.org/name> "help wanted" .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/100> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/103> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/10> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/11> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/12> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/13> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/14> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/15> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/16> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/17> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/18> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/19> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/1> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/20> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/21> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/22> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/23> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/24> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/25> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/26> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/27> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/28> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/29> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/2> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/30> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/31> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/32> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/33> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/34> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/35> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/36> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/37> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/38> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/39> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/3> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/40> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/41> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/42> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/43> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/44> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/45> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/46> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/47> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/48> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/49> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/4> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/50> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/51> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/52> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/53> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/54> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/55> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/56> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/57> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/58> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/59> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/5> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/60> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/61> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/62> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/63> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/64> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/65> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/66> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/67> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/68> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/69> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/6> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/70> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/71> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/72> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/73> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/74> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/75> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/76> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/77> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/78> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/79> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/7> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/80> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/81> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/82> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/83> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/84> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/85> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/86> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/87> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/88> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/89> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/8> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/90> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/91> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/92> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/93> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/94> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/95> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/96> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/97> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/98> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/99> .
<https://api.github.com/repos/pchampin/sophia_rs> <http://example.com/ns#issue> <https://api.github.com/repos/pchampin/sophia_rs/issues/9> .
<https://api.github.com/users/007vasy> <http://schema.org/accountId> "007vasy" .
<https://api.github.com/users/007vasy> <http://schema.org/url> "https://github.com/007vasy"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/007vasy> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/BruJu> <http://schema.org/accountId> "BruJu" .
<https://api.github.com/users/BruJu> <http://schema.org/url> "https://github.com/BruJu"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BruJu> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/JordanShurmer> <http://schema.org/accountId> "JordanShurmer" .
<https://api.github.com/users/JordanShurmer> <http://schema.org/url> "https://github.com/JordanShurmer"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/JordanShurmer> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/MarcAntoine-Arnaud> <http://schema.org/accountId> "MarcAntoine-Arnaud" .
<https://api.github.com/users/MarcAntoine-Arnaud> <http://schema.org/url> "https://github.com/MarcAntoine-Arnaud"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/MarcAntoine-Arnaud> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/MattesWhite> <http://schema.org/accountId> "MattesWhite" .
<https://api.github.com/users/MattesWhite> <http://schema.org/url> "https://github.com/MattesWhite"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/MattesWhite> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/Tpt> <http://schema.org/accountId> "Tpt" .
<https://api.github.com/users/Tpt> <http://schema.org/url> "https://github.com/Tpt"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/Tpt> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/alexkreidler> <http://schema.org/accountId> "alexkreidler" .
<https://api.github.com/users/alexkreidler> <http://schema.org/url> "https://github.com/alexkreidler"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/alexkreidler> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/althonos> <http://schema.org/accountId> "althonos" .
<https://api.github.com/users/althonos> <http://schema.org/url> "https://github.com/althonos"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/althonos> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/brycefisher> <http://schema.org/accountId> "brycefisher" .
<https://api.github.com/users/brycefisher> <http://schema.org/url> "https://github.com/brycefisher"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/brycefisher> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/dwhitney> <http://schema.org/accountId> "dwhitney" .
<https://api.github.com/users/dwhitney> <http://schema.org/url> "https://github.com/dwhitney"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dwhitney> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/fimbault> <http://schema.org/accountId> "fimbault" .
<https://api.github.com/users/fimbault> <http://schema.org/url> "https://github.com/fimbault"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/fimbault> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/hoijui> <http://schema.org/accountId> "hoijui" .
<https://api.github.com/users/hoijui> <http://schema.org/url> "https://github.com/hoijui"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/hoijui> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/huhn511> <http://schema.org/accountId> "huhn511" .
<https://api.github.com/users/huhn511> <http://schema.org/url> "https://github.com/huhn511"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/huhn511> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/mattsse> <http://schema.org/accountId> "mattsse" .
<https://api.github.com/users/mattsse> <http://schema.org/url> "https://github.com/mattsse"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/mattsse> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/niko2342> <http://schema.org/accountId> "niko2342" .
<https://api.github.com/users/niko2342> <http://schema.org/url> "https://github.com/niko2342"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/niko2342> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/phillord> <http://schema.org/accountId> "phillord" .
<https://api.github.com/users/phillord> <http://schema.org/url> "https://github.com/phillord"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/phillord> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/rybesh> <http://schema.org/accountId> "rybesh" .
<https://api.github.com/users/rybesh> <http://schema.org/url> "https://github.com/rybesh"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/rybesh> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/tbourg> <http://schema.org/accountId> "tbourg" .
<https://api.github.com/users/tbourg> <http://schema.org/url> "https://github.com/tbourg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/tbourg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/timothee-haudebourg> <http://schema.org/accountId> "timothee-haudebourg" .
<https://api.github.com/users/timothee-haudebourg> <http://schema.org/url> "https://github.com/timothee-haudebourg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/timothee-haudebourg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/users/yever> <http://schema.org/accountId> "yever" .
<https://api.github.com/users/yever> <http://schema.org/url> "https://github.com/yever"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/yever> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
